// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2023 15:59:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lsu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lsu_vlg_sample_tst(
	addr,
	clk_i,
	io_sw,
	rst_ni,
	st_data,
	st_en,
	sampler_tx
);
input [11:0] addr;
input  clk_i;
input [31:0] io_sw;
input  rst_ni;
input [31:0] st_data;
input  st_en;
output sampler_tx;

reg sample;
time current_time;
always @(addr or clk_i or io_sw or rst_ni or st_data or st_en)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lsu_vlg_check_tst (
	io_hex0,
	io_hex1,
	io_hex2,
	io_hex3,
	io_hex4,
	io_hex5,
	io_hex6,
	io_hex7,
	io_lcd,
	io_ledg,
	io_ledr,
	ld_data,
	sampler_rx
);
input [31:0] io_hex0;
input [31:0] io_hex1;
input [31:0] io_hex2;
input [31:0] io_hex3;
input [31:0] io_hex4;
input [31:0] io_hex5;
input [31:0] io_hex6;
input [31:0] io_hex7;
input [31:0] io_lcd;
input [31:0] io_ledg;
input [31:0] io_ledr;
input [31:0] ld_data;
input sampler_rx;

reg [31:0] io_hex0_expected;
reg [31:0] io_hex1_expected;
reg [31:0] io_hex2_expected;
reg [31:0] io_hex3_expected;
reg [31:0] io_hex4_expected;
reg [31:0] io_hex5_expected;
reg [31:0] io_hex6_expected;
reg [31:0] io_hex7_expected;
reg [31:0] io_lcd_expected;
reg [31:0] io_ledg_expected;
reg [31:0] io_ledr_expected;
reg [31:0] ld_data_expected;

reg [31:0] io_hex0_prev;
reg [31:0] io_hex1_prev;
reg [31:0] io_hex2_prev;
reg [31:0] io_hex3_prev;
reg [31:0] io_hex4_prev;
reg [31:0] io_hex5_prev;
reg [31:0] io_hex6_prev;
reg [31:0] io_hex7_prev;
reg [31:0] io_lcd_prev;
reg [31:0] io_ledg_prev;
reg [31:0] io_ledr_prev;
reg [31:0] ld_data_prev;

reg [31:0] io_hex0_expected_prev;
reg [31:0] io_hex1_expected_prev;
reg [31:0] io_hex2_expected_prev;
reg [31:0] io_hex3_expected_prev;
reg [31:0] io_hex4_expected_prev;
reg [31:0] io_hex5_expected_prev;
reg [31:0] io_hex6_expected_prev;
reg [31:0] io_hex7_expected_prev;
reg [31:0] io_lcd_expected_prev;
reg [31:0] io_ledg_expected_prev;
reg [31:0] io_ledr_expected_prev;
reg [31:0] ld_data_expected_prev;

reg [31:0] last_io_hex0_exp;
reg [31:0] last_io_hex1_exp;
reg [31:0] last_io_hex2_exp;
reg [31:0] last_io_hex3_exp;
reg [31:0] last_io_hex4_exp;
reg [31:0] last_io_hex5_exp;
reg [31:0] last_io_hex6_exp;
reg [31:0] last_io_hex7_exp;
reg [31:0] last_io_lcd_exp;
reg [31:0] last_io_ledg_exp;
reg [31:0] last_io_ledr_exp;
reg [31:0] last_ld_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	io_hex0_prev = io_hex0;
	io_hex1_prev = io_hex1;
	io_hex2_prev = io_hex2;
	io_hex3_prev = io_hex3;
	io_hex4_prev = io_hex4;
	io_hex5_prev = io_hex5;
	io_hex6_prev = io_hex6;
	io_hex7_prev = io_hex7;
	io_lcd_prev = io_lcd;
	io_ledg_prev = io_ledg;
	io_ledr_prev = io_ledr;
	ld_data_prev = ld_data;
end

// update expected /o prevs

always @(trigger)
begin
	io_hex0_expected_prev = io_hex0_expected;
	io_hex1_expected_prev = io_hex1_expected;
	io_hex2_expected_prev = io_hex2_expected;
	io_hex3_expected_prev = io_hex3_expected;
	io_hex4_expected_prev = io_hex4_expected;
	io_hex5_expected_prev = io_hex5_expected;
	io_hex6_expected_prev = io_hex6_expected;
	io_hex7_expected_prev = io_hex7_expected;
	io_lcd_expected_prev = io_lcd_expected;
	io_ledg_expected_prev = io_ledg_expected;
	io_ledr_expected_prev = io_ledr_expected;
	ld_data_expected_prev = ld_data_expected;
end


// expected io_hex0[ 31 ]
initial
begin
	io_hex0_expected[31] = 1'bX;
end 
// expected io_hex0[ 30 ]
initial
begin
	io_hex0_expected[30] = 1'bX;
end 
// expected io_hex0[ 29 ]
initial
begin
	io_hex0_expected[29] = 1'bX;
end 
// expected io_hex0[ 28 ]
initial
begin
	io_hex0_expected[28] = 1'bX;
end 
// expected io_hex0[ 27 ]
initial
begin
	io_hex0_expected[27] = 1'bX;
end 
// expected io_hex0[ 26 ]
initial
begin
	io_hex0_expected[26] = 1'bX;
end 
// expected io_hex0[ 25 ]
initial
begin
	io_hex0_expected[25] = 1'bX;
end 
// expected io_hex0[ 24 ]
initial
begin
	io_hex0_expected[24] = 1'bX;
end 
// expected io_hex0[ 23 ]
initial
begin
	io_hex0_expected[23] = 1'bX;
end 
// expected io_hex0[ 22 ]
initial
begin
	io_hex0_expected[22] = 1'bX;
end 
// expected io_hex0[ 21 ]
initial
begin
	io_hex0_expected[21] = 1'bX;
end 
// expected io_hex0[ 20 ]
initial
begin
	io_hex0_expected[20] = 1'bX;
end 
// expected io_hex0[ 19 ]
initial
begin
	io_hex0_expected[19] = 1'bX;
end 
// expected io_hex0[ 18 ]
initial
begin
	io_hex0_expected[18] = 1'bX;
end 
// expected io_hex0[ 17 ]
initial
begin
	io_hex0_expected[17] = 1'bX;
end 
// expected io_hex0[ 16 ]
initial
begin
	io_hex0_expected[16] = 1'bX;
end 
// expected io_hex0[ 15 ]
initial
begin
	io_hex0_expected[15] = 1'bX;
end 
// expected io_hex0[ 14 ]
initial
begin
	io_hex0_expected[14] = 1'bX;
end 
// expected io_hex0[ 13 ]
initial
begin
	io_hex0_expected[13] = 1'bX;
end 
// expected io_hex0[ 12 ]
initial
begin
	io_hex0_expected[12] = 1'bX;
end 
// expected io_hex0[ 11 ]
initial
begin
	io_hex0_expected[11] = 1'bX;
end 
// expected io_hex0[ 10 ]
initial
begin
	io_hex0_expected[10] = 1'bX;
end 
// expected io_hex0[ 9 ]
initial
begin
	io_hex0_expected[9] = 1'bX;
end 
// expected io_hex0[ 8 ]
initial
begin
	io_hex0_expected[8] = 1'bX;
end 
// expected io_hex0[ 7 ]
initial
begin
	io_hex0_expected[7] = 1'bX;
end 
// expected io_hex0[ 6 ]
initial
begin
	io_hex0_expected[6] = 1'bX;
end 
// expected io_hex0[ 5 ]
initial
begin
	io_hex0_expected[5] = 1'bX;
end 
// expected io_hex0[ 4 ]
initial
begin
	io_hex0_expected[4] = 1'bX;
end 
// expected io_hex0[ 3 ]
initial
begin
	io_hex0_expected[3] = 1'bX;
end 
// expected io_hex0[ 2 ]
initial
begin
	io_hex0_expected[2] = 1'bX;
end 
// expected io_hex0[ 1 ]
initial
begin
	io_hex0_expected[1] = 1'bX;
end 
// expected io_hex0[ 0 ]
initial
begin
	io_hex0_expected[0] = 1'bX;
end 
// expected io_hex1[ 31 ]
initial
begin
	io_hex1_expected[31] = 1'bX;
end 
// expected io_hex1[ 30 ]
initial
begin
	io_hex1_expected[30] = 1'bX;
end 
// expected io_hex1[ 29 ]
initial
begin
	io_hex1_expected[29] = 1'bX;
end 
// expected io_hex1[ 28 ]
initial
begin
	io_hex1_expected[28] = 1'bX;
end 
// expected io_hex1[ 27 ]
initial
begin
	io_hex1_expected[27] = 1'bX;
end 
// expected io_hex1[ 26 ]
initial
begin
	io_hex1_expected[26] = 1'bX;
end 
// expected io_hex1[ 25 ]
initial
begin
	io_hex1_expected[25] = 1'bX;
end 
// expected io_hex1[ 24 ]
initial
begin
	io_hex1_expected[24] = 1'bX;
end 
// expected io_hex1[ 23 ]
initial
begin
	io_hex1_expected[23] = 1'bX;
end 
// expected io_hex1[ 22 ]
initial
begin
	io_hex1_expected[22] = 1'bX;
end 
// expected io_hex1[ 21 ]
initial
begin
	io_hex1_expected[21] = 1'bX;
end 
// expected io_hex1[ 20 ]
initial
begin
	io_hex1_expected[20] = 1'bX;
end 
// expected io_hex1[ 19 ]
initial
begin
	io_hex1_expected[19] = 1'bX;
end 
// expected io_hex1[ 18 ]
initial
begin
	io_hex1_expected[18] = 1'bX;
end 
// expected io_hex1[ 17 ]
initial
begin
	io_hex1_expected[17] = 1'bX;
end 
// expected io_hex1[ 16 ]
initial
begin
	io_hex1_expected[16] = 1'bX;
end 
// expected io_hex1[ 15 ]
initial
begin
	io_hex1_expected[15] = 1'bX;
end 
// expected io_hex1[ 14 ]
initial
begin
	io_hex1_expected[14] = 1'bX;
end 
// expected io_hex1[ 13 ]
initial
begin
	io_hex1_expected[13] = 1'bX;
end 
// expected io_hex1[ 12 ]
initial
begin
	io_hex1_expected[12] = 1'bX;
end 
// expected io_hex1[ 11 ]
initial
begin
	io_hex1_expected[11] = 1'bX;
end 
// expected io_hex1[ 10 ]
initial
begin
	io_hex1_expected[10] = 1'bX;
end 
// expected io_hex1[ 9 ]
initial
begin
	io_hex1_expected[9] = 1'bX;
end 
// expected io_hex1[ 8 ]
initial
begin
	io_hex1_expected[8] = 1'bX;
end 
// expected io_hex1[ 7 ]
initial
begin
	io_hex1_expected[7] = 1'bX;
end 
// expected io_hex1[ 6 ]
initial
begin
	io_hex1_expected[6] = 1'bX;
end 
// expected io_hex1[ 5 ]
initial
begin
	io_hex1_expected[5] = 1'bX;
end 
// expected io_hex1[ 4 ]
initial
begin
	io_hex1_expected[4] = 1'bX;
end 
// expected io_hex1[ 3 ]
initial
begin
	io_hex1_expected[3] = 1'bX;
end 
// expected io_hex1[ 2 ]
initial
begin
	io_hex1_expected[2] = 1'bX;
end 
// expected io_hex1[ 1 ]
initial
begin
	io_hex1_expected[1] = 1'bX;
end 
// expected io_hex1[ 0 ]
initial
begin
	io_hex1_expected[0] = 1'bX;
end 
// expected io_hex2[ 31 ]
initial
begin
	io_hex2_expected[31] = 1'bX;
end 
// expected io_hex2[ 30 ]
initial
begin
	io_hex2_expected[30] = 1'bX;
end 
// expected io_hex2[ 29 ]
initial
begin
	io_hex2_expected[29] = 1'bX;
end 
// expected io_hex2[ 28 ]
initial
begin
	io_hex2_expected[28] = 1'bX;
end 
// expected io_hex2[ 27 ]
initial
begin
	io_hex2_expected[27] = 1'bX;
end 
// expected io_hex2[ 26 ]
initial
begin
	io_hex2_expected[26] = 1'bX;
end 
// expected io_hex2[ 25 ]
initial
begin
	io_hex2_expected[25] = 1'bX;
end 
// expected io_hex2[ 24 ]
initial
begin
	io_hex2_expected[24] = 1'bX;
end 
// expected io_hex2[ 23 ]
initial
begin
	io_hex2_expected[23] = 1'bX;
end 
// expected io_hex2[ 22 ]
initial
begin
	io_hex2_expected[22] = 1'bX;
end 
// expected io_hex2[ 21 ]
initial
begin
	io_hex2_expected[21] = 1'bX;
end 
// expected io_hex2[ 20 ]
initial
begin
	io_hex2_expected[20] = 1'bX;
end 
// expected io_hex2[ 19 ]
initial
begin
	io_hex2_expected[19] = 1'bX;
end 
// expected io_hex2[ 18 ]
initial
begin
	io_hex2_expected[18] = 1'bX;
end 
// expected io_hex2[ 17 ]
initial
begin
	io_hex2_expected[17] = 1'bX;
end 
// expected io_hex2[ 16 ]
initial
begin
	io_hex2_expected[16] = 1'bX;
end 
// expected io_hex2[ 15 ]
initial
begin
	io_hex2_expected[15] = 1'bX;
end 
// expected io_hex2[ 14 ]
initial
begin
	io_hex2_expected[14] = 1'bX;
end 
// expected io_hex2[ 13 ]
initial
begin
	io_hex2_expected[13] = 1'bX;
end 
// expected io_hex2[ 12 ]
initial
begin
	io_hex2_expected[12] = 1'bX;
end 
// expected io_hex2[ 11 ]
initial
begin
	io_hex2_expected[11] = 1'bX;
end 
// expected io_hex2[ 10 ]
initial
begin
	io_hex2_expected[10] = 1'bX;
end 
// expected io_hex2[ 9 ]
initial
begin
	io_hex2_expected[9] = 1'bX;
end 
// expected io_hex2[ 8 ]
initial
begin
	io_hex2_expected[8] = 1'bX;
end 
// expected io_hex2[ 7 ]
initial
begin
	io_hex2_expected[7] = 1'bX;
end 
// expected io_hex2[ 6 ]
initial
begin
	io_hex2_expected[6] = 1'bX;
end 
// expected io_hex2[ 5 ]
initial
begin
	io_hex2_expected[5] = 1'bX;
end 
// expected io_hex2[ 4 ]
initial
begin
	io_hex2_expected[4] = 1'bX;
end 
// expected io_hex2[ 3 ]
initial
begin
	io_hex2_expected[3] = 1'bX;
end 
// expected io_hex2[ 2 ]
initial
begin
	io_hex2_expected[2] = 1'bX;
end 
// expected io_hex2[ 1 ]
initial
begin
	io_hex2_expected[1] = 1'bX;
end 
// expected io_hex2[ 0 ]
initial
begin
	io_hex2_expected[0] = 1'bX;
end 
// expected io_hex3[ 31 ]
initial
begin
	io_hex3_expected[31] = 1'bX;
end 
// expected io_hex3[ 30 ]
initial
begin
	io_hex3_expected[30] = 1'bX;
end 
// expected io_hex3[ 29 ]
initial
begin
	io_hex3_expected[29] = 1'bX;
end 
// expected io_hex3[ 28 ]
initial
begin
	io_hex3_expected[28] = 1'bX;
end 
// expected io_hex3[ 27 ]
initial
begin
	io_hex3_expected[27] = 1'bX;
end 
// expected io_hex3[ 26 ]
initial
begin
	io_hex3_expected[26] = 1'bX;
end 
// expected io_hex3[ 25 ]
initial
begin
	io_hex3_expected[25] = 1'bX;
end 
// expected io_hex3[ 24 ]
initial
begin
	io_hex3_expected[24] = 1'bX;
end 
// expected io_hex3[ 23 ]
initial
begin
	io_hex3_expected[23] = 1'bX;
end 
// expected io_hex3[ 22 ]
initial
begin
	io_hex3_expected[22] = 1'bX;
end 
// expected io_hex3[ 21 ]
initial
begin
	io_hex3_expected[21] = 1'bX;
end 
// expected io_hex3[ 20 ]
initial
begin
	io_hex3_expected[20] = 1'bX;
end 
// expected io_hex3[ 19 ]
initial
begin
	io_hex3_expected[19] = 1'bX;
end 
// expected io_hex3[ 18 ]
initial
begin
	io_hex3_expected[18] = 1'bX;
end 
// expected io_hex3[ 17 ]
initial
begin
	io_hex3_expected[17] = 1'bX;
end 
// expected io_hex3[ 16 ]
initial
begin
	io_hex3_expected[16] = 1'bX;
end 
// expected io_hex3[ 15 ]
initial
begin
	io_hex3_expected[15] = 1'bX;
end 
// expected io_hex3[ 14 ]
initial
begin
	io_hex3_expected[14] = 1'bX;
end 
// expected io_hex3[ 13 ]
initial
begin
	io_hex3_expected[13] = 1'bX;
end 
// expected io_hex3[ 12 ]
initial
begin
	io_hex3_expected[12] = 1'bX;
end 
// expected io_hex3[ 11 ]
initial
begin
	io_hex3_expected[11] = 1'bX;
end 
// expected io_hex3[ 10 ]
initial
begin
	io_hex3_expected[10] = 1'bX;
end 
// expected io_hex3[ 9 ]
initial
begin
	io_hex3_expected[9] = 1'bX;
end 
// expected io_hex3[ 8 ]
initial
begin
	io_hex3_expected[8] = 1'bX;
end 
// expected io_hex3[ 7 ]
initial
begin
	io_hex3_expected[7] = 1'bX;
end 
// expected io_hex3[ 6 ]
initial
begin
	io_hex3_expected[6] = 1'bX;
end 
// expected io_hex3[ 5 ]
initial
begin
	io_hex3_expected[5] = 1'bX;
end 
// expected io_hex3[ 4 ]
initial
begin
	io_hex3_expected[4] = 1'bX;
end 
// expected io_hex3[ 3 ]
initial
begin
	io_hex3_expected[3] = 1'bX;
end 
// expected io_hex3[ 2 ]
initial
begin
	io_hex3_expected[2] = 1'bX;
end 
// expected io_hex3[ 1 ]
initial
begin
	io_hex3_expected[1] = 1'bX;
end 
// expected io_hex3[ 0 ]
initial
begin
	io_hex3_expected[0] = 1'bX;
end 
// expected io_hex4[ 31 ]
initial
begin
	io_hex4_expected[31] = 1'bX;
end 
// expected io_hex4[ 30 ]
initial
begin
	io_hex4_expected[30] = 1'bX;
end 
// expected io_hex4[ 29 ]
initial
begin
	io_hex4_expected[29] = 1'bX;
end 
// expected io_hex4[ 28 ]
initial
begin
	io_hex4_expected[28] = 1'bX;
end 
// expected io_hex4[ 27 ]
initial
begin
	io_hex4_expected[27] = 1'bX;
end 
// expected io_hex4[ 26 ]
initial
begin
	io_hex4_expected[26] = 1'bX;
end 
// expected io_hex4[ 25 ]
initial
begin
	io_hex4_expected[25] = 1'bX;
end 
// expected io_hex4[ 24 ]
initial
begin
	io_hex4_expected[24] = 1'bX;
end 
// expected io_hex4[ 23 ]
initial
begin
	io_hex4_expected[23] = 1'bX;
end 
// expected io_hex4[ 22 ]
initial
begin
	io_hex4_expected[22] = 1'bX;
end 
// expected io_hex4[ 21 ]
initial
begin
	io_hex4_expected[21] = 1'bX;
end 
// expected io_hex4[ 20 ]
initial
begin
	io_hex4_expected[20] = 1'bX;
end 
// expected io_hex4[ 19 ]
initial
begin
	io_hex4_expected[19] = 1'bX;
end 
// expected io_hex4[ 18 ]
initial
begin
	io_hex4_expected[18] = 1'bX;
end 
// expected io_hex4[ 17 ]
initial
begin
	io_hex4_expected[17] = 1'bX;
end 
// expected io_hex4[ 16 ]
initial
begin
	io_hex4_expected[16] = 1'bX;
end 
// expected io_hex4[ 15 ]
initial
begin
	io_hex4_expected[15] = 1'bX;
end 
// expected io_hex4[ 14 ]
initial
begin
	io_hex4_expected[14] = 1'bX;
end 
// expected io_hex4[ 13 ]
initial
begin
	io_hex4_expected[13] = 1'bX;
end 
// expected io_hex4[ 12 ]
initial
begin
	io_hex4_expected[12] = 1'bX;
end 
// expected io_hex4[ 11 ]
initial
begin
	io_hex4_expected[11] = 1'bX;
end 
// expected io_hex4[ 10 ]
initial
begin
	io_hex4_expected[10] = 1'bX;
end 
// expected io_hex4[ 9 ]
initial
begin
	io_hex4_expected[9] = 1'bX;
end 
// expected io_hex4[ 8 ]
initial
begin
	io_hex4_expected[8] = 1'bX;
end 
// expected io_hex4[ 7 ]
initial
begin
	io_hex4_expected[7] = 1'bX;
end 
// expected io_hex4[ 6 ]
initial
begin
	io_hex4_expected[6] = 1'bX;
end 
// expected io_hex4[ 5 ]
initial
begin
	io_hex4_expected[5] = 1'bX;
end 
// expected io_hex4[ 4 ]
initial
begin
	io_hex4_expected[4] = 1'bX;
end 
// expected io_hex4[ 3 ]
initial
begin
	io_hex4_expected[3] = 1'bX;
end 
// expected io_hex4[ 2 ]
initial
begin
	io_hex4_expected[2] = 1'bX;
end 
// expected io_hex4[ 1 ]
initial
begin
	io_hex4_expected[1] = 1'bX;
end 
// expected io_hex4[ 0 ]
initial
begin
	io_hex4_expected[0] = 1'bX;
end 
// expected io_hex5[ 31 ]
initial
begin
	io_hex5_expected[31] = 1'bX;
end 
// expected io_hex5[ 30 ]
initial
begin
	io_hex5_expected[30] = 1'bX;
end 
// expected io_hex5[ 29 ]
initial
begin
	io_hex5_expected[29] = 1'bX;
end 
// expected io_hex5[ 28 ]
initial
begin
	io_hex5_expected[28] = 1'bX;
end 
// expected io_hex5[ 27 ]
initial
begin
	io_hex5_expected[27] = 1'bX;
end 
// expected io_hex5[ 26 ]
initial
begin
	io_hex5_expected[26] = 1'bX;
end 
// expected io_hex5[ 25 ]
initial
begin
	io_hex5_expected[25] = 1'bX;
end 
// expected io_hex5[ 24 ]
initial
begin
	io_hex5_expected[24] = 1'bX;
end 
// expected io_hex5[ 23 ]
initial
begin
	io_hex5_expected[23] = 1'bX;
end 
// expected io_hex5[ 22 ]
initial
begin
	io_hex5_expected[22] = 1'bX;
end 
// expected io_hex5[ 21 ]
initial
begin
	io_hex5_expected[21] = 1'bX;
end 
// expected io_hex5[ 20 ]
initial
begin
	io_hex5_expected[20] = 1'bX;
end 
// expected io_hex5[ 19 ]
initial
begin
	io_hex5_expected[19] = 1'bX;
end 
// expected io_hex5[ 18 ]
initial
begin
	io_hex5_expected[18] = 1'bX;
end 
// expected io_hex5[ 17 ]
initial
begin
	io_hex5_expected[17] = 1'bX;
end 
// expected io_hex5[ 16 ]
initial
begin
	io_hex5_expected[16] = 1'bX;
end 
// expected io_hex5[ 15 ]
initial
begin
	io_hex5_expected[15] = 1'bX;
end 
// expected io_hex5[ 14 ]
initial
begin
	io_hex5_expected[14] = 1'bX;
end 
// expected io_hex5[ 13 ]
initial
begin
	io_hex5_expected[13] = 1'bX;
end 
// expected io_hex5[ 12 ]
initial
begin
	io_hex5_expected[12] = 1'bX;
end 
// expected io_hex5[ 11 ]
initial
begin
	io_hex5_expected[11] = 1'bX;
end 
// expected io_hex5[ 10 ]
initial
begin
	io_hex5_expected[10] = 1'bX;
end 
// expected io_hex5[ 9 ]
initial
begin
	io_hex5_expected[9] = 1'bX;
end 
// expected io_hex5[ 8 ]
initial
begin
	io_hex5_expected[8] = 1'bX;
end 
// expected io_hex5[ 7 ]
initial
begin
	io_hex5_expected[7] = 1'bX;
end 
// expected io_hex5[ 6 ]
initial
begin
	io_hex5_expected[6] = 1'bX;
end 
// expected io_hex5[ 5 ]
initial
begin
	io_hex5_expected[5] = 1'bX;
end 
// expected io_hex5[ 4 ]
initial
begin
	io_hex5_expected[4] = 1'bX;
end 
// expected io_hex5[ 3 ]
initial
begin
	io_hex5_expected[3] = 1'bX;
end 
// expected io_hex5[ 2 ]
initial
begin
	io_hex5_expected[2] = 1'bX;
end 
// expected io_hex5[ 1 ]
initial
begin
	io_hex5_expected[1] = 1'bX;
end 
// expected io_hex5[ 0 ]
initial
begin
	io_hex5_expected[0] = 1'bX;
end 
// expected io_hex6[ 31 ]
initial
begin
	io_hex6_expected[31] = 1'bX;
end 
// expected io_hex6[ 30 ]
initial
begin
	io_hex6_expected[30] = 1'bX;
end 
// expected io_hex6[ 29 ]
initial
begin
	io_hex6_expected[29] = 1'bX;
end 
// expected io_hex6[ 28 ]
initial
begin
	io_hex6_expected[28] = 1'bX;
end 
// expected io_hex6[ 27 ]
initial
begin
	io_hex6_expected[27] = 1'bX;
end 
// expected io_hex6[ 26 ]
initial
begin
	io_hex6_expected[26] = 1'bX;
end 
// expected io_hex6[ 25 ]
initial
begin
	io_hex6_expected[25] = 1'bX;
end 
// expected io_hex6[ 24 ]
initial
begin
	io_hex6_expected[24] = 1'bX;
end 
// expected io_hex6[ 23 ]
initial
begin
	io_hex6_expected[23] = 1'bX;
end 
// expected io_hex6[ 22 ]
initial
begin
	io_hex6_expected[22] = 1'bX;
end 
// expected io_hex6[ 21 ]
initial
begin
	io_hex6_expected[21] = 1'bX;
end 
// expected io_hex6[ 20 ]
initial
begin
	io_hex6_expected[20] = 1'bX;
end 
// expected io_hex6[ 19 ]
initial
begin
	io_hex6_expected[19] = 1'bX;
end 
// expected io_hex6[ 18 ]
initial
begin
	io_hex6_expected[18] = 1'bX;
end 
// expected io_hex6[ 17 ]
initial
begin
	io_hex6_expected[17] = 1'bX;
end 
// expected io_hex6[ 16 ]
initial
begin
	io_hex6_expected[16] = 1'bX;
end 
// expected io_hex6[ 15 ]
initial
begin
	io_hex6_expected[15] = 1'bX;
end 
// expected io_hex6[ 14 ]
initial
begin
	io_hex6_expected[14] = 1'bX;
end 
// expected io_hex6[ 13 ]
initial
begin
	io_hex6_expected[13] = 1'bX;
end 
// expected io_hex6[ 12 ]
initial
begin
	io_hex6_expected[12] = 1'bX;
end 
// expected io_hex6[ 11 ]
initial
begin
	io_hex6_expected[11] = 1'bX;
end 
// expected io_hex6[ 10 ]
initial
begin
	io_hex6_expected[10] = 1'bX;
end 
// expected io_hex6[ 9 ]
initial
begin
	io_hex6_expected[9] = 1'bX;
end 
// expected io_hex6[ 8 ]
initial
begin
	io_hex6_expected[8] = 1'bX;
end 
// expected io_hex6[ 7 ]
initial
begin
	io_hex6_expected[7] = 1'bX;
end 
// expected io_hex6[ 6 ]
initial
begin
	io_hex6_expected[6] = 1'bX;
end 
// expected io_hex6[ 5 ]
initial
begin
	io_hex6_expected[5] = 1'bX;
end 
// expected io_hex6[ 4 ]
initial
begin
	io_hex6_expected[4] = 1'bX;
end 
// expected io_hex6[ 3 ]
initial
begin
	io_hex6_expected[3] = 1'bX;
end 
// expected io_hex6[ 2 ]
initial
begin
	io_hex6_expected[2] = 1'bX;
end 
// expected io_hex6[ 1 ]
initial
begin
	io_hex6_expected[1] = 1'bX;
end 
// expected io_hex6[ 0 ]
initial
begin
	io_hex6_expected[0] = 1'bX;
end 
// expected io_hex7[ 31 ]
initial
begin
	io_hex7_expected[31] = 1'bX;
end 
// expected io_hex7[ 30 ]
initial
begin
	io_hex7_expected[30] = 1'bX;
end 
// expected io_hex7[ 29 ]
initial
begin
	io_hex7_expected[29] = 1'bX;
end 
// expected io_hex7[ 28 ]
initial
begin
	io_hex7_expected[28] = 1'bX;
end 
// expected io_hex7[ 27 ]
initial
begin
	io_hex7_expected[27] = 1'bX;
end 
// expected io_hex7[ 26 ]
initial
begin
	io_hex7_expected[26] = 1'bX;
end 
// expected io_hex7[ 25 ]
initial
begin
	io_hex7_expected[25] = 1'bX;
end 
// expected io_hex7[ 24 ]
initial
begin
	io_hex7_expected[24] = 1'bX;
end 
// expected io_hex7[ 23 ]
initial
begin
	io_hex7_expected[23] = 1'bX;
end 
// expected io_hex7[ 22 ]
initial
begin
	io_hex7_expected[22] = 1'bX;
end 
// expected io_hex7[ 21 ]
initial
begin
	io_hex7_expected[21] = 1'bX;
end 
// expected io_hex7[ 20 ]
initial
begin
	io_hex7_expected[20] = 1'bX;
end 
// expected io_hex7[ 19 ]
initial
begin
	io_hex7_expected[19] = 1'bX;
end 
// expected io_hex7[ 18 ]
initial
begin
	io_hex7_expected[18] = 1'bX;
end 
// expected io_hex7[ 17 ]
initial
begin
	io_hex7_expected[17] = 1'bX;
end 
// expected io_hex7[ 16 ]
initial
begin
	io_hex7_expected[16] = 1'bX;
end 
// expected io_hex7[ 15 ]
initial
begin
	io_hex7_expected[15] = 1'bX;
end 
// expected io_hex7[ 14 ]
initial
begin
	io_hex7_expected[14] = 1'bX;
end 
// expected io_hex7[ 13 ]
initial
begin
	io_hex7_expected[13] = 1'bX;
end 
// expected io_hex7[ 12 ]
initial
begin
	io_hex7_expected[12] = 1'bX;
end 
// expected io_hex7[ 11 ]
initial
begin
	io_hex7_expected[11] = 1'bX;
end 
// expected io_hex7[ 10 ]
initial
begin
	io_hex7_expected[10] = 1'bX;
end 
// expected io_hex7[ 9 ]
initial
begin
	io_hex7_expected[9] = 1'bX;
end 
// expected io_hex7[ 8 ]
initial
begin
	io_hex7_expected[8] = 1'bX;
end 
// expected io_hex7[ 7 ]
initial
begin
	io_hex7_expected[7] = 1'bX;
end 
// expected io_hex7[ 6 ]
initial
begin
	io_hex7_expected[6] = 1'bX;
end 
// expected io_hex7[ 5 ]
initial
begin
	io_hex7_expected[5] = 1'bX;
end 
// expected io_hex7[ 4 ]
initial
begin
	io_hex7_expected[4] = 1'bX;
end 
// expected io_hex7[ 3 ]
initial
begin
	io_hex7_expected[3] = 1'bX;
end 
// expected io_hex7[ 2 ]
initial
begin
	io_hex7_expected[2] = 1'bX;
end 
// expected io_hex7[ 1 ]
initial
begin
	io_hex7_expected[1] = 1'bX;
end 
// expected io_hex7[ 0 ]
initial
begin
	io_hex7_expected[0] = 1'bX;
end 
// expected io_lcd[ 31 ]
initial
begin
	io_lcd_expected[31] = 1'bX;
end 
// expected io_lcd[ 30 ]
initial
begin
	io_lcd_expected[30] = 1'bX;
end 
// expected io_lcd[ 29 ]
initial
begin
	io_lcd_expected[29] = 1'bX;
end 
// expected io_lcd[ 28 ]
initial
begin
	io_lcd_expected[28] = 1'bX;
end 
// expected io_lcd[ 27 ]
initial
begin
	io_lcd_expected[27] = 1'bX;
end 
// expected io_lcd[ 26 ]
initial
begin
	io_lcd_expected[26] = 1'bX;
end 
// expected io_lcd[ 25 ]
initial
begin
	io_lcd_expected[25] = 1'bX;
end 
// expected io_lcd[ 24 ]
initial
begin
	io_lcd_expected[24] = 1'bX;
end 
// expected io_lcd[ 23 ]
initial
begin
	io_lcd_expected[23] = 1'bX;
end 
// expected io_lcd[ 22 ]
initial
begin
	io_lcd_expected[22] = 1'bX;
end 
// expected io_lcd[ 21 ]
initial
begin
	io_lcd_expected[21] = 1'bX;
end 
// expected io_lcd[ 20 ]
initial
begin
	io_lcd_expected[20] = 1'bX;
end 
// expected io_lcd[ 19 ]
initial
begin
	io_lcd_expected[19] = 1'bX;
end 
// expected io_lcd[ 18 ]
initial
begin
	io_lcd_expected[18] = 1'bX;
end 
// expected io_lcd[ 17 ]
initial
begin
	io_lcd_expected[17] = 1'bX;
end 
// expected io_lcd[ 16 ]
initial
begin
	io_lcd_expected[16] = 1'bX;
end 
// expected io_lcd[ 15 ]
initial
begin
	io_lcd_expected[15] = 1'bX;
end 
// expected io_lcd[ 14 ]
initial
begin
	io_lcd_expected[14] = 1'bX;
end 
// expected io_lcd[ 13 ]
initial
begin
	io_lcd_expected[13] = 1'bX;
end 
// expected io_lcd[ 12 ]
initial
begin
	io_lcd_expected[12] = 1'bX;
end 
// expected io_lcd[ 11 ]
initial
begin
	io_lcd_expected[11] = 1'bX;
end 
// expected io_lcd[ 10 ]
initial
begin
	io_lcd_expected[10] = 1'bX;
end 
// expected io_lcd[ 9 ]
initial
begin
	io_lcd_expected[9] = 1'bX;
end 
// expected io_lcd[ 8 ]
initial
begin
	io_lcd_expected[8] = 1'bX;
end 
// expected io_lcd[ 7 ]
initial
begin
	io_lcd_expected[7] = 1'bX;
end 
// expected io_lcd[ 6 ]
initial
begin
	io_lcd_expected[6] = 1'bX;
end 
// expected io_lcd[ 5 ]
initial
begin
	io_lcd_expected[5] = 1'bX;
end 
// expected io_lcd[ 4 ]
initial
begin
	io_lcd_expected[4] = 1'bX;
end 
// expected io_lcd[ 3 ]
initial
begin
	io_lcd_expected[3] = 1'bX;
end 
// expected io_lcd[ 2 ]
initial
begin
	io_lcd_expected[2] = 1'bX;
end 
// expected io_lcd[ 1 ]
initial
begin
	io_lcd_expected[1] = 1'bX;
end 
// expected io_lcd[ 0 ]
initial
begin
	io_lcd_expected[0] = 1'bX;
end 
// expected io_ledg[ 31 ]
initial
begin
	io_ledg_expected[31] = 1'bX;
end 
// expected io_ledg[ 30 ]
initial
begin
	io_ledg_expected[30] = 1'bX;
end 
// expected io_ledg[ 29 ]
initial
begin
	io_ledg_expected[29] = 1'bX;
end 
// expected io_ledg[ 28 ]
initial
begin
	io_ledg_expected[28] = 1'bX;
end 
// expected io_ledg[ 27 ]
initial
begin
	io_ledg_expected[27] = 1'bX;
end 
// expected io_ledg[ 26 ]
initial
begin
	io_ledg_expected[26] = 1'bX;
end 
// expected io_ledg[ 25 ]
initial
begin
	io_ledg_expected[25] = 1'bX;
end 
// expected io_ledg[ 24 ]
initial
begin
	io_ledg_expected[24] = 1'bX;
end 
// expected io_ledg[ 23 ]
initial
begin
	io_ledg_expected[23] = 1'bX;
end 
// expected io_ledg[ 22 ]
initial
begin
	io_ledg_expected[22] = 1'bX;
end 
// expected io_ledg[ 21 ]
initial
begin
	io_ledg_expected[21] = 1'bX;
end 
// expected io_ledg[ 20 ]
initial
begin
	io_ledg_expected[20] = 1'bX;
end 
// expected io_ledg[ 19 ]
initial
begin
	io_ledg_expected[19] = 1'bX;
end 
// expected io_ledg[ 18 ]
initial
begin
	io_ledg_expected[18] = 1'bX;
end 
// expected io_ledg[ 17 ]
initial
begin
	io_ledg_expected[17] = 1'bX;
end 
// expected io_ledg[ 16 ]
initial
begin
	io_ledg_expected[16] = 1'bX;
end 
// expected io_ledg[ 15 ]
initial
begin
	io_ledg_expected[15] = 1'bX;
end 
// expected io_ledg[ 14 ]
initial
begin
	io_ledg_expected[14] = 1'bX;
end 
// expected io_ledg[ 13 ]
initial
begin
	io_ledg_expected[13] = 1'bX;
end 
// expected io_ledg[ 12 ]
initial
begin
	io_ledg_expected[12] = 1'bX;
end 
// expected io_ledg[ 11 ]
initial
begin
	io_ledg_expected[11] = 1'bX;
end 
// expected io_ledg[ 10 ]
initial
begin
	io_ledg_expected[10] = 1'bX;
end 
// expected io_ledg[ 9 ]
initial
begin
	io_ledg_expected[9] = 1'bX;
end 
// expected io_ledg[ 8 ]
initial
begin
	io_ledg_expected[8] = 1'bX;
end 
// expected io_ledg[ 7 ]
initial
begin
	io_ledg_expected[7] = 1'bX;
end 
// expected io_ledg[ 6 ]
initial
begin
	io_ledg_expected[6] = 1'bX;
end 
// expected io_ledg[ 5 ]
initial
begin
	io_ledg_expected[5] = 1'bX;
end 
// expected io_ledg[ 4 ]
initial
begin
	io_ledg_expected[4] = 1'bX;
end 
// expected io_ledg[ 3 ]
initial
begin
	io_ledg_expected[3] = 1'bX;
end 
// expected io_ledg[ 2 ]
initial
begin
	io_ledg_expected[2] = 1'bX;
end 
// expected io_ledg[ 1 ]
initial
begin
	io_ledg_expected[1] = 1'bX;
end 
// expected io_ledg[ 0 ]
initial
begin
	io_ledg_expected[0] = 1'bX;
end 
// expected io_ledr[ 31 ]
initial
begin
	io_ledr_expected[31] = 1'bX;
end 
// expected io_ledr[ 30 ]
initial
begin
	io_ledr_expected[30] = 1'bX;
end 
// expected io_ledr[ 29 ]
initial
begin
	io_ledr_expected[29] = 1'bX;
end 
// expected io_ledr[ 28 ]
initial
begin
	io_ledr_expected[28] = 1'bX;
end 
// expected io_ledr[ 27 ]
initial
begin
	io_ledr_expected[27] = 1'bX;
end 
// expected io_ledr[ 26 ]
initial
begin
	io_ledr_expected[26] = 1'bX;
end 
// expected io_ledr[ 25 ]
initial
begin
	io_ledr_expected[25] = 1'bX;
end 
// expected io_ledr[ 24 ]
initial
begin
	io_ledr_expected[24] = 1'bX;
end 
// expected io_ledr[ 23 ]
initial
begin
	io_ledr_expected[23] = 1'bX;
end 
// expected io_ledr[ 22 ]
initial
begin
	io_ledr_expected[22] = 1'bX;
end 
// expected io_ledr[ 21 ]
initial
begin
	io_ledr_expected[21] = 1'bX;
end 
// expected io_ledr[ 20 ]
initial
begin
	io_ledr_expected[20] = 1'bX;
end 
// expected io_ledr[ 19 ]
initial
begin
	io_ledr_expected[19] = 1'bX;
end 
// expected io_ledr[ 18 ]
initial
begin
	io_ledr_expected[18] = 1'bX;
end 
// expected io_ledr[ 17 ]
initial
begin
	io_ledr_expected[17] = 1'bX;
end 
// expected io_ledr[ 16 ]
initial
begin
	io_ledr_expected[16] = 1'bX;
end 
// expected io_ledr[ 15 ]
initial
begin
	io_ledr_expected[15] = 1'bX;
end 
// expected io_ledr[ 14 ]
initial
begin
	io_ledr_expected[14] = 1'bX;
end 
// expected io_ledr[ 13 ]
initial
begin
	io_ledr_expected[13] = 1'bX;
end 
// expected io_ledr[ 12 ]
initial
begin
	io_ledr_expected[12] = 1'bX;
end 
// expected io_ledr[ 11 ]
initial
begin
	io_ledr_expected[11] = 1'bX;
end 
// expected io_ledr[ 10 ]
initial
begin
	io_ledr_expected[10] = 1'bX;
end 
// expected io_ledr[ 9 ]
initial
begin
	io_ledr_expected[9] = 1'bX;
end 
// expected io_ledr[ 8 ]
initial
begin
	io_ledr_expected[8] = 1'bX;
end 
// expected io_ledr[ 7 ]
initial
begin
	io_ledr_expected[7] = 1'bX;
end 
// expected io_ledr[ 6 ]
initial
begin
	io_ledr_expected[6] = 1'bX;
end 
// expected io_ledr[ 5 ]
initial
begin
	io_ledr_expected[5] = 1'bX;
end 
// expected io_ledr[ 4 ]
initial
begin
	io_ledr_expected[4] = 1'bX;
end 
// expected io_ledr[ 3 ]
initial
begin
	io_ledr_expected[3] = 1'bX;
end 
// expected io_ledr[ 2 ]
initial
begin
	io_ledr_expected[2] = 1'bX;
end 
// expected io_ledr[ 1 ]
initial
begin
	io_ledr_expected[1] = 1'bX;
end 
// expected io_ledr[ 0 ]
initial
begin
	io_ledr_expected[0] = 1'bX;
end 
// expected ld_data[ 31 ]
initial
begin
	ld_data_expected[31] = 1'bX;
end 
// expected ld_data[ 30 ]
initial
begin
	ld_data_expected[30] = 1'bX;
end 
// expected ld_data[ 29 ]
initial
begin
	ld_data_expected[29] = 1'bX;
end 
// expected ld_data[ 28 ]
initial
begin
	ld_data_expected[28] = 1'bX;
end 
// expected ld_data[ 27 ]
initial
begin
	ld_data_expected[27] = 1'bX;
end 
// expected ld_data[ 26 ]
initial
begin
	ld_data_expected[26] = 1'bX;
end 
// expected ld_data[ 25 ]
initial
begin
	ld_data_expected[25] = 1'bX;
end 
// expected ld_data[ 24 ]
initial
begin
	ld_data_expected[24] = 1'bX;
end 
// expected ld_data[ 23 ]
initial
begin
	ld_data_expected[23] = 1'bX;
end 
// expected ld_data[ 22 ]
initial
begin
	ld_data_expected[22] = 1'bX;
end 
// expected ld_data[ 21 ]
initial
begin
	ld_data_expected[21] = 1'bX;
end 
// expected ld_data[ 20 ]
initial
begin
	ld_data_expected[20] = 1'bX;
end 
// expected ld_data[ 19 ]
initial
begin
	ld_data_expected[19] = 1'bX;
end 
// expected ld_data[ 18 ]
initial
begin
	ld_data_expected[18] = 1'bX;
end 
// expected ld_data[ 17 ]
initial
begin
	ld_data_expected[17] = 1'bX;
end 
// expected ld_data[ 16 ]
initial
begin
	ld_data_expected[16] = 1'bX;
end 
// expected ld_data[ 15 ]
initial
begin
	ld_data_expected[15] = 1'bX;
end 
// expected ld_data[ 14 ]
initial
begin
	ld_data_expected[14] = 1'bX;
end 
// expected ld_data[ 13 ]
initial
begin
	ld_data_expected[13] = 1'bX;
end 
// expected ld_data[ 12 ]
initial
begin
	ld_data_expected[12] = 1'bX;
end 
// expected ld_data[ 11 ]
initial
begin
	ld_data_expected[11] = 1'bX;
end 
// expected ld_data[ 10 ]
initial
begin
	ld_data_expected[10] = 1'bX;
end 
// expected ld_data[ 9 ]
initial
begin
	ld_data_expected[9] = 1'bX;
end 
// expected ld_data[ 8 ]
initial
begin
	ld_data_expected[8] = 1'bX;
end 
// expected ld_data[ 7 ]
initial
begin
	ld_data_expected[7] = 1'bX;
end 
// expected ld_data[ 6 ]
initial
begin
	ld_data_expected[6] = 1'bX;
end 
// expected ld_data[ 5 ]
initial
begin
	ld_data_expected[5] = 1'bX;
end 
// expected ld_data[ 4 ]
initial
begin
	ld_data_expected[4] = 1'bX;
end 
// expected ld_data[ 3 ]
initial
begin
	ld_data_expected[3] = 1'bX;
end 
// expected ld_data[ 2 ]
initial
begin
	ld_data_expected[2] = 1'bX;
end 
// expected ld_data[ 1 ]
initial
begin
	ld_data_expected[1] = 1'bX;
end 
// expected ld_data[ 0 ]
initial
begin
	ld_data_expected[0] = 1'bX;
end 
// generate trigger
always @(io_hex0_expected or io_hex0 or io_hex1_expected or io_hex1 or io_hex2_expected or io_hex2 or io_hex3_expected or io_hex3 or io_hex4_expected or io_hex4 or io_hex5_expected or io_hex5 or io_hex6_expected or io_hex6 or io_hex7_expected or io_hex7 or io_lcd_expected or io_lcd or io_ledg_expected or io_ledg or io_ledr_expected or io_ledr or ld_data_expected or ld_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected io_hex0 = %b | expected io_hex1 = %b | expected io_hex2 = %b | expected io_hex3 = %b | expected io_hex4 = %b | expected io_hex5 = %b | expected io_hex6 = %b | expected io_hex7 = %b | expected io_lcd = %b | expected io_ledg = %b | expected io_ledr = %b | expected ld_data = %b | ",io_hex0_expected_prev,io_hex1_expected_prev,io_hex2_expected_prev,io_hex3_expected_prev,io_hex4_expected_prev,io_hex5_expected_prev,io_hex6_expected_prev,io_hex7_expected_prev,io_lcd_expected_prev,io_ledg_expected_prev,io_ledr_expected_prev,ld_data_expected_prev);
	$display("| real io_hex0 = %b | real io_hex1 = %b | real io_hex2 = %b | real io_hex3 = %b | real io_hex4 = %b | real io_hex5 = %b | real io_hex6 = %b | real io_hex7 = %b | real io_lcd = %b | real io_ledg = %b | real io_ledr = %b | real ld_data = %b | ",io_hex0_prev,io_hex1_prev,io_hex2_prev,io_hex3_prev,io_hex4_prev,io_hex5_prev,io_hex6_prev,io_hex7_prev,io_lcd_prev,io_ledg_prev,io_ledr_prev,ld_data_prev);
`endif
	if (
		( io_hex0_expected_prev[0] !== 1'bx ) && ( io_hex0_prev[0] !== io_hex0_expected_prev[0] )
		&& ((io_hex0_expected_prev[0] !== last_io_hex0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[0] = io_hex0_expected_prev[0];
	end
	if (
		( io_hex0_expected_prev[1] !== 1'bx ) && ( io_hex0_prev[1] !== io_hex0_expected_prev[1] )
		&& ((io_hex0_expected_prev[1] !== last_io_hex0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[1] = io_hex0_expected_prev[1];
	end
	if (
		( io_hex0_expected_prev[2] !== 1'bx ) && ( io_hex0_prev[2] !== io_hex0_expected_prev[2] )
		&& ((io_hex0_expected_prev[2] !== last_io_hex0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[2] = io_hex0_expected_prev[2];
	end
	if (
		( io_hex0_expected_prev[3] !== 1'bx ) && ( io_hex0_prev[3] !== io_hex0_expected_prev[3] )
		&& ((io_hex0_expected_prev[3] !== last_io_hex0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[3] = io_hex0_expected_prev[3];
	end
	if (
		( io_hex0_expected_prev[4] !== 1'bx ) && ( io_hex0_prev[4] !== io_hex0_expected_prev[4] )
		&& ((io_hex0_expected_prev[4] !== last_io_hex0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[4] = io_hex0_expected_prev[4];
	end
	if (
		( io_hex0_expected_prev[5] !== 1'bx ) && ( io_hex0_prev[5] !== io_hex0_expected_prev[5] )
		&& ((io_hex0_expected_prev[5] !== last_io_hex0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[5] = io_hex0_expected_prev[5];
	end
	if (
		( io_hex0_expected_prev[6] !== 1'bx ) && ( io_hex0_prev[6] !== io_hex0_expected_prev[6] )
		&& ((io_hex0_expected_prev[6] !== last_io_hex0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[6] = io_hex0_expected_prev[6];
	end
	if (
		( io_hex0_expected_prev[7] !== 1'bx ) && ( io_hex0_prev[7] !== io_hex0_expected_prev[7] )
		&& ((io_hex0_expected_prev[7] !== last_io_hex0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[7] = io_hex0_expected_prev[7];
	end
	if (
		( io_hex0_expected_prev[8] !== 1'bx ) && ( io_hex0_prev[8] !== io_hex0_expected_prev[8] )
		&& ((io_hex0_expected_prev[8] !== last_io_hex0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[8] = io_hex0_expected_prev[8];
	end
	if (
		( io_hex0_expected_prev[9] !== 1'bx ) && ( io_hex0_prev[9] !== io_hex0_expected_prev[9] )
		&& ((io_hex0_expected_prev[9] !== last_io_hex0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[9] = io_hex0_expected_prev[9];
	end
	if (
		( io_hex0_expected_prev[10] !== 1'bx ) && ( io_hex0_prev[10] !== io_hex0_expected_prev[10] )
		&& ((io_hex0_expected_prev[10] !== last_io_hex0_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[10] = io_hex0_expected_prev[10];
	end
	if (
		( io_hex0_expected_prev[11] !== 1'bx ) && ( io_hex0_prev[11] !== io_hex0_expected_prev[11] )
		&& ((io_hex0_expected_prev[11] !== last_io_hex0_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[11] = io_hex0_expected_prev[11];
	end
	if (
		( io_hex0_expected_prev[12] !== 1'bx ) && ( io_hex0_prev[12] !== io_hex0_expected_prev[12] )
		&& ((io_hex0_expected_prev[12] !== last_io_hex0_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[12] = io_hex0_expected_prev[12];
	end
	if (
		( io_hex0_expected_prev[13] !== 1'bx ) && ( io_hex0_prev[13] !== io_hex0_expected_prev[13] )
		&& ((io_hex0_expected_prev[13] !== last_io_hex0_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[13] = io_hex0_expected_prev[13];
	end
	if (
		( io_hex0_expected_prev[14] !== 1'bx ) && ( io_hex0_prev[14] !== io_hex0_expected_prev[14] )
		&& ((io_hex0_expected_prev[14] !== last_io_hex0_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[14] = io_hex0_expected_prev[14];
	end
	if (
		( io_hex0_expected_prev[15] !== 1'bx ) && ( io_hex0_prev[15] !== io_hex0_expected_prev[15] )
		&& ((io_hex0_expected_prev[15] !== last_io_hex0_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[15] = io_hex0_expected_prev[15];
	end
	if (
		( io_hex0_expected_prev[16] !== 1'bx ) && ( io_hex0_prev[16] !== io_hex0_expected_prev[16] )
		&& ((io_hex0_expected_prev[16] !== last_io_hex0_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[16] = io_hex0_expected_prev[16];
	end
	if (
		( io_hex0_expected_prev[17] !== 1'bx ) && ( io_hex0_prev[17] !== io_hex0_expected_prev[17] )
		&& ((io_hex0_expected_prev[17] !== last_io_hex0_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[17] = io_hex0_expected_prev[17];
	end
	if (
		( io_hex0_expected_prev[18] !== 1'bx ) && ( io_hex0_prev[18] !== io_hex0_expected_prev[18] )
		&& ((io_hex0_expected_prev[18] !== last_io_hex0_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[18] = io_hex0_expected_prev[18];
	end
	if (
		( io_hex0_expected_prev[19] !== 1'bx ) && ( io_hex0_prev[19] !== io_hex0_expected_prev[19] )
		&& ((io_hex0_expected_prev[19] !== last_io_hex0_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[19] = io_hex0_expected_prev[19];
	end
	if (
		( io_hex0_expected_prev[20] !== 1'bx ) && ( io_hex0_prev[20] !== io_hex0_expected_prev[20] )
		&& ((io_hex0_expected_prev[20] !== last_io_hex0_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[20] = io_hex0_expected_prev[20];
	end
	if (
		( io_hex0_expected_prev[21] !== 1'bx ) && ( io_hex0_prev[21] !== io_hex0_expected_prev[21] )
		&& ((io_hex0_expected_prev[21] !== last_io_hex0_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[21] = io_hex0_expected_prev[21];
	end
	if (
		( io_hex0_expected_prev[22] !== 1'bx ) && ( io_hex0_prev[22] !== io_hex0_expected_prev[22] )
		&& ((io_hex0_expected_prev[22] !== last_io_hex0_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[22] = io_hex0_expected_prev[22];
	end
	if (
		( io_hex0_expected_prev[23] !== 1'bx ) && ( io_hex0_prev[23] !== io_hex0_expected_prev[23] )
		&& ((io_hex0_expected_prev[23] !== last_io_hex0_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[23] = io_hex0_expected_prev[23];
	end
	if (
		( io_hex0_expected_prev[24] !== 1'bx ) && ( io_hex0_prev[24] !== io_hex0_expected_prev[24] )
		&& ((io_hex0_expected_prev[24] !== last_io_hex0_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[24] = io_hex0_expected_prev[24];
	end
	if (
		( io_hex0_expected_prev[25] !== 1'bx ) && ( io_hex0_prev[25] !== io_hex0_expected_prev[25] )
		&& ((io_hex0_expected_prev[25] !== last_io_hex0_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[25] = io_hex0_expected_prev[25];
	end
	if (
		( io_hex0_expected_prev[26] !== 1'bx ) && ( io_hex0_prev[26] !== io_hex0_expected_prev[26] )
		&& ((io_hex0_expected_prev[26] !== last_io_hex0_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[26] = io_hex0_expected_prev[26];
	end
	if (
		( io_hex0_expected_prev[27] !== 1'bx ) && ( io_hex0_prev[27] !== io_hex0_expected_prev[27] )
		&& ((io_hex0_expected_prev[27] !== last_io_hex0_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[27] = io_hex0_expected_prev[27];
	end
	if (
		( io_hex0_expected_prev[28] !== 1'bx ) && ( io_hex0_prev[28] !== io_hex0_expected_prev[28] )
		&& ((io_hex0_expected_prev[28] !== last_io_hex0_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[28] = io_hex0_expected_prev[28];
	end
	if (
		( io_hex0_expected_prev[29] !== 1'bx ) && ( io_hex0_prev[29] !== io_hex0_expected_prev[29] )
		&& ((io_hex0_expected_prev[29] !== last_io_hex0_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[29] = io_hex0_expected_prev[29];
	end
	if (
		( io_hex0_expected_prev[30] !== 1'bx ) && ( io_hex0_prev[30] !== io_hex0_expected_prev[30] )
		&& ((io_hex0_expected_prev[30] !== last_io_hex0_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[30] = io_hex0_expected_prev[30];
	end
	if (
		( io_hex0_expected_prev[31] !== 1'bx ) && ( io_hex0_prev[31] !== io_hex0_expected_prev[31] )
		&& ((io_hex0_expected_prev[31] !== last_io_hex0_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex0_expected_prev);
		$display ("     Real value = %b", io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_io_hex0_exp[31] = io_hex0_expected_prev[31];
	end
	if (
		( io_hex1_expected_prev[0] !== 1'bx ) && ( io_hex1_prev[0] !== io_hex1_expected_prev[0] )
		&& ((io_hex1_expected_prev[0] !== last_io_hex1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[0] = io_hex1_expected_prev[0];
	end
	if (
		( io_hex1_expected_prev[1] !== 1'bx ) && ( io_hex1_prev[1] !== io_hex1_expected_prev[1] )
		&& ((io_hex1_expected_prev[1] !== last_io_hex1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[1] = io_hex1_expected_prev[1];
	end
	if (
		( io_hex1_expected_prev[2] !== 1'bx ) && ( io_hex1_prev[2] !== io_hex1_expected_prev[2] )
		&& ((io_hex1_expected_prev[2] !== last_io_hex1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[2] = io_hex1_expected_prev[2];
	end
	if (
		( io_hex1_expected_prev[3] !== 1'bx ) && ( io_hex1_prev[3] !== io_hex1_expected_prev[3] )
		&& ((io_hex1_expected_prev[3] !== last_io_hex1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[3] = io_hex1_expected_prev[3];
	end
	if (
		( io_hex1_expected_prev[4] !== 1'bx ) && ( io_hex1_prev[4] !== io_hex1_expected_prev[4] )
		&& ((io_hex1_expected_prev[4] !== last_io_hex1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[4] = io_hex1_expected_prev[4];
	end
	if (
		( io_hex1_expected_prev[5] !== 1'bx ) && ( io_hex1_prev[5] !== io_hex1_expected_prev[5] )
		&& ((io_hex1_expected_prev[5] !== last_io_hex1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[5] = io_hex1_expected_prev[5];
	end
	if (
		( io_hex1_expected_prev[6] !== 1'bx ) && ( io_hex1_prev[6] !== io_hex1_expected_prev[6] )
		&& ((io_hex1_expected_prev[6] !== last_io_hex1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[6] = io_hex1_expected_prev[6];
	end
	if (
		( io_hex1_expected_prev[7] !== 1'bx ) && ( io_hex1_prev[7] !== io_hex1_expected_prev[7] )
		&& ((io_hex1_expected_prev[7] !== last_io_hex1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[7] = io_hex1_expected_prev[7];
	end
	if (
		( io_hex1_expected_prev[8] !== 1'bx ) && ( io_hex1_prev[8] !== io_hex1_expected_prev[8] )
		&& ((io_hex1_expected_prev[8] !== last_io_hex1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[8] = io_hex1_expected_prev[8];
	end
	if (
		( io_hex1_expected_prev[9] !== 1'bx ) && ( io_hex1_prev[9] !== io_hex1_expected_prev[9] )
		&& ((io_hex1_expected_prev[9] !== last_io_hex1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[9] = io_hex1_expected_prev[9];
	end
	if (
		( io_hex1_expected_prev[10] !== 1'bx ) && ( io_hex1_prev[10] !== io_hex1_expected_prev[10] )
		&& ((io_hex1_expected_prev[10] !== last_io_hex1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[10] = io_hex1_expected_prev[10];
	end
	if (
		( io_hex1_expected_prev[11] !== 1'bx ) && ( io_hex1_prev[11] !== io_hex1_expected_prev[11] )
		&& ((io_hex1_expected_prev[11] !== last_io_hex1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[11] = io_hex1_expected_prev[11];
	end
	if (
		( io_hex1_expected_prev[12] !== 1'bx ) && ( io_hex1_prev[12] !== io_hex1_expected_prev[12] )
		&& ((io_hex1_expected_prev[12] !== last_io_hex1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[12] = io_hex1_expected_prev[12];
	end
	if (
		( io_hex1_expected_prev[13] !== 1'bx ) && ( io_hex1_prev[13] !== io_hex1_expected_prev[13] )
		&& ((io_hex1_expected_prev[13] !== last_io_hex1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[13] = io_hex1_expected_prev[13];
	end
	if (
		( io_hex1_expected_prev[14] !== 1'bx ) && ( io_hex1_prev[14] !== io_hex1_expected_prev[14] )
		&& ((io_hex1_expected_prev[14] !== last_io_hex1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[14] = io_hex1_expected_prev[14];
	end
	if (
		( io_hex1_expected_prev[15] !== 1'bx ) && ( io_hex1_prev[15] !== io_hex1_expected_prev[15] )
		&& ((io_hex1_expected_prev[15] !== last_io_hex1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[15] = io_hex1_expected_prev[15];
	end
	if (
		( io_hex1_expected_prev[16] !== 1'bx ) && ( io_hex1_prev[16] !== io_hex1_expected_prev[16] )
		&& ((io_hex1_expected_prev[16] !== last_io_hex1_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[16] = io_hex1_expected_prev[16];
	end
	if (
		( io_hex1_expected_prev[17] !== 1'bx ) && ( io_hex1_prev[17] !== io_hex1_expected_prev[17] )
		&& ((io_hex1_expected_prev[17] !== last_io_hex1_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[17] = io_hex1_expected_prev[17];
	end
	if (
		( io_hex1_expected_prev[18] !== 1'bx ) && ( io_hex1_prev[18] !== io_hex1_expected_prev[18] )
		&& ((io_hex1_expected_prev[18] !== last_io_hex1_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[18] = io_hex1_expected_prev[18];
	end
	if (
		( io_hex1_expected_prev[19] !== 1'bx ) && ( io_hex1_prev[19] !== io_hex1_expected_prev[19] )
		&& ((io_hex1_expected_prev[19] !== last_io_hex1_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[19] = io_hex1_expected_prev[19];
	end
	if (
		( io_hex1_expected_prev[20] !== 1'bx ) && ( io_hex1_prev[20] !== io_hex1_expected_prev[20] )
		&& ((io_hex1_expected_prev[20] !== last_io_hex1_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[20] = io_hex1_expected_prev[20];
	end
	if (
		( io_hex1_expected_prev[21] !== 1'bx ) && ( io_hex1_prev[21] !== io_hex1_expected_prev[21] )
		&& ((io_hex1_expected_prev[21] !== last_io_hex1_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[21] = io_hex1_expected_prev[21];
	end
	if (
		( io_hex1_expected_prev[22] !== 1'bx ) && ( io_hex1_prev[22] !== io_hex1_expected_prev[22] )
		&& ((io_hex1_expected_prev[22] !== last_io_hex1_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[22] = io_hex1_expected_prev[22];
	end
	if (
		( io_hex1_expected_prev[23] !== 1'bx ) && ( io_hex1_prev[23] !== io_hex1_expected_prev[23] )
		&& ((io_hex1_expected_prev[23] !== last_io_hex1_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[23] = io_hex1_expected_prev[23];
	end
	if (
		( io_hex1_expected_prev[24] !== 1'bx ) && ( io_hex1_prev[24] !== io_hex1_expected_prev[24] )
		&& ((io_hex1_expected_prev[24] !== last_io_hex1_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[24] = io_hex1_expected_prev[24];
	end
	if (
		( io_hex1_expected_prev[25] !== 1'bx ) && ( io_hex1_prev[25] !== io_hex1_expected_prev[25] )
		&& ((io_hex1_expected_prev[25] !== last_io_hex1_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[25] = io_hex1_expected_prev[25];
	end
	if (
		( io_hex1_expected_prev[26] !== 1'bx ) && ( io_hex1_prev[26] !== io_hex1_expected_prev[26] )
		&& ((io_hex1_expected_prev[26] !== last_io_hex1_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[26] = io_hex1_expected_prev[26];
	end
	if (
		( io_hex1_expected_prev[27] !== 1'bx ) && ( io_hex1_prev[27] !== io_hex1_expected_prev[27] )
		&& ((io_hex1_expected_prev[27] !== last_io_hex1_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[27] = io_hex1_expected_prev[27];
	end
	if (
		( io_hex1_expected_prev[28] !== 1'bx ) && ( io_hex1_prev[28] !== io_hex1_expected_prev[28] )
		&& ((io_hex1_expected_prev[28] !== last_io_hex1_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[28] = io_hex1_expected_prev[28];
	end
	if (
		( io_hex1_expected_prev[29] !== 1'bx ) && ( io_hex1_prev[29] !== io_hex1_expected_prev[29] )
		&& ((io_hex1_expected_prev[29] !== last_io_hex1_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[29] = io_hex1_expected_prev[29];
	end
	if (
		( io_hex1_expected_prev[30] !== 1'bx ) && ( io_hex1_prev[30] !== io_hex1_expected_prev[30] )
		&& ((io_hex1_expected_prev[30] !== last_io_hex1_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[30] = io_hex1_expected_prev[30];
	end
	if (
		( io_hex1_expected_prev[31] !== 1'bx ) && ( io_hex1_prev[31] !== io_hex1_expected_prev[31] )
		&& ((io_hex1_expected_prev[31] !== last_io_hex1_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex1_expected_prev);
		$display ("     Real value = %b", io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_hex1_exp[31] = io_hex1_expected_prev[31];
	end
	if (
		( io_hex2_expected_prev[0] !== 1'bx ) && ( io_hex2_prev[0] !== io_hex2_expected_prev[0] )
		&& ((io_hex2_expected_prev[0] !== last_io_hex2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[0] = io_hex2_expected_prev[0];
	end
	if (
		( io_hex2_expected_prev[1] !== 1'bx ) && ( io_hex2_prev[1] !== io_hex2_expected_prev[1] )
		&& ((io_hex2_expected_prev[1] !== last_io_hex2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[1] = io_hex2_expected_prev[1];
	end
	if (
		( io_hex2_expected_prev[2] !== 1'bx ) && ( io_hex2_prev[2] !== io_hex2_expected_prev[2] )
		&& ((io_hex2_expected_prev[2] !== last_io_hex2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[2] = io_hex2_expected_prev[2];
	end
	if (
		( io_hex2_expected_prev[3] !== 1'bx ) && ( io_hex2_prev[3] !== io_hex2_expected_prev[3] )
		&& ((io_hex2_expected_prev[3] !== last_io_hex2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[3] = io_hex2_expected_prev[3];
	end
	if (
		( io_hex2_expected_prev[4] !== 1'bx ) && ( io_hex2_prev[4] !== io_hex2_expected_prev[4] )
		&& ((io_hex2_expected_prev[4] !== last_io_hex2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[4] = io_hex2_expected_prev[4];
	end
	if (
		( io_hex2_expected_prev[5] !== 1'bx ) && ( io_hex2_prev[5] !== io_hex2_expected_prev[5] )
		&& ((io_hex2_expected_prev[5] !== last_io_hex2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[5] = io_hex2_expected_prev[5];
	end
	if (
		( io_hex2_expected_prev[6] !== 1'bx ) && ( io_hex2_prev[6] !== io_hex2_expected_prev[6] )
		&& ((io_hex2_expected_prev[6] !== last_io_hex2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[6] = io_hex2_expected_prev[6];
	end
	if (
		( io_hex2_expected_prev[7] !== 1'bx ) && ( io_hex2_prev[7] !== io_hex2_expected_prev[7] )
		&& ((io_hex2_expected_prev[7] !== last_io_hex2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[7] = io_hex2_expected_prev[7];
	end
	if (
		( io_hex2_expected_prev[8] !== 1'bx ) && ( io_hex2_prev[8] !== io_hex2_expected_prev[8] )
		&& ((io_hex2_expected_prev[8] !== last_io_hex2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[8] = io_hex2_expected_prev[8];
	end
	if (
		( io_hex2_expected_prev[9] !== 1'bx ) && ( io_hex2_prev[9] !== io_hex2_expected_prev[9] )
		&& ((io_hex2_expected_prev[9] !== last_io_hex2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[9] = io_hex2_expected_prev[9];
	end
	if (
		( io_hex2_expected_prev[10] !== 1'bx ) && ( io_hex2_prev[10] !== io_hex2_expected_prev[10] )
		&& ((io_hex2_expected_prev[10] !== last_io_hex2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[10] = io_hex2_expected_prev[10];
	end
	if (
		( io_hex2_expected_prev[11] !== 1'bx ) && ( io_hex2_prev[11] !== io_hex2_expected_prev[11] )
		&& ((io_hex2_expected_prev[11] !== last_io_hex2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[11] = io_hex2_expected_prev[11];
	end
	if (
		( io_hex2_expected_prev[12] !== 1'bx ) && ( io_hex2_prev[12] !== io_hex2_expected_prev[12] )
		&& ((io_hex2_expected_prev[12] !== last_io_hex2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[12] = io_hex2_expected_prev[12];
	end
	if (
		( io_hex2_expected_prev[13] !== 1'bx ) && ( io_hex2_prev[13] !== io_hex2_expected_prev[13] )
		&& ((io_hex2_expected_prev[13] !== last_io_hex2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[13] = io_hex2_expected_prev[13];
	end
	if (
		( io_hex2_expected_prev[14] !== 1'bx ) && ( io_hex2_prev[14] !== io_hex2_expected_prev[14] )
		&& ((io_hex2_expected_prev[14] !== last_io_hex2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[14] = io_hex2_expected_prev[14];
	end
	if (
		( io_hex2_expected_prev[15] !== 1'bx ) && ( io_hex2_prev[15] !== io_hex2_expected_prev[15] )
		&& ((io_hex2_expected_prev[15] !== last_io_hex2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[15] = io_hex2_expected_prev[15];
	end
	if (
		( io_hex2_expected_prev[16] !== 1'bx ) && ( io_hex2_prev[16] !== io_hex2_expected_prev[16] )
		&& ((io_hex2_expected_prev[16] !== last_io_hex2_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[16] = io_hex2_expected_prev[16];
	end
	if (
		( io_hex2_expected_prev[17] !== 1'bx ) && ( io_hex2_prev[17] !== io_hex2_expected_prev[17] )
		&& ((io_hex2_expected_prev[17] !== last_io_hex2_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[17] = io_hex2_expected_prev[17];
	end
	if (
		( io_hex2_expected_prev[18] !== 1'bx ) && ( io_hex2_prev[18] !== io_hex2_expected_prev[18] )
		&& ((io_hex2_expected_prev[18] !== last_io_hex2_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[18] = io_hex2_expected_prev[18];
	end
	if (
		( io_hex2_expected_prev[19] !== 1'bx ) && ( io_hex2_prev[19] !== io_hex2_expected_prev[19] )
		&& ((io_hex2_expected_prev[19] !== last_io_hex2_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[19] = io_hex2_expected_prev[19];
	end
	if (
		( io_hex2_expected_prev[20] !== 1'bx ) && ( io_hex2_prev[20] !== io_hex2_expected_prev[20] )
		&& ((io_hex2_expected_prev[20] !== last_io_hex2_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[20] = io_hex2_expected_prev[20];
	end
	if (
		( io_hex2_expected_prev[21] !== 1'bx ) && ( io_hex2_prev[21] !== io_hex2_expected_prev[21] )
		&& ((io_hex2_expected_prev[21] !== last_io_hex2_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[21] = io_hex2_expected_prev[21];
	end
	if (
		( io_hex2_expected_prev[22] !== 1'bx ) && ( io_hex2_prev[22] !== io_hex2_expected_prev[22] )
		&& ((io_hex2_expected_prev[22] !== last_io_hex2_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[22] = io_hex2_expected_prev[22];
	end
	if (
		( io_hex2_expected_prev[23] !== 1'bx ) && ( io_hex2_prev[23] !== io_hex2_expected_prev[23] )
		&& ((io_hex2_expected_prev[23] !== last_io_hex2_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[23] = io_hex2_expected_prev[23];
	end
	if (
		( io_hex2_expected_prev[24] !== 1'bx ) && ( io_hex2_prev[24] !== io_hex2_expected_prev[24] )
		&& ((io_hex2_expected_prev[24] !== last_io_hex2_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[24] = io_hex2_expected_prev[24];
	end
	if (
		( io_hex2_expected_prev[25] !== 1'bx ) && ( io_hex2_prev[25] !== io_hex2_expected_prev[25] )
		&& ((io_hex2_expected_prev[25] !== last_io_hex2_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[25] = io_hex2_expected_prev[25];
	end
	if (
		( io_hex2_expected_prev[26] !== 1'bx ) && ( io_hex2_prev[26] !== io_hex2_expected_prev[26] )
		&& ((io_hex2_expected_prev[26] !== last_io_hex2_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[26] = io_hex2_expected_prev[26];
	end
	if (
		( io_hex2_expected_prev[27] !== 1'bx ) && ( io_hex2_prev[27] !== io_hex2_expected_prev[27] )
		&& ((io_hex2_expected_prev[27] !== last_io_hex2_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[27] = io_hex2_expected_prev[27];
	end
	if (
		( io_hex2_expected_prev[28] !== 1'bx ) && ( io_hex2_prev[28] !== io_hex2_expected_prev[28] )
		&& ((io_hex2_expected_prev[28] !== last_io_hex2_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[28] = io_hex2_expected_prev[28];
	end
	if (
		( io_hex2_expected_prev[29] !== 1'bx ) && ( io_hex2_prev[29] !== io_hex2_expected_prev[29] )
		&& ((io_hex2_expected_prev[29] !== last_io_hex2_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[29] = io_hex2_expected_prev[29];
	end
	if (
		( io_hex2_expected_prev[30] !== 1'bx ) && ( io_hex2_prev[30] !== io_hex2_expected_prev[30] )
		&& ((io_hex2_expected_prev[30] !== last_io_hex2_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[30] = io_hex2_expected_prev[30];
	end
	if (
		( io_hex2_expected_prev[31] !== 1'bx ) && ( io_hex2_prev[31] !== io_hex2_expected_prev[31] )
		&& ((io_hex2_expected_prev[31] !== last_io_hex2_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex2_expected_prev);
		$display ("     Real value = %b", io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_io_hex2_exp[31] = io_hex2_expected_prev[31];
	end
	if (
		( io_hex3_expected_prev[0] !== 1'bx ) && ( io_hex3_prev[0] !== io_hex3_expected_prev[0] )
		&& ((io_hex3_expected_prev[0] !== last_io_hex3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[0] = io_hex3_expected_prev[0];
	end
	if (
		( io_hex3_expected_prev[1] !== 1'bx ) && ( io_hex3_prev[1] !== io_hex3_expected_prev[1] )
		&& ((io_hex3_expected_prev[1] !== last_io_hex3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[1] = io_hex3_expected_prev[1];
	end
	if (
		( io_hex3_expected_prev[2] !== 1'bx ) && ( io_hex3_prev[2] !== io_hex3_expected_prev[2] )
		&& ((io_hex3_expected_prev[2] !== last_io_hex3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[2] = io_hex3_expected_prev[2];
	end
	if (
		( io_hex3_expected_prev[3] !== 1'bx ) && ( io_hex3_prev[3] !== io_hex3_expected_prev[3] )
		&& ((io_hex3_expected_prev[3] !== last_io_hex3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[3] = io_hex3_expected_prev[3];
	end
	if (
		( io_hex3_expected_prev[4] !== 1'bx ) && ( io_hex3_prev[4] !== io_hex3_expected_prev[4] )
		&& ((io_hex3_expected_prev[4] !== last_io_hex3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[4] = io_hex3_expected_prev[4];
	end
	if (
		( io_hex3_expected_prev[5] !== 1'bx ) && ( io_hex3_prev[5] !== io_hex3_expected_prev[5] )
		&& ((io_hex3_expected_prev[5] !== last_io_hex3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[5] = io_hex3_expected_prev[5];
	end
	if (
		( io_hex3_expected_prev[6] !== 1'bx ) && ( io_hex3_prev[6] !== io_hex3_expected_prev[6] )
		&& ((io_hex3_expected_prev[6] !== last_io_hex3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[6] = io_hex3_expected_prev[6];
	end
	if (
		( io_hex3_expected_prev[7] !== 1'bx ) && ( io_hex3_prev[7] !== io_hex3_expected_prev[7] )
		&& ((io_hex3_expected_prev[7] !== last_io_hex3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[7] = io_hex3_expected_prev[7];
	end
	if (
		( io_hex3_expected_prev[8] !== 1'bx ) && ( io_hex3_prev[8] !== io_hex3_expected_prev[8] )
		&& ((io_hex3_expected_prev[8] !== last_io_hex3_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[8] = io_hex3_expected_prev[8];
	end
	if (
		( io_hex3_expected_prev[9] !== 1'bx ) && ( io_hex3_prev[9] !== io_hex3_expected_prev[9] )
		&& ((io_hex3_expected_prev[9] !== last_io_hex3_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[9] = io_hex3_expected_prev[9];
	end
	if (
		( io_hex3_expected_prev[10] !== 1'bx ) && ( io_hex3_prev[10] !== io_hex3_expected_prev[10] )
		&& ((io_hex3_expected_prev[10] !== last_io_hex3_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[10] = io_hex3_expected_prev[10];
	end
	if (
		( io_hex3_expected_prev[11] !== 1'bx ) && ( io_hex3_prev[11] !== io_hex3_expected_prev[11] )
		&& ((io_hex3_expected_prev[11] !== last_io_hex3_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[11] = io_hex3_expected_prev[11];
	end
	if (
		( io_hex3_expected_prev[12] !== 1'bx ) && ( io_hex3_prev[12] !== io_hex3_expected_prev[12] )
		&& ((io_hex3_expected_prev[12] !== last_io_hex3_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[12] = io_hex3_expected_prev[12];
	end
	if (
		( io_hex3_expected_prev[13] !== 1'bx ) && ( io_hex3_prev[13] !== io_hex3_expected_prev[13] )
		&& ((io_hex3_expected_prev[13] !== last_io_hex3_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[13] = io_hex3_expected_prev[13];
	end
	if (
		( io_hex3_expected_prev[14] !== 1'bx ) && ( io_hex3_prev[14] !== io_hex3_expected_prev[14] )
		&& ((io_hex3_expected_prev[14] !== last_io_hex3_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[14] = io_hex3_expected_prev[14];
	end
	if (
		( io_hex3_expected_prev[15] !== 1'bx ) && ( io_hex3_prev[15] !== io_hex3_expected_prev[15] )
		&& ((io_hex3_expected_prev[15] !== last_io_hex3_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[15] = io_hex3_expected_prev[15];
	end
	if (
		( io_hex3_expected_prev[16] !== 1'bx ) && ( io_hex3_prev[16] !== io_hex3_expected_prev[16] )
		&& ((io_hex3_expected_prev[16] !== last_io_hex3_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[16] = io_hex3_expected_prev[16];
	end
	if (
		( io_hex3_expected_prev[17] !== 1'bx ) && ( io_hex3_prev[17] !== io_hex3_expected_prev[17] )
		&& ((io_hex3_expected_prev[17] !== last_io_hex3_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[17] = io_hex3_expected_prev[17];
	end
	if (
		( io_hex3_expected_prev[18] !== 1'bx ) && ( io_hex3_prev[18] !== io_hex3_expected_prev[18] )
		&& ((io_hex3_expected_prev[18] !== last_io_hex3_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[18] = io_hex3_expected_prev[18];
	end
	if (
		( io_hex3_expected_prev[19] !== 1'bx ) && ( io_hex3_prev[19] !== io_hex3_expected_prev[19] )
		&& ((io_hex3_expected_prev[19] !== last_io_hex3_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[19] = io_hex3_expected_prev[19];
	end
	if (
		( io_hex3_expected_prev[20] !== 1'bx ) && ( io_hex3_prev[20] !== io_hex3_expected_prev[20] )
		&& ((io_hex3_expected_prev[20] !== last_io_hex3_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[20] = io_hex3_expected_prev[20];
	end
	if (
		( io_hex3_expected_prev[21] !== 1'bx ) && ( io_hex3_prev[21] !== io_hex3_expected_prev[21] )
		&& ((io_hex3_expected_prev[21] !== last_io_hex3_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[21] = io_hex3_expected_prev[21];
	end
	if (
		( io_hex3_expected_prev[22] !== 1'bx ) && ( io_hex3_prev[22] !== io_hex3_expected_prev[22] )
		&& ((io_hex3_expected_prev[22] !== last_io_hex3_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[22] = io_hex3_expected_prev[22];
	end
	if (
		( io_hex3_expected_prev[23] !== 1'bx ) && ( io_hex3_prev[23] !== io_hex3_expected_prev[23] )
		&& ((io_hex3_expected_prev[23] !== last_io_hex3_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[23] = io_hex3_expected_prev[23];
	end
	if (
		( io_hex3_expected_prev[24] !== 1'bx ) && ( io_hex3_prev[24] !== io_hex3_expected_prev[24] )
		&& ((io_hex3_expected_prev[24] !== last_io_hex3_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[24] = io_hex3_expected_prev[24];
	end
	if (
		( io_hex3_expected_prev[25] !== 1'bx ) && ( io_hex3_prev[25] !== io_hex3_expected_prev[25] )
		&& ((io_hex3_expected_prev[25] !== last_io_hex3_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[25] = io_hex3_expected_prev[25];
	end
	if (
		( io_hex3_expected_prev[26] !== 1'bx ) && ( io_hex3_prev[26] !== io_hex3_expected_prev[26] )
		&& ((io_hex3_expected_prev[26] !== last_io_hex3_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[26] = io_hex3_expected_prev[26];
	end
	if (
		( io_hex3_expected_prev[27] !== 1'bx ) && ( io_hex3_prev[27] !== io_hex3_expected_prev[27] )
		&& ((io_hex3_expected_prev[27] !== last_io_hex3_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[27] = io_hex3_expected_prev[27];
	end
	if (
		( io_hex3_expected_prev[28] !== 1'bx ) && ( io_hex3_prev[28] !== io_hex3_expected_prev[28] )
		&& ((io_hex3_expected_prev[28] !== last_io_hex3_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[28] = io_hex3_expected_prev[28];
	end
	if (
		( io_hex3_expected_prev[29] !== 1'bx ) && ( io_hex3_prev[29] !== io_hex3_expected_prev[29] )
		&& ((io_hex3_expected_prev[29] !== last_io_hex3_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[29] = io_hex3_expected_prev[29];
	end
	if (
		( io_hex3_expected_prev[30] !== 1'bx ) && ( io_hex3_prev[30] !== io_hex3_expected_prev[30] )
		&& ((io_hex3_expected_prev[30] !== last_io_hex3_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[30] = io_hex3_expected_prev[30];
	end
	if (
		( io_hex3_expected_prev[31] !== 1'bx ) && ( io_hex3_prev[31] !== io_hex3_expected_prev[31] )
		&& ((io_hex3_expected_prev[31] !== last_io_hex3_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex3_expected_prev);
		$display ("     Real value = %b", io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_hex3_exp[31] = io_hex3_expected_prev[31];
	end
	if (
		( io_hex4_expected_prev[0] !== 1'bx ) && ( io_hex4_prev[0] !== io_hex4_expected_prev[0] )
		&& ((io_hex4_expected_prev[0] !== last_io_hex4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[0] = io_hex4_expected_prev[0];
	end
	if (
		( io_hex4_expected_prev[1] !== 1'bx ) && ( io_hex4_prev[1] !== io_hex4_expected_prev[1] )
		&& ((io_hex4_expected_prev[1] !== last_io_hex4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[1] = io_hex4_expected_prev[1];
	end
	if (
		( io_hex4_expected_prev[2] !== 1'bx ) && ( io_hex4_prev[2] !== io_hex4_expected_prev[2] )
		&& ((io_hex4_expected_prev[2] !== last_io_hex4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[2] = io_hex4_expected_prev[2];
	end
	if (
		( io_hex4_expected_prev[3] !== 1'bx ) && ( io_hex4_prev[3] !== io_hex4_expected_prev[3] )
		&& ((io_hex4_expected_prev[3] !== last_io_hex4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[3] = io_hex4_expected_prev[3];
	end
	if (
		( io_hex4_expected_prev[4] !== 1'bx ) && ( io_hex4_prev[4] !== io_hex4_expected_prev[4] )
		&& ((io_hex4_expected_prev[4] !== last_io_hex4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[4] = io_hex4_expected_prev[4];
	end
	if (
		( io_hex4_expected_prev[5] !== 1'bx ) && ( io_hex4_prev[5] !== io_hex4_expected_prev[5] )
		&& ((io_hex4_expected_prev[5] !== last_io_hex4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[5] = io_hex4_expected_prev[5];
	end
	if (
		( io_hex4_expected_prev[6] !== 1'bx ) && ( io_hex4_prev[6] !== io_hex4_expected_prev[6] )
		&& ((io_hex4_expected_prev[6] !== last_io_hex4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[6] = io_hex4_expected_prev[6];
	end
	if (
		( io_hex4_expected_prev[7] !== 1'bx ) && ( io_hex4_prev[7] !== io_hex4_expected_prev[7] )
		&& ((io_hex4_expected_prev[7] !== last_io_hex4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[7] = io_hex4_expected_prev[7];
	end
	if (
		( io_hex4_expected_prev[8] !== 1'bx ) && ( io_hex4_prev[8] !== io_hex4_expected_prev[8] )
		&& ((io_hex4_expected_prev[8] !== last_io_hex4_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[8] = io_hex4_expected_prev[8];
	end
	if (
		( io_hex4_expected_prev[9] !== 1'bx ) && ( io_hex4_prev[9] !== io_hex4_expected_prev[9] )
		&& ((io_hex4_expected_prev[9] !== last_io_hex4_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[9] = io_hex4_expected_prev[9];
	end
	if (
		( io_hex4_expected_prev[10] !== 1'bx ) && ( io_hex4_prev[10] !== io_hex4_expected_prev[10] )
		&& ((io_hex4_expected_prev[10] !== last_io_hex4_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[10] = io_hex4_expected_prev[10];
	end
	if (
		( io_hex4_expected_prev[11] !== 1'bx ) && ( io_hex4_prev[11] !== io_hex4_expected_prev[11] )
		&& ((io_hex4_expected_prev[11] !== last_io_hex4_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[11] = io_hex4_expected_prev[11];
	end
	if (
		( io_hex4_expected_prev[12] !== 1'bx ) && ( io_hex4_prev[12] !== io_hex4_expected_prev[12] )
		&& ((io_hex4_expected_prev[12] !== last_io_hex4_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[12] = io_hex4_expected_prev[12];
	end
	if (
		( io_hex4_expected_prev[13] !== 1'bx ) && ( io_hex4_prev[13] !== io_hex4_expected_prev[13] )
		&& ((io_hex4_expected_prev[13] !== last_io_hex4_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[13] = io_hex4_expected_prev[13];
	end
	if (
		( io_hex4_expected_prev[14] !== 1'bx ) && ( io_hex4_prev[14] !== io_hex4_expected_prev[14] )
		&& ((io_hex4_expected_prev[14] !== last_io_hex4_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[14] = io_hex4_expected_prev[14];
	end
	if (
		( io_hex4_expected_prev[15] !== 1'bx ) && ( io_hex4_prev[15] !== io_hex4_expected_prev[15] )
		&& ((io_hex4_expected_prev[15] !== last_io_hex4_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[15] = io_hex4_expected_prev[15];
	end
	if (
		( io_hex4_expected_prev[16] !== 1'bx ) && ( io_hex4_prev[16] !== io_hex4_expected_prev[16] )
		&& ((io_hex4_expected_prev[16] !== last_io_hex4_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[16] = io_hex4_expected_prev[16];
	end
	if (
		( io_hex4_expected_prev[17] !== 1'bx ) && ( io_hex4_prev[17] !== io_hex4_expected_prev[17] )
		&& ((io_hex4_expected_prev[17] !== last_io_hex4_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[17] = io_hex4_expected_prev[17];
	end
	if (
		( io_hex4_expected_prev[18] !== 1'bx ) && ( io_hex4_prev[18] !== io_hex4_expected_prev[18] )
		&& ((io_hex4_expected_prev[18] !== last_io_hex4_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[18] = io_hex4_expected_prev[18];
	end
	if (
		( io_hex4_expected_prev[19] !== 1'bx ) && ( io_hex4_prev[19] !== io_hex4_expected_prev[19] )
		&& ((io_hex4_expected_prev[19] !== last_io_hex4_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[19] = io_hex4_expected_prev[19];
	end
	if (
		( io_hex4_expected_prev[20] !== 1'bx ) && ( io_hex4_prev[20] !== io_hex4_expected_prev[20] )
		&& ((io_hex4_expected_prev[20] !== last_io_hex4_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[20] = io_hex4_expected_prev[20];
	end
	if (
		( io_hex4_expected_prev[21] !== 1'bx ) && ( io_hex4_prev[21] !== io_hex4_expected_prev[21] )
		&& ((io_hex4_expected_prev[21] !== last_io_hex4_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[21] = io_hex4_expected_prev[21];
	end
	if (
		( io_hex4_expected_prev[22] !== 1'bx ) && ( io_hex4_prev[22] !== io_hex4_expected_prev[22] )
		&& ((io_hex4_expected_prev[22] !== last_io_hex4_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[22] = io_hex4_expected_prev[22];
	end
	if (
		( io_hex4_expected_prev[23] !== 1'bx ) && ( io_hex4_prev[23] !== io_hex4_expected_prev[23] )
		&& ((io_hex4_expected_prev[23] !== last_io_hex4_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[23] = io_hex4_expected_prev[23];
	end
	if (
		( io_hex4_expected_prev[24] !== 1'bx ) && ( io_hex4_prev[24] !== io_hex4_expected_prev[24] )
		&& ((io_hex4_expected_prev[24] !== last_io_hex4_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[24] = io_hex4_expected_prev[24];
	end
	if (
		( io_hex4_expected_prev[25] !== 1'bx ) && ( io_hex4_prev[25] !== io_hex4_expected_prev[25] )
		&& ((io_hex4_expected_prev[25] !== last_io_hex4_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[25] = io_hex4_expected_prev[25];
	end
	if (
		( io_hex4_expected_prev[26] !== 1'bx ) && ( io_hex4_prev[26] !== io_hex4_expected_prev[26] )
		&& ((io_hex4_expected_prev[26] !== last_io_hex4_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[26] = io_hex4_expected_prev[26];
	end
	if (
		( io_hex4_expected_prev[27] !== 1'bx ) && ( io_hex4_prev[27] !== io_hex4_expected_prev[27] )
		&& ((io_hex4_expected_prev[27] !== last_io_hex4_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[27] = io_hex4_expected_prev[27];
	end
	if (
		( io_hex4_expected_prev[28] !== 1'bx ) && ( io_hex4_prev[28] !== io_hex4_expected_prev[28] )
		&& ((io_hex4_expected_prev[28] !== last_io_hex4_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[28] = io_hex4_expected_prev[28];
	end
	if (
		( io_hex4_expected_prev[29] !== 1'bx ) && ( io_hex4_prev[29] !== io_hex4_expected_prev[29] )
		&& ((io_hex4_expected_prev[29] !== last_io_hex4_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[29] = io_hex4_expected_prev[29];
	end
	if (
		( io_hex4_expected_prev[30] !== 1'bx ) && ( io_hex4_prev[30] !== io_hex4_expected_prev[30] )
		&& ((io_hex4_expected_prev[30] !== last_io_hex4_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[30] = io_hex4_expected_prev[30];
	end
	if (
		( io_hex4_expected_prev[31] !== 1'bx ) && ( io_hex4_prev[31] !== io_hex4_expected_prev[31] )
		&& ((io_hex4_expected_prev[31] !== last_io_hex4_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex4_expected_prev);
		$display ("     Real value = %b", io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_io_hex4_exp[31] = io_hex4_expected_prev[31];
	end
	if (
		( io_hex5_expected_prev[0] !== 1'bx ) && ( io_hex5_prev[0] !== io_hex5_expected_prev[0] )
		&& ((io_hex5_expected_prev[0] !== last_io_hex5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[0] = io_hex5_expected_prev[0];
	end
	if (
		( io_hex5_expected_prev[1] !== 1'bx ) && ( io_hex5_prev[1] !== io_hex5_expected_prev[1] )
		&& ((io_hex5_expected_prev[1] !== last_io_hex5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[1] = io_hex5_expected_prev[1];
	end
	if (
		( io_hex5_expected_prev[2] !== 1'bx ) && ( io_hex5_prev[2] !== io_hex5_expected_prev[2] )
		&& ((io_hex5_expected_prev[2] !== last_io_hex5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[2] = io_hex5_expected_prev[2];
	end
	if (
		( io_hex5_expected_prev[3] !== 1'bx ) && ( io_hex5_prev[3] !== io_hex5_expected_prev[3] )
		&& ((io_hex5_expected_prev[3] !== last_io_hex5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[3] = io_hex5_expected_prev[3];
	end
	if (
		( io_hex5_expected_prev[4] !== 1'bx ) && ( io_hex5_prev[4] !== io_hex5_expected_prev[4] )
		&& ((io_hex5_expected_prev[4] !== last_io_hex5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[4] = io_hex5_expected_prev[4];
	end
	if (
		( io_hex5_expected_prev[5] !== 1'bx ) && ( io_hex5_prev[5] !== io_hex5_expected_prev[5] )
		&& ((io_hex5_expected_prev[5] !== last_io_hex5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[5] = io_hex5_expected_prev[5];
	end
	if (
		( io_hex5_expected_prev[6] !== 1'bx ) && ( io_hex5_prev[6] !== io_hex5_expected_prev[6] )
		&& ((io_hex5_expected_prev[6] !== last_io_hex5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[6] = io_hex5_expected_prev[6];
	end
	if (
		( io_hex5_expected_prev[7] !== 1'bx ) && ( io_hex5_prev[7] !== io_hex5_expected_prev[7] )
		&& ((io_hex5_expected_prev[7] !== last_io_hex5_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[7] = io_hex5_expected_prev[7];
	end
	if (
		( io_hex5_expected_prev[8] !== 1'bx ) && ( io_hex5_prev[8] !== io_hex5_expected_prev[8] )
		&& ((io_hex5_expected_prev[8] !== last_io_hex5_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[8] = io_hex5_expected_prev[8];
	end
	if (
		( io_hex5_expected_prev[9] !== 1'bx ) && ( io_hex5_prev[9] !== io_hex5_expected_prev[9] )
		&& ((io_hex5_expected_prev[9] !== last_io_hex5_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[9] = io_hex5_expected_prev[9];
	end
	if (
		( io_hex5_expected_prev[10] !== 1'bx ) && ( io_hex5_prev[10] !== io_hex5_expected_prev[10] )
		&& ((io_hex5_expected_prev[10] !== last_io_hex5_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[10] = io_hex5_expected_prev[10];
	end
	if (
		( io_hex5_expected_prev[11] !== 1'bx ) && ( io_hex5_prev[11] !== io_hex5_expected_prev[11] )
		&& ((io_hex5_expected_prev[11] !== last_io_hex5_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[11] = io_hex5_expected_prev[11];
	end
	if (
		( io_hex5_expected_prev[12] !== 1'bx ) && ( io_hex5_prev[12] !== io_hex5_expected_prev[12] )
		&& ((io_hex5_expected_prev[12] !== last_io_hex5_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[12] = io_hex5_expected_prev[12];
	end
	if (
		( io_hex5_expected_prev[13] !== 1'bx ) && ( io_hex5_prev[13] !== io_hex5_expected_prev[13] )
		&& ((io_hex5_expected_prev[13] !== last_io_hex5_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[13] = io_hex5_expected_prev[13];
	end
	if (
		( io_hex5_expected_prev[14] !== 1'bx ) && ( io_hex5_prev[14] !== io_hex5_expected_prev[14] )
		&& ((io_hex5_expected_prev[14] !== last_io_hex5_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[14] = io_hex5_expected_prev[14];
	end
	if (
		( io_hex5_expected_prev[15] !== 1'bx ) && ( io_hex5_prev[15] !== io_hex5_expected_prev[15] )
		&& ((io_hex5_expected_prev[15] !== last_io_hex5_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[15] = io_hex5_expected_prev[15];
	end
	if (
		( io_hex5_expected_prev[16] !== 1'bx ) && ( io_hex5_prev[16] !== io_hex5_expected_prev[16] )
		&& ((io_hex5_expected_prev[16] !== last_io_hex5_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[16] = io_hex5_expected_prev[16];
	end
	if (
		( io_hex5_expected_prev[17] !== 1'bx ) && ( io_hex5_prev[17] !== io_hex5_expected_prev[17] )
		&& ((io_hex5_expected_prev[17] !== last_io_hex5_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[17] = io_hex5_expected_prev[17];
	end
	if (
		( io_hex5_expected_prev[18] !== 1'bx ) && ( io_hex5_prev[18] !== io_hex5_expected_prev[18] )
		&& ((io_hex5_expected_prev[18] !== last_io_hex5_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[18] = io_hex5_expected_prev[18];
	end
	if (
		( io_hex5_expected_prev[19] !== 1'bx ) && ( io_hex5_prev[19] !== io_hex5_expected_prev[19] )
		&& ((io_hex5_expected_prev[19] !== last_io_hex5_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[19] = io_hex5_expected_prev[19];
	end
	if (
		( io_hex5_expected_prev[20] !== 1'bx ) && ( io_hex5_prev[20] !== io_hex5_expected_prev[20] )
		&& ((io_hex5_expected_prev[20] !== last_io_hex5_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[20] = io_hex5_expected_prev[20];
	end
	if (
		( io_hex5_expected_prev[21] !== 1'bx ) && ( io_hex5_prev[21] !== io_hex5_expected_prev[21] )
		&& ((io_hex5_expected_prev[21] !== last_io_hex5_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[21] = io_hex5_expected_prev[21];
	end
	if (
		( io_hex5_expected_prev[22] !== 1'bx ) && ( io_hex5_prev[22] !== io_hex5_expected_prev[22] )
		&& ((io_hex5_expected_prev[22] !== last_io_hex5_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[22] = io_hex5_expected_prev[22];
	end
	if (
		( io_hex5_expected_prev[23] !== 1'bx ) && ( io_hex5_prev[23] !== io_hex5_expected_prev[23] )
		&& ((io_hex5_expected_prev[23] !== last_io_hex5_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[23] = io_hex5_expected_prev[23];
	end
	if (
		( io_hex5_expected_prev[24] !== 1'bx ) && ( io_hex5_prev[24] !== io_hex5_expected_prev[24] )
		&& ((io_hex5_expected_prev[24] !== last_io_hex5_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[24] = io_hex5_expected_prev[24];
	end
	if (
		( io_hex5_expected_prev[25] !== 1'bx ) && ( io_hex5_prev[25] !== io_hex5_expected_prev[25] )
		&& ((io_hex5_expected_prev[25] !== last_io_hex5_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[25] = io_hex5_expected_prev[25];
	end
	if (
		( io_hex5_expected_prev[26] !== 1'bx ) && ( io_hex5_prev[26] !== io_hex5_expected_prev[26] )
		&& ((io_hex5_expected_prev[26] !== last_io_hex5_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[26] = io_hex5_expected_prev[26];
	end
	if (
		( io_hex5_expected_prev[27] !== 1'bx ) && ( io_hex5_prev[27] !== io_hex5_expected_prev[27] )
		&& ((io_hex5_expected_prev[27] !== last_io_hex5_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[27] = io_hex5_expected_prev[27];
	end
	if (
		( io_hex5_expected_prev[28] !== 1'bx ) && ( io_hex5_prev[28] !== io_hex5_expected_prev[28] )
		&& ((io_hex5_expected_prev[28] !== last_io_hex5_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[28] = io_hex5_expected_prev[28];
	end
	if (
		( io_hex5_expected_prev[29] !== 1'bx ) && ( io_hex5_prev[29] !== io_hex5_expected_prev[29] )
		&& ((io_hex5_expected_prev[29] !== last_io_hex5_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[29] = io_hex5_expected_prev[29];
	end
	if (
		( io_hex5_expected_prev[30] !== 1'bx ) && ( io_hex5_prev[30] !== io_hex5_expected_prev[30] )
		&& ((io_hex5_expected_prev[30] !== last_io_hex5_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[30] = io_hex5_expected_prev[30];
	end
	if (
		( io_hex5_expected_prev[31] !== 1'bx ) && ( io_hex5_prev[31] !== io_hex5_expected_prev[31] )
		&& ((io_hex5_expected_prev[31] !== last_io_hex5_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex5[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex5_expected_prev);
		$display ("     Real value = %b", io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_io_hex5_exp[31] = io_hex5_expected_prev[31];
	end
	if (
		( io_hex6_expected_prev[0] !== 1'bx ) && ( io_hex6_prev[0] !== io_hex6_expected_prev[0] )
		&& ((io_hex6_expected_prev[0] !== last_io_hex6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[0] = io_hex6_expected_prev[0];
	end
	if (
		( io_hex6_expected_prev[1] !== 1'bx ) && ( io_hex6_prev[1] !== io_hex6_expected_prev[1] )
		&& ((io_hex6_expected_prev[1] !== last_io_hex6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[1] = io_hex6_expected_prev[1];
	end
	if (
		( io_hex6_expected_prev[2] !== 1'bx ) && ( io_hex6_prev[2] !== io_hex6_expected_prev[2] )
		&& ((io_hex6_expected_prev[2] !== last_io_hex6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[2] = io_hex6_expected_prev[2];
	end
	if (
		( io_hex6_expected_prev[3] !== 1'bx ) && ( io_hex6_prev[3] !== io_hex6_expected_prev[3] )
		&& ((io_hex6_expected_prev[3] !== last_io_hex6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[3] = io_hex6_expected_prev[3];
	end
	if (
		( io_hex6_expected_prev[4] !== 1'bx ) && ( io_hex6_prev[4] !== io_hex6_expected_prev[4] )
		&& ((io_hex6_expected_prev[4] !== last_io_hex6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[4] = io_hex6_expected_prev[4];
	end
	if (
		( io_hex6_expected_prev[5] !== 1'bx ) && ( io_hex6_prev[5] !== io_hex6_expected_prev[5] )
		&& ((io_hex6_expected_prev[5] !== last_io_hex6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[5] = io_hex6_expected_prev[5];
	end
	if (
		( io_hex6_expected_prev[6] !== 1'bx ) && ( io_hex6_prev[6] !== io_hex6_expected_prev[6] )
		&& ((io_hex6_expected_prev[6] !== last_io_hex6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[6] = io_hex6_expected_prev[6];
	end
	if (
		( io_hex6_expected_prev[7] !== 1'bx ) && ( io_hex6_prev[7] !== io_hex6_expected_prev[7] )
		&& ((io_hex6_expected_prev[7] !== last_io_hex6_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[7] = io_hex6_expected_prev[7];
	end
	if (
		( io_hex6_expected_prev[8] !== 1'bx ) && ( io_hex6_prev[8] !== io_hex6_expected_prev[8] )
		&& ((io_hex6_expected_prev[8] !== last_io_hex6_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[8] = io_hex6_expected_prev[8];
	end
	if (
		( io_hex6_expected_prev[9] !== 1'bx ) && ( io_hex6_prev[9] !== io_hex6_expected_prev[9] )
		&& ((io_hex6_expected_prev[9] !== last_io_hex6_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[9] = io_hex6_expected_prev[9];
	end
	if (
		( io_hex6_expected_prev[10] !== 1'bx ) && ( io_hex6_prev[10] !== io_hex6_expected_prev[10] )
		&& ((io_hex6_expected_prev[10] !== last_io_hex6_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[10] = io_hex6_expected_prev[10];
	end
	if (
		( io_hex6_expected_prev[11] !== 1'bx ) && ( io_hex6_prev[11] !== io_hex6_expected_prev[11] )
		&& ((io_hex6_expected_prev[11] !== last_io_hex6_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[11] = io_hex6_expected_prev[11];
	end
	if (
		( io_hex6_expected_prev[12] !== 1'bx ) && ( io_hex6_prev[12] !== io_hex6_expected_prev[12] )
		&& ((io_hex6_expected_prev[12] !== last_io_hex6_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[12] = io_hex6_expected_prev[12];
	end
	if (
		( io_hex6_expected_prev[13] !== 1'bx ) && ( io_hex6_prev[13] !== io_hex6_expected_prev[13] )
		&& ((io_hex6_expected_prev[13] !== last_io_hex6_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[13] = io_hex6_expected_prev[13];
	end
	if (
		( io_hex6_expected_prev[14] !== 1'bx ) && ( io_hex6_prev[14] !== io_hex6_expected_prev[14] )
		&& ((io_hex6_expected_prev[14] !== last_io_hex6_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[14] = io_hex6_expected_prev[14];
	end
	if (
		( io_hex6_expected_prev[15] !== 1'bx ) && ( io_hex6_prev[15] !== io_hex6_expected_prev[15] )
		&& ((io_hex6_expected_prev[15] !== last_io_hex6_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[15] = io_hex6_expected_prev[15];
	end
	if (
		( io_hex6_expected_prev[16] !== 1'bx ) && ( io_hex6_prev[16] !== io_hex6_expected_prev[16] )
		&& ((io_hex6_expected_prev[16] !== last_io_hex6_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[16] = io_hex6_expected_prev[16];
	end
	if (
		( io_hex6_expected_prev[17] !== 1'bx ) && ( io_hex6_prev[17] !== io_hex6_expected_prev[17] )
		&& ((io_hex6_expected_prev[17] !== last_io_hex6_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[17] = io_hex6_expected_prev[17];
	end
	if (
		( io_hex6_expected_prev[18] !== 1'bx ) && ( io_hex6_prev[18] !== io_hex6_expected_prev[18] )
		&& ((io_hex6_expected_prev[18] !== last_io_hex6_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[18] = io_hex6_expected_prev[18];
	end
	if (
		( io_hex6_expected_prev[19] !== 1'bx ) && ( io_hex6_prev[19] !== io_hex6_expected_prev[19] )
		&& ((io_hex6_expected_prev[19] !== last_io_hex6_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[19] = io_hex6_expected_prev[19];
	end
	if (
		( io_hex6_expected_prev[20] !== 1'bx ) && ( io_hex6_prev[20] !== io_hex6_expected_prev[20] )
		&& ((io_hex6_expected_prev[20] !== last_io_hex6_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[20] = io_hex6_expected_prev[20];
	end
	if (
		( io_hex6_expected_prev[21] !== 1'bx ) && ( io_hex6_prev[21] !== io_hex6_expected_prev[21] )
		&& ((io_hex6_expected_prev[21] !== last_io_hex6_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[21] = io_hex6_expected_prev[21];
	end
	if (
		( io_hex6_expected_prev[22] !== 1'bx ) && ( io_hex6_prev[22] !== io_hex6_expected_prev[22] )
		&& ((io_hex6_expected_prev[22] !== last_io_hex6_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[22] = io_hex6_expected_prev[22];
	end
	if (
		( io_hex6_expected_prev[23] !== 1'bx ) && ( io_hex6_prev[23] !== io_hex6_expected_prev[23] )
		&& ((io_hex6_expected_prev[23] !== last_io_hex6_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[23] = io_hex6_expected_prev[23];
	end
	if (
		( io_hex6_expected_prev[24] !== 1'bx ) && ( io_hex6_prev[24] !== io_hex6_expected_prev[24] )
		&& ((io_hex6_expected_prev[24] !== last_io_hex6_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[24] = io_hex6_expected_prev[24];
	end
	if (
		( io_hex6_expected_prev[25] !== 1'bx ) && ( io_hex6_prev[25] !== io_hex6_expected_prev[25] )
		&& ((io_hex6_expected_prev[25] !== last_io_hex6_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[25] = io_hex6_expected_prev[25];
	end
	if (
		( io_hex6_expected_prev[26] !== 1'bx ) && ( io_hex6_prev[26] !== io_hex6_expected_prev[26] )
		&& ((io_hex6_expected_prev[26] !== last_io_hex6_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[26] = io_hex6_expected_prev[26];
	end
	if (
		( io_hex6_expected_prev[27] !== 1'bx ) && ( io_hex6_prev[27] !== io_hex6_expected_prev[27] )
		&& ((io_hex6_expected_prev[27] !== last_io_hex6_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[27] = io_hex6_expected_prev[27];
	end
	if (
		( io_hex6_expected_prev[28] !== 1'bx ) && ( io_hex6_prev[28] !== io_hex6_expected_prev[28] )
		&& ((io_hex6_expected_prev[28] !== last_io_hex6_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[28] = io_hex6_expected_prev[28];
	end
	if (
		( io_hex6_expected_prev[29] !== 1'bx ) && ( io_hex6_prev[29] !== io_hex6_expected_prev[29] )
		&& ((io_hex6_expected_prev[29] !== last_io_hex6_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[29] = io_hex6_expected_prev[29];
	end
	if (
		( io_hex6_expected_prev[30] !== 1'bx ) && ( io_hex6_prev[30] !== io_hex6_expected_prev[30] )
		&& ((io_hex6_expected_prev[30] !== last_io_hex6_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[30] = io_hex6_expected_prev[30];
	end
	if (
		( io_hex6_expected_prev[31] !== 1'bx ) && ( io_hex6_prev[31] !== io_hex6_expected_prev[31] )
		&& ((io_hex6_expected_prev[31] !== last_io_hex6_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex6[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex6_expected_prev);
		$display ("     Real value = %b", io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_io_hex6_exp[31] = io_hex6_expected_prev[31];
	end
	if (
		( io_hex7_expected_prev[0] !== 1'bx ) && ( io_hex7_prev[0] !== io_hex7_expected_prev[0] )
		&& ((io_hex7_expected_prev[0] !== last_io_hex7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[0] = io_hex7_expected_prev[0];
	end
	if (
		( io_hex7_expected_prev[1] !== 1'bx ) && ( io_hex7_prev[1] !== io_hex7_expected_prev[1] )
		&& ((io_hex7_expected_prev[1] !== last_io_hex7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[1] = io_hex7_expected_prev[1];
	end
	if (
		( io_hex7_expected_prev[2] !== 1'bx ) && ( io_hex7_prev[2] !== io_hex7_expected_prev[2] )
		&& ((io_hex7_expected_prev[2] !== last_io_hex7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[2] = io_hex7_expected_prev[2];
	end
	if (
		( io_hex7_expected_prev[3] !== 1'bx ) && ( io_hex7_prev[3] !== io_hex7_expected_prev[3] )
		&& ((io_hex7_expected_prev[3] !== last_io_hex7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[3] = io_hex7_expected_prev[3];
	end
	if (
		( io_hex7_expected_prev[4] !== 1'bx ) && ( io_hex7_prev[4] !== io_hex7_expected_prev[4] )
		&& ((io_hex7_expected_prev[4] !== last_io_hex7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[4] = io_hex7_expected_prev[4];
	end
	if (
		( io_hex7_expected_prev[5] !== 1'bx ) && ( io_hex7_prev[5] !== io_hex7_expected_prev[5] )
		&& ((io_hex7_expected_prev[5] !== last_io_hex7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[5] = io_hex7_expected_prev[5];
	end
	if (
		( io_hex7_expected_prev[6] !== 1'bx ) && ( io_hex7_prev[6] !== io_hex7_expected_prev[6] )
		&& ((io_hex7_expected_prev[6] !== last_io_hex7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[6] = io_hex7_expected_prev[6];
	end
	if (
		( io_hex7_expected_prev[7] !== 1'bx ) && ( io_hex7_prev[7] !== io_hex7_expected_prev[7] )
		&& ((io_hex7_expected_prev[7] !== last_io_hex7_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[7] = io_hex7_expected_prev[7];
	end
	if (
		( io_hex7_expected_prev[8] !== 1'bx ) && ( io_hex7_prev[8] !== io_hex7_expected_prev[8] )
		&& ((io_hex7_expected_prev[8] !== last_io_hex7_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[8] = io_hex7_expected_prev[8];
	end
	if (
		( io_hex7_expected_prev[9] !== 1'bx ) && ( io_hex7_prev[9] !== io_hex7_expected_prev[9] )
		&& ((io_hex7_expected_prev[9] !== last_io_hex7_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[9] = io_hex7_expected_prev[9];
	end
	if (
		( io_hex7_expected_prev[10] !== 1'bx ) && ( io_hex7_prev[10] !== io_hex7_expected_prev[10] )
		&& ((io_hex7_expected_prev[10] !== last_io_hex7_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[10] = io_hex7_expected_prev[10];
	end
	if (
		( io_hex7_expected_prev[11] !== 1'bx ) && ( io_hex7_prev[11] !== io_hex7_expected_prev[11] )
		&& ((io_hex7_expected_prev[11] !== last_io_hex7_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[11] = io_hex7_expected_prev[11];
	end
	if (
		( io_hex7_expected_prev[12] !== 1'bx ) && ( io_hex7_prev[12] !== io_hex7_expected_prev[12] )
		&& ((io_hex7_expected_prev[12] !== last_io_hex7_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[12] = io_hex7_expected_prev[12];
	end
	if (
		( io_hex7_expected_prev[13] !== 1'bx ) && ( io_hex7_prev[13] !== io_hex7_expected_prev[13] )
		&& ((io_hex7_expected_prev[13] !== last_io_hex7_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[13] = io_hex7_expected_prev[13];
	end
	if (
		( io_hex7_expected_prev[14] !== 1'bx ) && ( io_hex7_prev[14] !== io_hex7_expected_prev[14] )
		&& ((io_hex7_expected_prev[14] !== last_io_hex7_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[14] = io_hex7_expected_prev[14];
	end
	if (
		( io_hex7_expected_prev[15] !== 1'bx ) && ( io_hex7_prev[15] !== io_hex7_expected_prev[15] )
		&& ((io_hex7_expected_prev[15] !== last_io_hex7_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[15] = io_hex7_expected_prev[15];
	end
	if (
		( io_hex7_expected_prev[16] !== 1'bx ) && ( io_hex7_prev[16] !== io_hex7_expected_prev[16] )
		&& ((io_hex7_expected_prev[16] !== last_io_hex7_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[16] = io_hex7_expected_prev[16];
	end
	if (
		( io_hex7_expected_prev[17] !== 1'bx ) && ( io_hex7_prev[17] !== io_hex7_expected_prev[17] )
		&& ((io_hex7_expected_prev[17] !== last_io_hex7_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[17] = io_hex7_expected_prev[17];
	end
	if (
		( io_hex7_expected_prev[18] !== 1'bx ) && ( io_hex7_prev[18] !== io_hex7_expected_prev[18] )
		&& ((io_hex7_expected_prev[18] !== last_io_hex7_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[18] = io_hex7_expected_prev[18];
	end
	if (
		( io_hex7_expected_prev[19] !== 1'bx ) && ( io_hex7_prev[19] !== io_hex7_expected_prev[19] )
		&& ((io_hex7_expected_prev[19] !== last_io_hex7_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[19] = io_hex7_expected_prev[19];
	end
	if (
		( io_hex7_expected_prev[20] !== 1'bx ) && ( io_hex7_prev[20] !== io_hex7_expected_prev[20] )
		&& ((io_hex7_expected_prev[20] !== last_io_hex7_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[20] = io_hex7_expected_prev[20];
	end
	if (
		( io_hex7_expected_prev[21] !== 1'bx ) && ( io_hex7_prev[21] !== io_hex7_expected_prev[21] )
		&& ((io_hex7_expected_prev[21] !== last_io_hex7_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[21] = io_hex7_expected_prev[21];
	end
	if (
		( io_hex7_expected_prev[22] !== 1'bx ) && ( io_hex7_prev[22] !== io_hex7_expected_prev[22] )
		&& ((io_hex7_expected_prev[22] !== last_io_hex7_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[22] = io_hex7_expected_prev[22];
	end
	if (
		( io_hex7_expected_prev[23] !== 1'bx ) && ( io_hex7_prev[23] !== io_hex7_expected_prev[23] )
		&& ((io_hex7_expected_prev[23] !== last_io_hex7_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[23] = io_hex7_expected_prev[23];
	end
	if (
		( io_hex7_expected_prev[24] !== 1'bx ) && ( io_hex7_prev[24] !== io_hex7_expected_prev[24] )
		&& ((io_hex7_expected_prev[24] !== last_io_hex7_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[24] = io_hex7_expected_prev[24];
	end
	if (
		( io_hex7_expected_prev[25] !== 1'bx ) && ( io_hex7_prev[25] !== io_hex7_expected_prev[25] )
		&& ((io_hex7_expected_prev[25] !== last_io_hex7_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[25] = io_hex7_expected_prev[25];
	end
	if (
		( io_hex7_expected_prev[26] !== 1'bx ) && ( io_hex7_prev[26] !== io_hex7_expected_prev[26] )
		&& ((io_hex7_expected_prev[26] !== last_io_hex7_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[26] = io_hex7_expected_prev[26];
	end
	if (
		( io_hex7_expected_prev[27] !== 1'bx ) && ( io_hex7_prev[27] !== io_hex7_expected_prev[27] )
		&& ((io_hex7_expected_prev[27] !== last_io_hex7_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[27] = io_hex7_expected_prev[27];
	end
	if (
		( io_hex7_expected_prev[28] !== 1'bx ) && ( io_hex7_prev[28] !== io_hex7_expected_prev[28] )
		&& ((io_hex7_expected_prev[28] !== last_io_hex7_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[28] = io_hex7_expected_prev[28];
	end
	if (
		( io_hex7_expected_prev[29] !== 1'bx ) && ( io_hex7_prev[29] !== io_hex7_expected_prev[29] )
		&& ((io_hex7_expected_prev[29] !== last_io_hex7_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[29] = io_hex7_expected_prev[29];
	end
	if (
		( io_hex7_expected_prev[30] !== 1'bx ) && ( io_hex7_prev[30] !== io_hex7_expected_prev[30] )
		&& ((io_hex7_expected_prev[30] !== last_io_hex7_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[30] = io_hex7_expected_prev[30];
	end
	if (
		( io_hex7_expected_prev[31] !== 1'bx ) && ( io_hex7_prev[31] !== io_hex7_expected_prev[31] )
		&& ((io_hex7_expected_prev[31] !== last_io_hex7_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_hex7[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_hex7_expected_prev);
		$display ("     Real value = %b", io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_io_hex7_exp[31] = io_hex7_expected_prev[31];
	end
	if (
		( io_lcd_expected_prev[0] !== 1'bx ) && ( io_lcd_prev[0] !== io_lcd_expected_prev[0] )
		&& ((io_lcd_expected_prev[0] !== last_io_lcd_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[0] = io_lcd_expected_prev[0];
	end
	if (
		( io_lcd_expected_prev[1] !== 1'bx ) && ( io_lcd_prev[1] !== io_lcd_expected_prev[1] )
		&& ((io_lcd_expected_prev[1] !== last_io_lcd_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[1] = io_lcd_expected_prev[1];
	end
	if (
		( io_lcd_expected_prev[2] !== 1'bx ) && ( io_lcd_prev[2] !== io_lcd_expected_prev[2] )
		&& ((io_lcd_expected_prev[2] !== last_io_lcd_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[2] = io_lcd_expected_prev[2];
	end
	if (
		( io_lcd_expected_prev[3] !== 1'bx ) && ( io_lcd_prev[3] !== io_lcd_expected_prev[3] )
		&& ((io_lcd_expected_prev[3] !== last_io_lcd_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[3] = io_lcd_expected_prev[3];
	end
	if (
		( io_lcd_expected_prev[4] !== 1'bx ) && ( io_lcd_prev[4] !== io_lcd_expected_prev[4] )
		&& ((io_lcd_expected_prev[4] !== last_io_lcd_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[4] = io_lcd_expected_prev[4];
	end
	if (
		( io_lcd_expected_prev[5] !== 1'bx ) && ( io_lcd_prev[5] !== io_lcd_expected_prev[5] )
		&& ((io_lcd_expected_prev[5] !== last_io_lcd_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[5] = io_lcd_expected_prev[5];
	end
	if (
		( io_lcd_expected_prev[6] !== 1'bx ) && ( io_lcd_prev[6] !== io_lcd_expected_prev[6] )
		&& ((io_lcd_expected_prev[6] !== last_io_lcd_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[6] = io_lcd_expected_prev[6];
	end
	if (
		( io_lcd_expected_prev[7] !== 1'bx ) && ( io_lcd_prev[7] !== io_lcd_expected_prev[7] )
		&& ((io_lcd_expected_prev[7] !== last_io_lcd_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[7] = io_lcd_expected_prev[7];
	end
	if (
		( io_lcd_expected_prev[8] !== 1'bx ) && ( io_lcd_prev[8] !== io_lcd_expected_prev[8] )
		&& ((io_lcd_expected_prev[8] !== last_io_lcd_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[8] = io_lcd_expected_prev[8];
	end
	if (
		( io_lcd_expected_prev[9] !== 1'bx ) && ( io_lcd_prev[9] !== io_lcd_expected_prev[9] )
		&& ((io_lcd_expected_prev[9] !== last_io_lcd_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[9] = io_lcd_expected_prev[9];
	end
	if (
		( io_lcd_expected_prev[10] !== 1'bx ) && ( io_lcd_prev[10] !== io_lcd_expected_prev[10] )
		&& ((io_lcd_expected_prev[10] !== last_io_lcd_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[10] = io_lcd_expected_prev[10];
	end
	if (
		( io_lcd_expected_prev[11] !== 1'bx ) && ( io_lcd_prev[11] !== io_lcd_expected_prev[11] )
		&& ((io_lcd_expected_prev[11] !== last_io_lcd_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[11] = io_lcd_expected_prev[11];
	end
	if (
		( io_lcd_expected_prev[12] !== 1'bx ) && ( io_lcd_prev[12] !== io_lcd_expected_prev[12] )
		&& ((io_lcd_expected_prev[12] !== last_io_lcd_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[12] = io_lcd_expected_prev[12];
	end
	if (
		( io_lcd_expected_prev[13] !== 1'bx ) && ( io_lcd_prev[13] !== io_lcd_expected_prev[13] )
		&& ((io_lcd_expected_prev[13] !== last_io_lcd_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[13] = io_lcd_expected_prev[13];
	end
	if (
		( io_lcd_expected_prev[14] !== 1'bx ) && ( io_lcd_prev[14] !== io_lcd_expected_prev[14] )
		&& ((io_lcd_expected_prev[14] !== last_io_lcd_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[14] = io_lcd_expected_prev[14];
	end
	if (
		( io_lcd_expected_prev[15] !== 1'bx ) && ( io_lcd_prev[15] !== io_lcd_expected_prev[15] )
		&& ((io_lcd_expected_prev[15] !== last_io_lcd_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[15] = io_lcd_expected_prev[15];
	end
	if (
		( io_lcd_expected_prev[16] !== 1'bx ) && ( io_lcd_prev[16] !== io_lcd_expected_prev[16] )
		&& ((io_lcd_expected_prev[16] !== last_io_lcd_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[16] = io_lcd_expected_prev[16];
	end
	if (
		( io_lcd_expected_prev[17] !== 1'bx ) && ( io_lcd_prev[17] !== io_lcd_expected_prev[17] )
		&& ((io_lcd_expected_prev[17] !== last_io_lcd_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[17] = io_lcd_expected_prev[17];
	end
	if (
		( io_lcd_expected_prev[18] !== 1'bx ) && ( io_lcd_prev[18] !== io_lcd_expected_prev[18] )
		&& ((io_lcd_expected_prev[18] !== last_io_lcd_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[18] = io_lcd_expected_prev[18];
	end
	if (
		( io_lcd_expected_prev[19] !== 1'bx ) && ( io_lcd_prev[19] !== io_lcd_expected_prev[19] )
		&& ((io_lcd_expected_prev[19] !== last_io_lcd_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[19] = io_lcd_expected_prev[19];
	end
	if (
		( io_lcd_expected_prev[20] !== 1'bx ) && ( io_lcd_prev[20] !== io_lcd_expected_prev[20] )
		&& ((io_lcd_expected_prev[20] !== last_io_lcd_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[20] = io_lcd_expected_prev[20];
	end
	if (
		( io_lcd_expected_prev[21] !== 1'bx ) && ( io_lcd_prev[21] !== io_lcd_expected_prev[21] )
		&& ((io_lcd_expected_prev[21] !== last_io_lcd_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[21] = io_lcd_expected_prev[21];
	end
	if (
		( io_lcd_expected_prev[22] !== 1'bx ) && ( io_lcd_prev[22] !== io_lcd_expected_prev[22] )
		&& ((io_lcd_expected_prev[22] !== last_io_lcd_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[22] = io_lcd_expected_prev[22];
	end
	if (
		( io_lcd_expected_prev[23] !== 1'bx ) && ( io_lcd_prev[23] !== io_lcd_expected_prev[23] )
		&& ((io_lcd_expected_prev[23] !== last_io_lcd_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[23] = io_lcd_expected_prev[23];
	end
	if (
		( io_lcd_expected_prev[24] !== 1'bx ) && ( io_lcd_prev[24] !== io_lcd_expected_prev[24] )
		&& ((io_lcd_expected_prev[24] !== last_io_lcd_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[24] = io_lcd_expected_prev[24];
	end
	if (
		( io_lcd_expected_prev[25] !== 1'bx ) && ( io_lcd_prev[25] !== io_lcd_expected_prev[25] )
		&& ((io_lcd_expected_prev[25] !== last_io_lcd_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[25] = io_lcd_expected_prev[25];
	end
	if (
		( io_lcd_expected_prev[26] !== 1'bx ) && ( io_lcd_prev[26] !== io_lcd_expected_prev[26] )
		&& ((io_lcd_expected_prev[26] !== last_io_lcd_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[26] = io_lcd_expected_prev[26];
	end
	if (
		( io_lcd_expected_prev[27] !== 1'bx ) && ( io_lcd_prev[27] !== io_lcd_expected_prev[27] )
		&& ((io_lcd_expected_prev[27] !== last_io_lcd_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[27] = io_lcd_expected_prev[27];
	end
	if (
		( io_lcd_expected_prev[28] !== 1'bx ) && ( io_lcd_prev[28] !== io_lcd_expected_prev[28] )
		&& ((io_lcd_expected_prev[28] !== last_io_lcd_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[28] = io_lcd_expected_prev[28];
	end
	if (
		( io_lcd_expected_prev[29] !== 1'bx ) && ( io_lcd_prev[29] !== io_lcd_expected_prev[29] )
		&& ((io_lcd_expected_prev[29] !== last_io_lcd_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[29] = io_lcd_expected_prev[29];
	end
	if (
		( io_lcd_expected_prev[30] !== 1'bx ) && ( io_lcd_prev[30] !== io_lcd_expected_prev[30] )
		&& ((io_lcd_expected_prev[30] !== last_io_lcd_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[30] = io_lcd_expected_prev[30];
	end
	if (
		( io_lcd_expected_prev[31] !== 1'bx ) && ( io_lcd_prev[31] !== io_lcd_expected_prev[31] )
		&& ((io_lcd_expected_prev[31] !== last_io_lcd_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_lcd[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_lcd_expected_prev);
		$display ("     Real value = %b", io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_io_lcd_exp[31] = io_lcd_expected_prev[31];
	end
	if (
		( io_ledg_expected_prev[0] !== 1'bx ) && ( io_ledg_prev[0] !== io_ledg_expected_prev[0] )
		&& ((io_ledg_expected_prev[0] !== last_io_ledg_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[0] = io_ledg_expected_prev[0];
	end
	if (
		( io_ledg_expected_prev[1] !== 1'bx ) && ( io_ledg_prev[1] !== io_ledg_expected_prev[1] )
		&& ((io_ledg_expected_prev[1] !== last_io_ledg_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[1] = io_ledg_expected_prev[1];
	end
	if (
		( io_ledg_expected_prev[2] !== 1'bx ) && ( io_ledg_prev[2] !== io_ledg_expected_prev[2] )
		&& ((io_ledg_expected_prev[2] !== last_io_ledg_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[2] = io_ledg_expected_prev[2];
	end
	if (
		( io_ledg_expected_prev[3] !== 1'bx ) && ( io_ledg_prev[3] !== io_ledg_expected_prev[3] )
		&& ((io_ledg_expected_prev[3] !== last_io_ledg_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[3] = io_ledg_expected_prev[3];
	end
	if (
		( io_ledg_expected_prev[4] !== 1'bx ) && ( io_ledg_prev[4] !== io_ledg_expected_prev[4] )
		&& ((io_ledg_expected_prev[4] !== last_io_ledg_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[4] = io_ledg_expected_prev[4];
	end
	if (
		( io_ledg_expected_prev[5] !== 1'bx ) && ( io_ledg_prev[5] !== io_ledg_expected_prev[5] )
		&& ((io_ledg_expected_prev[5] !== last_io_ledg_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[5] = io_ledg_expected_prev[5];
	end
	if (
		( io_ledg_expected_prev[6] !== 1'bx ) && ( io_ledg_prev[6] !== io_ledg_expected_prev[6] )
		&& ((io_ledg_expected_prev[6] !== last_io_ledg_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[6] = io_ledg_expected_prev[6];
	end
	if (
		( io_ledg_expected_prev[7] !== 1'bx ) && ( io_ledg_prev[7] !== io_ledg_expected_prev[7] )
		&& ((io_ledg_expected_prev[7] !== last_io_ledg_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[7] = io_ledg_expected_prev[7];
	end
	if (
		( io_ledg_expected_prev[8] !== 1'bx ) && ( io_ledg_prev[8] !== io_ledg_expected_prev[8] )
		&& ((io_ledg_expected_prev[8] !== last_io_ledg_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[8] = io_ledg_expected_prev[8];
	end
	if (
		( io_ledg_expected_prev[9] !== 1'bx ) && ( io_ledg_prev[9] !== io_ledg_expected_prev[9] )
		&& ((io_ledg_expected_prev[9] !== last_io_ledg_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[9] = io_ledg_expected_prev[9];
	end
	if (
		( io_ledg_expected_prev[10] !== 1'bx ) && ( io_ledg_prev[10] !== io_ledg_expected_prev[10] )
		&& ((io_ledg_expected_prev[10] !== last_io_ledg_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[10] = io_ledg_expected_prev[10];
	end
	if (
		( io_ledg_expected_prev[11] !== 1'bx ) && ( io_ledg_prev[11] !== io_ledg_expected_prev[11] )
		&& ((io_ledg_expected_prev[11] !== last_io_ledg_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[11] = io_ledg_expected_prev[11];
	end
	if (
		( io_ledg_expected_prev[12] !== 1'bx ) && ( io_ledg_prev[12] !== io_ledg_expected_prev[12] )
		&& ((io_ledg_expected_prev[12] !== last_io_ledg_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[12] = io_ledg_expected_prev[12];
	end
	if (
		( io_ledg_expected_prev[13] !== 1'bx ) && ( io_ledg_prev[13] !== io_ledg_expected_prev[13] )
		&& ((io_ledg_expected_prev[13] !== last_io_ledg_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[13] = io_ledg_expected_prev[13];
	end
	if (
		( io_ledg_expected_prev[14] !== 1'bx ) && ( io_ledg_prev[14] !== io_ledg_expected_prev[14] )
		&& ((io_ledg_expected_prev[14] !== last_io_ledg_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[14] = io_ledg_expected_prev[14];
	end
	if (
		( io_ledg_expected_prev[15] !== 1'bx ) && ( io_ledg_prev[15] !== io_ledg_expected_prev[15] )
		&& ((io_ledg_expected_prev[15] !== last_io_ledg_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[15] = io_ledg_expected_prev[15];
	end
	if (
		( io_ledg_expected_prev[16] !== 1'bx ) && ( io_ledg_prev[16] !== io_ledg_expected_prev[16] )
		&& ((io_ledg_expected_prev[16] !== last_io_ledg_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[16] = io_ledg_expected_prev[16];
	end
	if (
		( io_ledg_expected_prev[17] !== 1'bx ) && ( io_ledg_prev[17] !== io_ledg_expected_prev[17] )
		&& ((io_ledg_expected_prev[17] !== last_io_ledg_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[17] = io_ledg_expected_prev[17];
	end
	if (
		( io_ledg_expected_prev[18] !== 1'bx ) && ( io_ledg_prev[18] !== io_ledg_expected_prev[18] )
		&& ((io_ledg_expected_prev[18] !== last_io_ledg_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[18] = io_ledg_expected_prev[18];
	end
	if (
		( io_ledg_expected_prev[19] !== 1'bx ) && ( io_ledg_prev[19] !== io_ledg_expected_prev[19] )
		&& ((io_ledg_expected_prev[19] !== last_io_ledg_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[19] = io_ledg_expected_prev[19];
	end
	if (
		( io_ledg_expected_prev[20] !== 1'bx ) && ( io_ledg_prev[20] !== io_ledg_expected_prev[20] )
		&& ((io_ledg_expected_prev[20] !== last_io_ledg_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[20] = io_ledg_expected_prev[20];
	end
	if (
		( io_ledg_expected_prev[21] !== 1'bx ) && ( io_ledg_prev[21] !== io_ledg_expected_prev[21] )
		&& ((io_ledg_expected_prev[21] !== last_io_ledg_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[21] = io_ledg_expected_prev[21];
	end
	if (
		( io_ledg_expected_prev[22] !== 1'bx ) && ( io_ledg_prev[22] !== io_ledg_expected_prev[22] )
		&& ((io_ledg_expected_prev[22] !== last_io_ledg_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[22] = io_ledg_expected_prev[22];
	end
	if (
		( io_ledg_expected_prev[23] !== 1'bx ) && ( io_ledg_prev[23] !== io_ledg_expected_prev[23] )
		&& ((io_ledg_expected_prev[23] !== last_io_ledg_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[23] = io_ledg_expected_prev[23];
	end
	if (
		( io_ledg_expected_prev[24] !== 1'bx ) && ( io_ledg_prev[24] !== io_ledg_expected_prev[24] )
		&& ((io_ledg_expected_prev[24] !== last_io_ledg_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[24] = io_ledg_expected_prev[24];
	end
	if (
		( io_ledg_expected_prev[25] !== 1'bx ) && ( io_ledg_prev[25] !== io_ledg_expected_prev[25] )
		&& ((io_ledg_expected_prev[25] !== last_io_ledg_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[25] = io_ledg_expected_prev[25];
	end
	if (
		( io_ledg_expected_prev[26] !== 1'bx ) && ( io_ledg_prev[26] !== io_ledg_expected_prev[26] )
		&& ((io_ledg_expected_prev[26] !== last_io_ledg_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[26] = io_ledg_expected_prev[26];
	end
	if (
		( io_ledg_expected_prev[27] !== 1'bx ) && ( io_ledg_prev[27] !== io_ledg_expected_prev[27] )
		&& ((io_ledg_expected_prev[27] !== last_io_ledg_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[27] = io_ledg_expected_prev[27];
	end
	if (
		( io_ledg_expected_prev[28] !== 1'bx ) && ( io_ledg_prev[28] !== io_ledg_expected_prev[28] )
		&& ((io_ledg_expected_prev[28] !== last_io_ledg_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[28] = io_ledg_expected_prev[28];
	end
	if (
		( io_ledg_expected_prev[29] !== 1'bx ) && ( io_ledg_prev[29] !== io_ledg_expected_prev[29] )
		&& ((io_ledg_expected_prev[29] !== last_io_ledg_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[29] = io_ledg_expected_prev[29];
	end
	if (
		( io_ledg_expected_prev[30] !== 1'bx ) && ( io_ledg_prev[30] !== io_ledg_expected_prev[30] )
		&& ((io_ledg_expected_prev[30] !== last_io_ledg_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[30] = io_ledg_expected_prev[30];
	end
	if (
		( io_ledg_expected_prev[31] !== 1'bx ) && ( io_ledg_prev[31] !== io_ledg_expected_prev[31] )
		&& ((io_ledg_expected_prev[31] !== last_io_ledg_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledg[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledg_expected_prev);
		$display ("     Real value = %b", io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_io_ledg_exp[31] = io_ledg_expected_prev[31];
	end
	if (
		( io_ledr_expected_prev[0] !== 1'bx ) && ( io_ledr_prev[0] !== io_ledr_expected_prev[0] )
		&& ((io_ledr_expected_prev[0] !== last_io_ledr_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[0] = io_ledr_expected_prev[0];
	end
	if (
		( io_ledr_expected_prev[1] !== 1'bx ) && ( io_ledr_prev[1] !== io_ledr_expected_prev[1] )
		&& ((io_ledr_expected_prev[1] !== last_io_ledr_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[1] = io_ledr_expected_prev[1];
	end
	if (
		( io_ledr_expected_prev[2] !== 1'bx ) && ( io_ledr_prev[2] !== io_ledr_expected_prev[2] )
		&& ((io_ledr_expected_prev[2] !== last_io_ledr_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[2] = io_ledr_expected_prev[2];
	end
	if (
		( io_ledr_expected_prev[3] !== 1'bx ) && ( io_ledr_prev[3] !== io_ledr_expected_prev[3] )
		&& ((io_ledr_expected_prev[3] !== last_io_ledr_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[3] = io_ledr_expected_prev[3];
	end
	if (
		( io_ledr_expected_prev[4] !== 1'bx ) && ( io_ledr_prev[4] !== io_ledr_expected_prev[4] )
		&& ((io_ledr_expected_prev[4] !== last_io_ledr_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[4] = io_ledr_expected_prev[4];
	end
	if (
		( io_ledr_expected_prev[5] !== 1'bx ) && ( io_ledr_prev[5] !== io_ledr_expected_prev[5] )
		&& ((io_ledr_expected_prev[5] !== last_io_ledr_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[5] = io_ledr_expected_prev[5];
	end
	if (
		( io_ledr_expected_prev[6] !== 1'bx ) && ( io_ledr_prev[6] !== io_ledr_expected_prev[6] )
		&& ((io_ledr_expected_prev[6] !== last_io_ledr_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[6] = io_ledr_expected_prev[6];
	end
	if (
		( io_ledr_expected_prev[7] !== 1'bx ) && ( io_ledr_prev[7] !== io_ledr_expected_prev[7] )
		&& ((io_ledr_expected_prev[7] !== last_io_ledr_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[7] = io_ledr_expected_prev[7];
	end
	if (
		( io_ledr_expected_prev[8] !== 1'bx ) && ( io_ledr_prev[8] !== io_ledr_expected_prev[8] )
		&& ((io_ledr_expected_prev[8] !== last_io_ledr_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[8] = io_ledr_expected_prev[8];
	end
	if (
		( io_ledr_expected_prev[9] !== 1'bx ) && ( io_ledr_prev[9] !== io_ledr_expected_prev[9] )
		&& ((io_ledr_expected_prev[9] !== last_io_ledr_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[9] = io_ledr_expected_prev[9];
	end
	if (
		( io_ledr_expected_prev[10] !== 1'bx ) && ( io_ledr_prev[10] !== io_ledr_expected_prev[10] )
		&& ((io_ledr_expected_prev[10] !== last_io_ledr_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[10] = io_ledr_expected_prev[10];
	end
	if (
		( io_ledr_expected_prev[11] !== 1'bx ) && ( io_ledr_prev[11] !== io_ledr_expected_prev[11] )
		&& ((io_ledr_expected_prev[11] !== last_io_ledr_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[11] = io_ledr_expected_prev[11];
	end
	if (
		( io_ledr_expected_prev[12] !== 1'bx ) && ( io_ledr_prev[12] !== io_ledr_expected_prev[12] )
		&& ((io_ledr_expected_prev[12] !== last_io_ledr_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[12] = io_ledr_expected_prev[12];
	end
	if (
		( io_ledr_expected_prev[13] !== 1'bx ) && ( io_ledr_prev[13] !== io_ledr_expected_prev[13] )
		&& ((io_ledr_expected_prev[13] !== last_io_ledr_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[13] = io_ledr_expected_prev[13];
	end
	if (
		( io_ledr_expected_prev[14] !== 1'bx ) && ( io_ledr_prev[14] !== io_ledr_expected_prev[14] )
		&& ((io_ledr_expected_prev[14] !== last_io_ledr_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[14] = io_ledr_expected_prev[14];
	end
	if (
		( io_ledr_expected_prev[15] !== 1'bx ) && ( io_ledr_prev[15] !== io_ledr_expected_prev[15] )
		&& ((io_ledr_expected_prev[15] !== last_io_ledr_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[15] = io_ledr_expected_prev[15];
	end
	if (
		( io_ledr_expected_prev[16] !== 1'bx ) && ( io_ledr_prev[16] !== io_ledr_expected_prev[16] )
		&& ((io_ledr_expected_prev[16] !== last_io_ledr_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[16] = io_ledr_expected_prev[16];
	end
	if (
		( io_ledr_expected_prev[17] !== 1'bx ) && ( io_ledr_prev[17] !== io_ledr_expected_prev[17] )
		&& ((io_ledr_expected_prev[17] !== last_io_ledr_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[17] = io_ledr_expected_prev[17];
	end
	if (
		( io_ledr_expected_prev[18] !== 1'bx ) && ( io_ledr_prev[18] !== io_ledr_expected_prev[18] )
		&& ((io_ledr_expected_prev[18] !== last_io_ledr_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[18] = io_ledr_expected_prev[18];
	end
	if (
		( io_ledr_expected_prev[19] !== 1'bx ) && ( io_ledr_prev[19] !== io_ledr_expected_prev[19] )
		&& ((io_ledr_expected_prev[19] !== last_io_ledr_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[19] = io_ledr_expected_prev[19];
	end
	if (
		( io_ledr_expected_prev[20] !== 1'bx ) && ( io_ledr_prev[20] !== io_ledr_expected_prev[20] )
		&& ((io_ledr_expected_prev[20] !== last_io_ledr_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[20] = io_ledr_expected_prev[20];
	end
	if (
		( io_ledr_expected_prev[21] !== 1'bx ) && ( io_ledr_prev[21] !== io_ledr_expected_prev[21] )
		&& ((io_ledr_expected_prev[21] !== last_io_ledr_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[21] = io_ledr_expected_prev[21];
	end
	if (
		( io_ledr_expected_prev[22] !== 1'bx ) && ( io_ledr_prev[22] !== io_ledr_expected_prev[22] )
		&& ((io_ledr_expected_prev[22] !== last_io_ledr_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[22] = io_ledr_expected_prev[22];
	end
	if (
		( io_ledr_expected_prev[23] !== 1'bx ) && ( io_ledr_prev[23] !== io_ledr_expected_prev[23] )
		&& ((io_ledr_expected_prev[23] !== last_io_ledr_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[23] = io_ledr_expected_prev[23];
	end
	if (
		( io_ledr_expected_prev[24] !== 1'bx ) && ( io_ledr_prev[24] !== io_ledr_expected_prev[24] )
		&& ((io_ledr_expected_prev[24] !== last_io_ledr_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[24] = io_ledr_expected_prev[24];
	end
	if (
		( io_ledr_expected_prev[25] !== 1'bx ) && ( io_ledr_prev[25] !== io_ledr_expected_prev[25] )
		&& ((io_ledr_expected_prev[25] !== last_io_ledr_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[25] = io_ledr_expected_prev[25];
	end
	if (
		( io_ledr_expected_prev[26] !== 1'bx ) && ( io_ledr_prev[26] !== io_ledr_expected_prev[26] )
		&& ((io_ledr_expected_prev[26] !== last_io_ledr_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[26] = io_ledr_expected_prev[26];
	end
	if (
		( io_ledr_expected_prev[27] !== 1'bx ) && ( io_ledr_prev[27] !== io_ledr_expected_prev[27] )
		&& ((io_ledr_expected_prev[27] !== last_io_ledr_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[27] = io_ledr_expected_prev[27];
	end
	if (
		( io_ledr_expected_prev[28] !== 1'bx ) && ( io_ledr_prev[28] !== io_ledr_expected_prev[28] )
		&& ((io_ledr_expected_prev[28] !== last_io_ledr_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[28] = io_ledr_expected_prev[28];
	end
	if (
		( io_ledr_expected_prev[29] !== 1'bx ) && ( io_ledr_prev[29] !== io_ledr_expected_prev[29] )
		&& ((io_ledr_expected_prev[29] !== last_io_ledr_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[29] = io_ledr_expected_prev[29];
	end
	if (
		( io_ledr_expected_prev[30] !== 1'bx ) && ( io_ledr_prev[30] !== io_ledr_expected_prev[30] )
		&& ((io_ledr_expected_prev[30] !== last_io_ledr_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[30] = io_ledr_expected_prev[30];
	end
	if (
		( io_ledr_expected_prev[31] !== 1'bx ) && ( io_ledr_prev[31] !== io_ledr_expected_prev[31] )
		&& ((io_ledr_expected_prev[31] !== last_io_ledr_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io_ledr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_ledr_expected_prev);
		$display ("     Real value = %b", io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_io_ledr_exp[31] = io_ledr_expected_prev[31];
	end
	if (
		( ld_data_expected_prev[0] !== 1'bx ) && ( ld_data_prev[0] !== ld_data_expected_prev[0] )
		&& ((ld_data_expected_prev[0] !== last_ld_data_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[0] = ld_data_expected_prev[0];
	end
	if (
		( ld_data_expected_prev[1] !== 1'bx ) && ( ld_data_prev[1] !== ld_data_expected_prev[1] )
		&& ((ld_data_expected_prev[1] !== last_ld_data_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[1] = ld_data_expected_prev[1];
	end
	if (
		( ld_data_expected_prev[2] !== 1'bx ) && ( ld_data_prev[2] !== ld_data_expected_prev[2] )
		&& ((ld_data_expected_prev[2] !== last_ld_data_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[2] = ld_data_expected_prev[2];
	end
	if (
		( ld_data_expected_prev[3] !== 1'bx ) && ( ld_data_prev[3] !== ld_data_expected_prev[3] )
		&& ((ld_data_expected_prev[3] !== last_ld_data_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[3] = ld_data_expected_prev[3];
	end
	if (
		( ld_data_expected_prev[4] !== 1'bx ) && ( ld_data_prev[4] !== ld_data_expected_prev[4] )
		&& ((ld_data_expected_prev[4] !== last_ld_data_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[4] = ld_data_expected_prev[4];
	end
	if (
		( ld_data_expected_prev[5] !== 1'bx ) && ( ld_data_prev[5] !== ld_data_expected_prev[5] )
		&& ((ld_data_expected_prev[5] !== last_ld_data_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[5] = ld_data_expected_prev[5];
	end
	if (
		( ld_data_expected_prev[6] !== 1'bx ) && ( ld_data_prev[6] !== ld_data_expected_prev[6] )
		&& ((ld_data_expected_prev[6] !== last_ld_data_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[6] = ld_data_expected_prev[6];
	end
	if (
		( ld_data_expected_prev[7] !== 1'bx ) && ( ld_data_prev[7] !== ld_data_expected_prev[7] )
		&& ((ld_data_expected_prev[7] !== last_ld_data_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[7] = ld_data_expected_prev[7];
	end
	if (
		( ld_data_expected_prev[8] !== 1'bx ) && ( ld_data_prev[8] !== ld_data_expected_prev[8] )
		&& ((ld_data_expected_prev[8] !== last_ld_data_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[8] = ld_data_expected_prev[8];
	end
	if (
		( ld_data_expected_prev[9] !== 1'bx ) && ( ld_data_prev[9] !== ld_data_expected_prev[9] )
		&& ((ld_data_expected_prev[9] !== last_ld_data_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[9] = ld_data_expected_prev[9];
	end
	if (
		( ld_data_expected_prev[10] !== 1'bx ) && ( ld_data_prev[10] !== ld_data_expected_prev[10] )
		&& ((ld_data_expected_prev[10] !== last_ld_data_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[10] = ld_data_expected_prev[10];
	end
	if (
		( ld_data_expected_prev[11] !== 1'bx ) && ( ld_data_prev[11] !== ld_data_expected_prev[11] )
		&& ((ld_data_expected_prev[11] !== last_ld_data_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[11] = ld_data_expected_prev[11];
	end
	if (
		( ld_data_expected_prev[12] !== 1'bx ) && ( ld_data_prev[12] !== ld_data_expected_prev[12] )
		&& ((ld_data_expected_prev[12] !== last_ld_data_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[12] = ld_data_expected_prev[12];
	end
	if (
		( ld_data_expected_prev[13] !== 1'bx ) && ( ld_data_prev[13] !== ld_data_expected_prev[13] )
		&& ((ld_data_expected_prev[13] !== last_ld_data_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[13] = ld_data_expected_prev[13];
	end
	if (
		( ld_data_expected_prev[14] !== 1'bx ) && ( ld_data_prev[14] !== ld_data_expected_prev[14] )
		&& ((ld_data_expected_prev[14] !== last_ld_data_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[14] = ld_data_expected_prev[14];
	end
	if (
		( ld_data_expected_prev[15] !== 1'bx ) && ( ld_data_prev[15] !== ld_data_expected_prev[15] )
		&& ((ld_data_expected_prev[15] !== last_ld_data_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[15] = ld_data_expected_prev[15];
	end
	if (
		( ld_data_expected_prev[16] !== 1'bx ) && ( ld_data_prev[16] !== ld_data_expected_prev[16] )
		&& ((ld_data_expected_prev[16] !== last_ld_data_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[16] = ld_data_expected_prev[16];
	end
	if (
		( ld_data_expected_prev[17] !== 1'bx ) && ( ld_data_prev[17] !== ld_data_expected_prev[17] )
		&& ((ld_data_expected_prev[17] !== last_ld_data_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[17] = ld_data_expected_prev[17];
	end
	if (
		( ld_data_expected_prev[18] !== 1'bx ) && ( ld_data_prev[18] !== ld_data_expected_prev[18] )
		&& ((ld_data_expected_prev[18] !== last_ld_data_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[18] = ld_data_expected_prev[18];
	end
	if (
		( ld_data_expected_prev[19] !== 1'bx ) && ( ld_data_prev[19] !== ld_data_expected_prev[19] )
		&& ((ld_data_expected_prev[19] !== last_ld_data_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[19] = ld_data_expected_prev[19];
	end
	if (
		( ld_data_expected_prev[20] !== 1'bx ) && ( ld_data_prev[20] !== ld_data_expected_prev[20] )
		&& ((ld_data_expected_prev[20] !== last_ld_data_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[20] = ld_data_expected_prev[20];
	end
	if (
		( ld_data_expected_prev[21] !== 1'bx ) && ( ld_data_prev[21] !== ld_data_expected_prev[21] )
		&& ((ld_data_expected_prev[21] !== last_ld_data_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[21] = ld_data_expected_prev[21];
	end
	if (
		( ld_data_expected_prev[22] !== 1'bx ) && ( ld_data_prev[22] !== ld_data_expected_prev[22] )
		&& ((ld_data_expected_prev[22] !== last_ld_data_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[22] = ld_data_expected_prev[22];
	end
	if (
		( ld_data_expected_prev[23] !== 1'bx ) && ( ld_data_prev[23] !== ld_data_expected_prev[23] )
		&& ((ld_data_expected_prev[23] !== last_ld_data_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[23] = ld_data_expected_prev[23];
	end
	if (
		( ld_data_expected_prev[24] !== 1'bx ) && ( ld_data_prev[24] !== ld_data_expected_prev[24] )
		&& ((ld_data_expected_prev[24] !== last_ld_data_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[24] = ld_data_expected_prev[24];
	end
	if (
		( ld_data_expected_prev[25] !== 1'bx ) && ( ld_data_prev[25] !== ld_data_expected_prev[25] )
		&& ((ld_data_expected_prev[25] !== last_ld_data_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[25] = ld_data_expected_prev[25];
	end
	if (
		( ld_data_expected_prev[26] !== 1'bx ) && ( ld_data_prev[26] !== ld_data_expected_prev[26] )
		&& ((ld_data_expected_prev[26] !== last_ld_data_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[26] = ld_data_expected_prev[26];
	end
	if (
		( ld_data_expected_prev[27] !== 1'bx ) && ( ld_data_prev[27] !== ld_data_expected_prev[27] )
		&& ((ld_data_expected_prev[27] !== last_ld_data_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[27] = ld_data_expected_prev[27];
	end
	if (
		( ld_data_expected_prev[28] !== 1'bx ) && ( ld_data_prev[28] !== ld_data_expected_prev[28] )
		&& ((ld_data_expected_prev[28] !== last_ld_data_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[28] = ld_data_expected_prev[28];
	end
	if (
		( ld_data_expected_prev[29] !== 1'bx ) && ( ld_data_prev[29] !== ld_data_expected_prev[29] )
		&& ((ld_data_expected_prev[29] !== last_ld_data_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[29] = ld_data_expected_prev[29];
	end
	if (
		( ld_data_expected_prev[30] !== 1'bx ) && ( ld_data_prev[30] !== ld_data_expected_prev[30] )
		&& ((ld_data_expected_prev[30] !== last_ld_data_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[30] = ld_data_expected_prev[30];
	end
	if (
		( ld_data_expected_prev[31] !== 1'bx ) && ( ld_data_prev[31] !== ld_data_expected_prev[31] )
		&& ((ld_data_expected_prev[31] !== last_ld_data_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_data[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_data_expected_prev);
		$display ("     Real value = %b", ld_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ld_data_exp[31] = ld_data_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lsu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] addr;
reg clk_i;
reg [31:0] io_sw;
reg rst_ni;
reg [31:0] st_data;
reg st_en;
// wires                                               
wire [31:0] io_hex0;
wire [31:0] io_hex1;
wire [31:0] io_hex2;
wire [31:0] io_hex3;
wire [31:0] io_hex4;
wire [31:0] io_hex5;
wire [31:0] io_hex6;
wire [31:0] io_hex7;
wire [31:0] io_lcd;
wire [31:0] io_ledg;
wire [31:0] io_ledr;
wire [31:0] ld_data;

wire sampler;                             

// assign statements (if any)                          
lsu i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk_i(clk_i),
	.io_hex0(io_hex0),
	.io_hex1(io_hex1),
	.io_hex2(io_hex2),
	.io_hex3(io_hex3),
	.io_hex4(io_hex4),
	.io_hex5(io_hex5),
	.io_hex6(io_hex6),
	.io_hex7(io_hex7),
	.io_lcd(io_lcd),
	.io_ledg(io_ledg),
	.io_ledr(io_ledr),
	.io_sw(io_sw),
	.ld_data(ld_data),
	.rst_ni(rst_ni),
	.st_data(st_data),
	.st_en(st_en)
);

// clk_i
initial
begin
	repeat(8)
	begin
		clk_i = 1'b0;
		clk_i = #60000 1'b1;
		# 60000;
	end
	clk_i = 1'b0;
end 

// rst_ni
initial
begin
	rst_ni = 1'b1;
end 

// st_en
initial
begin
	st_en = 1'b1;
	st_en = #120000 1'b0;
end 
// addr[ 11 ]
initial
begin
	addr[11] = 1'b1;
end 
// addr[ 10 ]
initial
begin
	addr[10] = 1'b0;
end 
// addr[ 9 ]
initial
begin
	addr[9] = 1'b0;
end 
// addr[ 8 ]
initial
begin
	addr[8] = 1'b0;
end 
// addr[ 7 ]
initial
begin
	addr[7] = 1'b0;
	addr[7] = #960000 1'b1;
end 
// addr[ 6 ]
initial
begin
	addr[6] = 1'b0;
	addr[6] = #480000 1'b1;
	addr[6] = #480000 1'b0;
end 
// addr[ 5 ]
initial
begin
	repeat(2)
	begin
		addr[5] = 1'b0;
		addr[5] = #240000 1'b1;
		# 240000;
	end
	addr[5] = 1'b0;
end 
// addr[ 4 ]
initial
begin
	repeat(4)
	begin
		addr[4] = 1'b0;
		addr[4] = #120000 1'b1;
		# 120000;
	end
	addr[4] = 1'b0;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b0;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b0;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b0;
end 
// addr[ 0 ]
initial
begin
	addr[0] = 1'b0;
end 
// st_data[ 31 ]
initial
begin
	st_data[31] = 1'b0;
end 
// st_data[ 30 ]
initial
begin
	st_data[30] = 1'b0;
end 
// st_data[ 29 ]
initial
begin
	st_data[29] = 1'b0;
end 
// st_data[ 28 ]
initial
begin
	st_data[28] = 1'b1;
end 
// st_data[ 27 ]
initial
begin
	st_data[27] = 1'b0;
end 
// st_data[ 26 ]
initial
begin
	st_data[26] = 1'b0;
end 
// st_data[ 25 ]
initial
begin
	st_data[25] = 1'b1;
end 
// st_data[ 24 ]
initial
begin
	st_data[24] = 1'b0;
end 
// st_data[ 23 ]
initial
begin
	st_data[23] = 1'b0;
end 
// st_data[ 22 ]
initial
begin
	st_data[22] = 1'b0;
end 
// st_data[ 21 ]
initial
begin
	st_data[21] = 1'b1;
end 
// st_data[ 20 ]
initial
begin
	st_data[20] = 1'b1;
end 
// st_data[ 19 ]
initial
begin
	st_data[19] = 1'b0;
end 
// st_data[ 18 ]
initial
begin
	st_data[18] = 1'b1;
end 
// st_data[ 17 ]
initial
begin
	st_data[17] = 1'b0;
end 
// st_data[ 16 ]
initial
begin
	st_data[16] = 1'b0;
end 
// st_data[ 15 ]
initial
begin
	st_data[15] = 1'b0;
end 
// st_data[ 14 ]
initial
begin
	st_data[14] = 1'b1;
end 
// st_data[ 13 ]
initial
begin
	st_data[13] = 1'b0;
end 
// st_data[ 12 ]
initial
begin
	st_data[12] = 1'b1;
end 
// st_data[ 11 ]
initial
begin
	st_data[11] = 1'b0;
end 
// st_data[ 10 ]
initial
begin
	st_data[10] = 1'b1;
end 
// st_data[ 9 ]
initial
begin
	st_data[9] = 1'b1;
end 
// st_data[ 8 ]
initial
begin
	st_data[8] = 1'b0;
end 
// st_data[ 7 ]
initial
begin
	st_data[7] = 1'b0;
end 
// st_data[ 6 ]
initial
begin
	st_data[6] = 1'b1;
end 
// st_data[ 5 ]
initial
begin
	st_data[5] = 1'b1;
end 
// st_data[ 4 ]
initial
begin
	st_data[4] = 1'b1;
end 
// st_data[ 3 ]
initial
begin
	st_data[3] = 1'b1;
end 
// st_data[ 2 ]
initial
begin
	st_data[2] = 1'b0;
end 
// st_data[ 1 ]
initial
begin
	st_data[1] = 1'b0;
end 
// st_data[ 0 ]
initial
begin
	st_data[0] = 1'b0;
end 
// io_sw[ 31 ]
initial
begin
	io_sw[31] = 1'b0;
end 
// io_sw[ 30 ]
initial
begin
	io_sw[30] = 1'b0;
end 
// io_sw[ 29 ]
initial
begin
	io_sw[29] = 1'b0;
end 
// io_sw[ 28 ]
initial
begin
	io_sw[28] = 1'b0;
end 
// io_sw[ 27 ]
initial
begin
	io_sw[27] = 1'b0;
end 
// io_sw[ 26 ]
initial
begin
	io_sw[26] = 1'b0;
end 
// io_sw[ 25 ]
initial
begin
	io_sw[25] = 1'b0;
end 
// io_sw[ 24 ]
initial
begin
	io_sw[24] = 1'b0;
end 
// io_sw[ 23 ]
initial
begin
	io_sw[23] = 1'b0;
end 
// io_sw[ 22 ]
initial
begin
	io_sw[22] = 1'b0;
end 
// io_sw[ 21 ]
initial
begin
	io_sw[21] = 1'b0;
end 
// io_sw[ 20 ]
initial
begin
	io_sw[20] = 1'b0;
end 
// io_sw[ 19 ]
initial
begin
	io_sw[19] = 1'b0;
end 
// io_sw[ 18 ]
initial
begin
	io_sw[18] = 1'b0;
end 
// io_sw[ 17 ]
initial
begin
	io_sw[17] = 1'b0;
end 
// io_sw[ 16 ]
initial
begin
	io_sw[16] = 1'b0;
end 
// io_sw[ 15 ]
initial
begin
	io_sw[15] = 1'b0;
end 
// io_sw[ 14 ]
initial
begin
	io_sw[14] = 1'b0;
end 
// io_sw[ 13 ]
initial
begin
	io_sw[13] = 1'b0;
end 
// io_sw[ 12 ]
initial
begin
	io_sw[12] = 1'b0;
end 
// io_sw[ 11 ]
initial
begin
	io_sw[11] = 1'b0;
end 
// io_sw[ 10 ]
initial
begin
	io_sw[10] = 1'b0;
end 
// io_sw[ 9 ]
initial
begin
	io_sw[9] = 1'b0;
end 
// io_sw[ 8 ]
initial
begin
	io_sw[8] = 1'b0;
end 
// io_sw[ 7 ]
initial
begin
	io_sw[7] = 1'b0;
end 
// io_sw[ 6 ]
initial
begin
	io_sw[6] = 1'b0;
end 
// io_sw[ 5 ]
initial
begin
	io_sw[5] = 1'b0;
end 
// io_sw[ 4 ]
initial
begin
	io_sw[4] = 1'b0;
end 
// io_sw[ 3 ]
initial
begin
	io_sw[3] = 1'b0;
end 
// io_sw[ 2 ]
initial
begin
	io_sw[2] = 1'b0;
end 
// io_sw[ 1 ]
initial
begin
	io_sw[1] = 1'b0;
end 
// io_sw[ 0 ]
initial
begin
	io_sw[0] = 1'b0;
end 

lsu_vlg_sample_tst tb_sample (
	.addr(addr),
	.clk_i(clk_i),
	.io_sw(io_sw),
	.rst_ni(rst_ni),
	.st_data(st_data),
	.st_en(st_en),
	.sampler_tx(sampler)
);

lsu_vlg_check_tst tb_out(
	.io_hex0(io_hex0),
	.io_hex1(io_hex1),
	.io_hex2(io_hex2),
	.io_hex3(io_hex3),
	.io_hex4(io_hex4),
	.io_hex5(io_hex5),
	.io_hex6(io_hex6),
	.io_hex7(io_hex7),
	.io_lcd(io_lcd),
	.io_ledg(io_ledg),
	.io_ledr(io_ledr),
	.ld_data(ld_data),
	.sampler_rx(sampler)
);
endmodule

