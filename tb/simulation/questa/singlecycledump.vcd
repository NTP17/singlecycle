$date
	Sun Nov  5 11:33:04 2023
$end
$version
	Questa Intel Starter FPGA Edition Version 2021.2
$end
$timescale
	1ps
$end

$scope module singlecycle_tb $end
$var reg 1 ! clk_i $end
$var reg 1 " rst_ni $end
$var reg 32 # io_sw_i [31:0] $end
$var reg 13 $ pc_debug_o [12:0] $end
$var reg 32 % io_lcd_o [31:0] $end
$var reg 32 & io_ledg_o [31:0] $end
$var reg 32 ' io_ledr_o [31:0] $end
$var reg 32 ( io_hex0_o [31:0] $end
$var reg 32 ) io_hex1_o [31:0] $end
$var reg 32 * io_hex2_o [31:0] $end
$var reg 32 + io_hex3_o [31:0] $end
$var reg 32 , io_hex4_o [31:0] $end
$var reg 32 - io_hex5_o [31:0] $end
$var reg 32 . io_hex6_o [31:0] $end
$var reg 32 / io_hex7_o [31:0] $end

$scope module dut $end
$var wire 1 0 clk_i $end
$var wire 1 1 rst_ni $end
$var wire 1 2 io_sw_i [31] $end
$var wire 1 3 io_sw_i [30] $end
$var wire 1 4 io_sw_i [29] $end
$var wire 1 5 io_sw_i [28] $end
$var wire 1 6 io_sw_i [27] $end
$var wire 1 7 io_sw_i [26] $end
$var wire 1 8 io_sw_i [25] $end
$var wire 1 9 io_sw_i [24] $end
$var wire 1 : io_sw_i [23] $end
$var wire 1 ; io_sw_i [22] $end
$var wire 1 < io_sw_i [21] $end
$var wire 1 = io_sw_i [20] $end
$var wire 1 > io_sw_i [19] $end
$var wire 1 ? io_sw_i [18] $end
$var wire 1 @ io_sw_i [17] $end
$var wire 1 A io_sw_i [16] $end
$var wire 1 B io_sw_i [15] $end
$var wire 1 C io_sw_i [14] $end
$var wire 1 D io_sw_i [13] $end
$var wire 1 E io_sw_i [12] $end
$var wire 1 F io_sw_i [11] $end
$var wire 1 G io_sw_i [10] $end
$var wire 1 H io_sw_i [9] $end
$var wire 1 I io_sw_i [8] $end
$var wire 1 J io_sw_i [7] $end
$var wire 1 K io_sw_i [6] $end
$var wire 1 L io_sw_i [5] $end
$var wire 1 M io_sw_i [4] $end
$var wire 1 N io_sw_i [3] $end
$var wire 1 O io_sw_i [2] $end
$var wire 1 P io_sw_i [1] $end
$var wire 1 Q io_sw_i [0] $end
$var wire 1 R pc_debug_o [12] $end
$var wire 1 S pc_debug_o [11] $end
$var wire 1 T pc_debug_o [10] $end
$var wire 1 U pc_debug_o [9] $end
$var wire 1 V pc_debug_o [8] $end
$var wire 1 W pc_debug_o [7] $end
$var wire 1 X pc_debug_o [6] $end
$var wire 1 Y pc_debug_o [5] $end
$var wire 1 Z pc_debug_o [4] $end
$var wire 1 [ pc_debug_o [3] $end
$var wire 1 \ pc_debug_o [2] $end
$var wire 1 ] pc_debug_o [1] $end
$var wire 1 ^ pc_debug_o [0] $end
$var wire 1 _ io_lcd_o [31] $end
$var wire 1 ` io_lcd_o [30] $end
$var wire 1 a io_lcd_o [29] $end
$var wire 1 b io_lcd_o [28] $end
$var wire 1 c io_lcd_o [27] $end
$var wire 1 d io_lcd_o [26] $end
$var wire 1 e io_lcd_o [25] $end
$var wire 1 f io_lcd_o [24] $end
$var wire 1 g io_lcd_o [23] $end
$var wire 1 h io_lcd_o [22] $end
$var wire 1 i io_lcd_o [21] $end
$var wire 1 j io_lcd_o [20] $end
$var wire 1 k io_lcd_o [19] $end
$var wire 1 l io_lcd_o [18] $end
$var wire 1 m io_lcd_o [17] $end
$var wire 1 n io_lcd_o [16] $end
$var wire 1 o io_lcd_o [15] $end
$var wire 1 p io_lcd_o [14] $end
$var wire 1 q io_lcd_o [13] $end
$var wire 1 r io_lcd_o [12] $end
$var wire 1 s io_lcd_o [11] $end
$var wire 1 t io_lcd_o [10] $end
$var wire 1 u io_lcd_o [9] $end
$var wire 1 v io_lcd_o [8] $end
$var wire 1 w io_lcd_o [7] $end
$var wire 1 x io_lcd_o [6] $end
$var wire 1 y io_lcd_o [5] $end
$var wire 1 z io_lcd_o [4] $end
$var wire 1 { io_lcd_o [3] $end
$var wire 1 | io_lcd_o [2] $end
$var wire 1 } io_lcd_o [1] $end
$var wire 1 ~ io_lcd_o [0] $end
$var wire 1 !! io_ledg_o [31] $end
$var wire 1 "! io_ledg_o [30] $end
$var wire 1 #! io_ledg_o [29] $end
$var wire 1 $! io_ledg_o [28] $end
$var wire 1 %! io_ledg_o [27] $end
$var wire 1 &! io_ledg_o [26] $end
$var wire 1 '! io_ledg_o [25] $end
$var wire 1 (! io_ledg_o [24] $end
$var wire 1 )! io_ledg_o [23] $end
$var wire 1 *! io_ledg_o [22] $end
$var wire 1 +! io_ledg_o [21] $end
$var wire 1 ,! io_ledg_o [20] $end
$var wire 1 -! io_ledg_o [19] $end
$var wire 1 .! io_ledg_o [18] $end
$var wire 1 /! io_ledg_o [17] $end
$var wire 1 0! io_ledg_o [16] $end
$var wire 1 1! io_ledg_o [15] $end
$var wire 1 2! io_ledg_o [14] $end
$var wire 1 3! io_ledg_o [13] $end
$var wire 1 4! io_ledg_o [12] $end
$var wire 1 5! io_ledg_o [11] $end
$var wire 1 6! io_ledg_o [10] $end
$var wire 1 7! io_ledg_o [9] $end
$var wire 1 8! io_ledg_o [8] $end
$var wire 1 9! io_ledg_o [7] $end
$var wire 1 :! io_ledg_o [6] $end
$var wire 1 ;! io_ledg_o [5] $end
$var wire 1 <! io_ledg_o [4] $end
$var wire 1 =! io_ledg_o [3] $end
$var wire 1 >! io_ledg_o [2] $end
$var wire 1 ?! io_ledg_o [1] $end
$var wire 1 @! io_ledg_o [0] $end
$var wire 1 A! io_ledr_o [31] $end
$var wire 1 B! io_ledr_o [30] $end
$var wire 1 C! io_ledr_o [29] $end
$var wire 1 D! io_ledr_o [28] $end
$var wire 1 E! io_ledr_o [27] $end
$var wire 1 F! io_ledr_o [26] $end
$var wire 1 G! io_ledr_o [25] $end
$var wire 1 H! io_ledr_o [24] $end
$var wire 1 I! io_ledr_o [23] $end
$var wire 1 J! io_ledr_o [22] $end
$var wire 1 K! io_ledr_o [21] $end
$var wire 1 L! io_ledr_o [20] $end
$var wire 1 M! io_ledr_o [19] $end
$var wire 1 N! io_ledr_o [18] $end
$var wire 1 O! io_ledr_o [17] $end
$var wire 1 P! io_ledr_o [16] $end
$var wire 1 Q! io_ledr_o [15] $end
$var wire 1 R! io_ledr_o [14] $end
$var wire 1 S! io_ledr_o [13] $end
$var wire 1 T! io_ledr_o [12] $end
$var wire 1 U! io_ledr_o [11] $end
$var wire 1 V! io_ledr_o [10] $end
$var wire 1 W! io_ledr_o [9] $end
$var wire 1 X! io_ledr_o [8] $end
$var wire 1 Y! io_ledr_o [7] $end
$var wire 1 Z! io_ledr_o [6] $end
$var wire 1 [! io_ledr_o [5] $end
$var wire 1 \! io_ledr_o [4] $end
$var wire 1 ]! io_ledr_o [3] $end
$var wire 1 ^! io_ledr_o [2] $end
$var wire 1 _! io_ledr_o [1] $end
$var wire 1 `! io_ledr_o [0] $end
$var wire 1 a! io_hex0_o [31] $end
$var wire 1 b! io_hex0_o [30] $end
$var wire 1 c! io_hex0_o [29] $end
$var wire 1 d! io_hex0_o [28] $end
$var wire 1 e! io_hex0_o [27] $end
$var wire 1 f! io_hex0_o [26] $end
$var wire 1 g! io_hex0_o [25] $end
$var wire 1 h! io_hex0_o [24] $end
$var wire 1 i! io_hex0_o [23] $end
$var wire 1 j! io_hex0_o [22] $end
$var wire 1 k! io_hex0_o [21] $end
$var wire 1 l! io_hex0_o [20] $end
$var wire 1 m! io_hex0_o [19] $end
$var wire 1 n! io_hex0_o [18] $end
$var wire 1 o! io_hex0_o [17] $end
$var wire 1 p! io_hex0_o [16] $end
$var wire 1 q! io_hex0_o [15] $end
$var wire 1 r! io_hex0_o [14] $end
$var wire 1 s! io_hex0_o [13] $end
$var wire 1 t! io_hex0_o [12] $end
$var wire 1 u! io_hex0_o [11] $end
$var wire 1 v! io_hex0_o [10] $end
$var wire 1 w! io_hex0_o [9] $end
$var wire 1 x! io_hex0_o [8] $end
$var wire 1 y! io_hex0_o [7] $end
$var wire 1 z! io_hex0_o [6] $end
$var wire 1 {! io_hex0_o [5] $end
$var wire 1 |! io_hex0_o [4] $end
$var wire 1 }! io_hex0_o [3] $end
$var wire 1 ~! io_hex0_o [2] $end
$var wire 1 !" io_hex0_o [1] $end
$var wire 1 "" io_hex0_o [0] $end
$var wire 1 #" io_hex1_o [31] $end
$var wire 1 $" io_hex1_o [30] $end
$var wire 1 %" io_hex1_o [29] $end
$var wire 1 &" io_hex1_o [28] $end
$var wire 1 '" io_hex1_o [27] $end
$var wire 1 (" io_hex1_o [26] $end
$var wire 1 )" io_hex1_o [25] $end
$var wire 1 *" io_hex1_o [24] $end
$var wire 1 +" io_hex1_o [23] $end
$var wire 1 ," io_hex1_o [22] $end
$var wire 1 -" io_hex1_o [21] $end
$var wire 1 ." io_hex1_o [20] $end
$var wire 1 /" io_hex1_o [19] $end
$var wire 1 0" io_hex1_o [18] $end
$var wire 1 1" io_hex1_o [17] $end
$var wire 1 2" io_hex1_o [16] $end
$var wire 1 3" io_hex1_o [15] $end
$var wire 1 4" io_hex1_o [14] $end
$var wire 1 5" io_hex1_o [13] $end
$var wire 1 6" io_hex1_o [12] $end
$var wire 1 7" io_hex1_o [11] $end
$var wire 1 8" io_hex1_o [10] $end
$var wire 1 9" io_hex1_o [9] $end
$var wire 1 :" io_hex1_o [8] $end
$var wire 1 ;" io_hex1_o [7] $end
$var wire 1 <" io_hex1_o [6] $end
$var wire 1 =" io_hex1_o [5] $end
$var wire 1 >" io_hex1_o [4] $end
$var wire 1 ?" io_hex1_o [3] $end
$var wire 1 @" io_hex1_o [2] $end
$var wire 1 A" io_hex1_o [1] $end
$var wire 1 B" io_hex1_o [0] $end
$var wire 1 C" io_hex2_o [31] $end
$var wire 1 D" io_hex2_o [30] $end
$var wire 1 E" io_hex2_o [29] $end
$var wire 1 F" io_hex2_o [28] $end
$var wire 1 G" io_hex2_o [27] $end
$var wire 1 H" io_hex2_o [26] $end
$var wire 1 I" io_hex2_o [25] $end
$var wire 1 J" io_hex2_o [24] $end
$var wire 1 K" io_hex2_o [23] $end
$var wire 1 L" io_hex2_o [22] $end
$var wire 1 M" io_hex2_o [21] $end
$var wire 1 N" io_hex2_o [20] $end
$var wire 1 O" io_hex2_o [19] $end
$var wire 1 P" io_hex2_o [18] $end
$var wire 1 Q" io_hex2_o [17] $end
$var wire 1 R" io_hex2_o [16] $end
$var wire 1 S" io_hex2_o [15] $end
$var wire 1 T" io_hex2_o [14] $end
$var wire 1 U" io_hex2_o [13] $end
$var wire 1 V" io_hex2_o [12] $end
$var wire 1 W" io_hex2_o [11] $end
$var wire 1 X" io_hex2_o [10] $end
$var wire 1 Y" io_hex2_o [9] $end
$var wire 1 Z" io_hex2_o [8] $end
$var wire 1 [" io_hex2_o [7] $end
$var wire 1 \" io_hex2_o [6] $end
$var wire 1 ]" io_hex2_o [5] $end
$var wire 1 ^" io_hex2_o [4] $end
$var wire 1 _" io_hex2_o [3] $end
$var wire 1 `" io_hex2_o [2] $end
$var wire 1 a" io_hex2_o [1] $end
$var wire 1 b" io_hex2_o [0] $end
$var wire 1 c" io_hex3_o [31] $end
$var wire 1 d" io_hex3_o [30] $end
$var wire 1 e" io_hex3_o [29] $end
$var wire 1 f" io_hex3_o [28] $end
$var wire 1 g" io_hex3_o [27] $end
$var wire 1 h" io_hex3_o [26] $end
$var wire 1 i" io_hex3_o [25] $end
$var wire 1 j" io_hex3_o [24] $end
$var wire 1 k" io_hex3_o [23] $end
$var wire 1 l" io_hex3_o [22] $end
$var wire 1 m" io_hex3_o [21] $end
$var wire 1 n" io_hex3_o [20] $end
$var wire 1 o" io_hex3_o [19] $end
$var wire 1 p" io_hex3_o [18] $end
$var wire 1 q" io_hex3_o [17] $end
$var wire 1 r" io_hex3_o [16] $end
$var wire 1 s" io_hex3_o [15] $end
$var wire 1 t" io_hex3_o [14] $end
$var wire 1 u" io_hex3_o [13] $end
$var wire 1 v" io_hex3_o [12] $end
$var wire 1 w" io_hex3_o [11] $end
$var wire 1 x" io_hex3_o [10] $end
$var wire 1 y" io_hex3_o [9] $end
$var wire 1 z" io_hex3_o [8] $end
$var wire 1 {" io_hex3_o [7] $end
$var wire 1 |" io_hex3_o [6] $end
$var wire 1 }" io_hex3_o [5] $end
$var wire 1 ~" io_hex3_o [4] $end
$var wire 1 !# io_hex3_o [3] $end
$var wire 1 "# io_hex3_o [2] $end
$var wire 1 ## io_hex3_o [1] $end
$var wire 1 $# io_hex3_o [0] $end
$var wire 1 %# io_hex4_o [31] $end
$var wire 1 &# io_hex4_o [30] $end
$var wire 1 '# io_hex4_o [29] $end
$var wire 1 (# io_hex4_o [28] $end
$var wire 1 )# io_hex4_o [27] $end
$var wire 1 *# io_hex4_o [26] $end
$var wire 1 +# io_hex4_o [25] $end
$var wire 1 ,# io_hex4_o [24] $end
$var wire 1 -# io_hex4_o [23] $end
$var wire 1 .# io_hex4_o [22] $end
$var wire 1 /# io_hex4_o [21] $end
$var wire 1 0# io_hex4_o [20] $end
$var wire 1 1# io_hex4_o [19] $end
$var wire 1 2# io_hex4_o [18] $end
$var wire 1 3# io_hex4_o [17] $end
$var wire 1 4# io_hex4_o [16] $end
$var wire 1 5# io_hex4_o [15] $end
$var wire 1 6# io_hex4_o [14] $end
$var wire 1 7# io_hex4_o [13] $end
$var wire 1 8# io_hex4_o [12] $end
$var wire 1 9# io_hex4_o [11] $end
$var wire 1 :# io_hex4_o [10] $end
$var wire 1 ;# io_hex4_o [9] $end
$var wire 1 <# io_hex4_o [8] $end
$var wire 1 =# io_hex4_o [7] $end
$var wire 1 ># io_hex4_o [6] $end
$var wire 1 ?# io_hex4_o [5] $end
$var wire 1 @# io_hex4_o [4] $end
$var wire 1 A# io_hex4_o [3] $end
$var wire 1 B# io_hex4_o [2] $end
$var wire 1 C# io_hex4_o [1] $end
$var wire 1 D# io_hex4_o [0] $end
$var wire 1 E# io_hex5_o [31] $end
$var wire 1 F# io_hex5_o [30] $end
$var wire 1 G# io_hex5_o [29] $end
$var wire 1 H# io_hex5_o [28] $end
$var wire 1 I# io_hex5_o [27] $end
$var wire 1 J# io_hex5_o [26] $end
$var wire 1 K# io_hex5_o [25] $end
$var wire 1 L# io_hex5_o [24] $end
$var wire 1 M# io_hex5_o [23] $end
$var wire 1 N# io_hex5_o [22] $end
$var wire 1 O# io_hex5_o [21] $end
$var wire 1 P# io_hex5_o [20] $end
$var wire 1 Q# io_hex5_o [19] $end
$var wire 1 R# io_hex5_o [18] $end
$var wire 1 S# io_hex5_o [17] $end
$var wire 1 T# io_hex5_o [16] $end
$var wire 1 U# io_hex5_o [15] $end
$var wire 1 V# io_hex5_o [14] $end
$var wire 1 W# io_hex5_o [13] $end
$var wire 1 X# io_hex5_o [12] $end
$var wire 1 Y# io_hex5_o [11] $end
$var wire 1 Z# io_hex5_o [10] $end
$var wire 1 [# io_hex5_o [9] $end
$var wire 1 \# io_hex5_o [8] $end
$var wire 1 ]# io_hex5_o [7] $end
$var wire 1 ^# io_hex5_o [6] $end
$var wire 1 _# io_hex5_o [5] $end
$var wire 1 `# io_hex5_o [4] $end
$var wire 1 a# io_hex5_o [3] $end
$var wire 1 b# io_hex5_o [2] $end
$var wire 1 c# io_hex5_o [1] $end
$var wire 1 d# io_hex5_o [0] $end
$var wire 1 e# io_hex6_o [31] $end
$var wire 1 f# io_hex6_o [30] $end
$var wire 1 g# io_hex6_o [29] $end
$var wire 1 h# io_hex6_o [28] $end
$var wire 1 i# io_hex6_o [27] $end
$var wire 1 j# io_hex6_o [26] $end
$var wire 1 k# io_hex6_o [25] $end
$var wire 1 l# io_hex6_o [24] $end
$var wire 1 m# io_hex6_o [23] $end
$var wire 1 n# io_hex6_o [22] $end
$var wire 1 o# io_hex6_o [21] $end
$var wire 1 p# io_hex6_o [20] $end
$var wire 1 q# io_hex6_o [19] $end
$var wire 1 r# io_hex6_o [18] $end
$var wire 1 s# io_hex6_o [17] $end
$var wire 1 t# io_hex6_o [16] $end
$var wire 1 u# io_hex6_o [15] $end
$var wire 1 v# io_hex6_o [14] $end
$var wire 1 w# io_hex6_o [13] $end
$var wire 1 x# io_hex6_o [12] $end
$var wire 1 y# io_hex6_o [11] $end
$var wire 1 z# io_hex6_o [10] $end
$var wire 1 {# io_hex6_o [9] $end
$var wire 1 |# io_hex6_o [8] $end
$var wire 1 }# io_hex6_o [7] $end
$var wire 1 ~# io_hex6_o [6] $end
$var wire 1 !$ io_hex6_o [5] $end
$var wire 1 "$ io_hex6_o [4] $end
$var wire 1 #$ io_hex6_o [3] $end
$var wire 1 $$ io_hex6_o [2] $end
$var wire 1 %$ io_hex6_o [1] $end
$var wire 1 &$ io_hex6_o [0] $end
$var wire 1 '$ io_hex7_o [31] $end
$var wire 1 ($ io_hex7_o [30] $end
$var wire 1 )$ io_hex7_o [29] $end
$var wire 1 *$ io_hex7_o [28] $end
$var wire 1 +$ io_hex7_o [27] $end
$var wire 1 ,$ io_hex7_o [26] $end
$var wire 1 -$ io_hex7_o [25] $end
$var wire 1 .$ io_hex7_o [24] $end
$var wire 1 /$ io_hex7_o [23] $end
$var wire 1 0$ io_hex7_o [22] $end
$var wire 1 1$ io_hex7_o [21] $end
$var wire 1 2$ io_hex7_o [20] $end
$var wire 1 3$ io_hex7_o [19] $end
$var wire 1 4$ io_hex7_o [18] $end
$var wire 1 5$ io_hex7_o [17] $end
$var wire 1 6$ io_hex7_o [16] $end
$var wire 1 7$ io_hex7_o [15] $end
$var wire 1 8$ io_hex7_o [14] $end
$var wire 1 9$ io_hex7_o [13] $end
$var wire 1 :$ io_hex7_o [12] $end
$var wire 1 ;$ io_hex7_o [11] $end
$var wire 1 <$ io_hex7_o [10] $end
$var wire 1 =$ io_hex7_o [9] $end
$var wire 1 >$ io_hex7_o [8] $end
$var wire 1 ?$ io_hex7_o [7] $end
$var wire 1 @$ io_hex7_o [6] $end
$var wire 1 A$ io_hex7_o [5] $end
$var wire 1 B$ io_hex7_o [4] $end
$var wire 1 C$ io_hex7_o [3] $end
$var wire 1 D$ io_hex7_o [2] $end
$var wire 1 E$ io_hex7_o [1] $end
$var wire 1 F$ io_hex7_o [0] $end
$var reg 32 G$ alu_data [31:0] $end
$var reg 32 H$ instr [31:0] $end
$var reg 32 I$ imm [31:0] $end
$var reg 32 J$ rs1_data [31:0] $end
$var reg 32 K$ rs2_data [31:0] $end
$var reg 32 L$ operand_a [31:0] $end
$var reg 32 M$ operand_b [31:0] $end
$var reg 32 N$ ld_raw [31:0] $end
$var reg 32 O$ ld_data [31:0] $end
$var reg 32 P$ wb_data [31:0] $end
$var reg 13 Q$ pc_four [12:0] $end
$var reg 13 R$ nxt_pc [12:0] $end
$var reg 13 S$ pc [12:0] $end
$var reg 5 T$ rs1_addr [4:0] $end
$var reg 5 U$ rs2_addr [4:0] $end
$var reg 5 V$ rd_addr [4:0] $end
$var reg 4 W$ alu_op [3:0] $end
$var reg 4 X$ byte_en [3:0] $end
$var reg 2 Y$ wb_sel [1:0] $end
$var reg 3 Z$ ld_sel [2:0] $end
$var reg 1 [$ br_sel $end
$var reg 1 \$ rd_wren $end
$var reg 1 ]$ br_unsigned $end
$var reg 1 ^$ br_less $end
$var reg 1 _$ br_equal $end
$var reg 1 `$ op_a_sel $end
$var reg 1 a$ op_b_sel $end
$var reg 1 b$ mem_wren $end

$scope module cu $end
$var parameter 7 c$ LUI $end
$var parameter 7 d$ AUIPC $end
$var parameter 7 e$ JAL $end
$var parameter 7 f$ JALR $end
$var parameter 7 g$ B $end
$var parameter 7 h$ L $end
$var parameter 7 i$ S $end
$var parameter 3 j$ LSW $end
$var parameter 3 k$ LSB $end
$var parameter 3 l$ LSH $end
$var parameter 3 m$ LBU $end
$var parameter 3 n$ LHU $end
$var parameter 7 o$ I $end
$var parameter 7 p$ R $end
$var parameter 7 q$ Rf7 $end
$var parameter 7 r$ Rf7n $end
$var parameter 3 s$ EQ $end
$var parameter 3 t$ NE $end
$var parameter 3 u$ LT $end
$var parameter 3 v$ GE $end
$var parameter 3 w$ LTU $end
$var parameter 3 x$ GEU $end
$var parameter 3 y$ ADDs $end
$var parameter 3 z$ SLLs $end
$var parameter 3 {$ SLTs $end
$var parameter 3 |$ SLTUs $end
$var parameter 3 }$ XORs $end
$var parameter 3 ~$ SRs $end
$var parameter 3 !% ORs $end
$var parameter 3 "% ANDs $end
$var wire 1 #% instr [31] $end
$var wire 1 $% instr [30] $end
$var wire 1 %% instr [29] $end
$var wire 1 &% instr [28] $end
$var wire 1 '% instr [27] $end
$var wire 1 (% instr [26] $end
$var wire 1 )% instr [25] $end
$var wire 1 *% instr [24] $end
$var wire 1 +% instr [23] $end
$var wire 1 ,% instr [22] $end
$var wire 1 -% instr [21] $end
$var wire 1 .% instr [20] $end
$var wire 1 /% instr [19] $end
$var wire 1 0% instr [18] $end
$var wire 1 1% instr [17] $end
$var wire 1 2% instr [16] $end
$var wire 1 3% instr [15] $end
$var wire 1 4% instr [14] $end
$var wire 1 5% instr [13] $end
$var wire 1 6% instr [12] $end
$var wire 1 7% instr [11] $end
$var wire 1 8% instr [10] $end
$var wire 1 9% instr [9] $end
$var wire 1 :% instr [8] $end
$var wire 1 ;% instr [7] $end
$var wire 1 <% instr [6] $end
$var wire 1 =% instr [5] $end
$var wire 1 >% instr [4] $end
$var wire 1 ?% instr [3] $end
$var wire 1 @% instr [2] $end
$var wire 1 A% instr [1] $end
$var wire 1 B% instr [0] $end
$var wire 1 C% br_less $end
$var wire 1 D% br_equal $end
$var reg 1 E% br_sel $end
$var reg 1 F% rd_wren $end
$var reg 1 G% br_unsigned $end
$var reg 1 H% op_a_sel $end
$var reg 1 I% op_b_sel $end
$var reg 1 J% mem_wren $end
$var reg 4 K% alu_op [3:0] $end
$var reg 4 L% byte_en [3:0] $end
$var reg 2 M% wb_sel [1:0] $end
$var reg 3 N% ld_sel [2:0] $end
$var reg 7 O% opcode [6:0] $end
$var reg 7 P% funct7 [6:0] $end
$var reg 3 Q% funct3 [2:0] $end
$upscope $end

$scope module brm $end
$var wire 1 R% br_sel $end
$var wire 1 S% alu_data [12] $end
$var wire 1 T% alu_data [11] $end
$var wire 1 U% alu_data [10] $end
$var wire 1 V% alu_data [9] $end
$var wire 1 W% alu_data [8] $end
$var wire 1 X% alu_data [7] $end
$var wire 1 Y% alu_data [6] $end
$var wire 1 Z% alu_data [5] $end
$var wire 1 [% alu_data [4] $end
$var wire 1 \% alu_data [3] $end
$var wire 1 ]% alu_data [2] $end
$var wire 1 ^% alu_data [1] $end
$var wire 1 _% alu_data [0] $end
$var wire 1 `% pc_four [12] $end
$var wire 1 a% pc_four [11] $end
$var wire 1 b% pc_four [10] $end
$var wire 1 c% pc_four [9] $end
$var wire 1 d% pc_four [8] $end
$var wire 1 e% pc_four [7] $end
$var wire 1 f% pc_four [6] $end
$var wire 1 g% pc_four [5] $end
$var wire 1 h% pc_four [4] $end
$var wire 1 i% pc_four [3] $end
$var wire 1 j% pc_four [2] $end
$var wire 1 k% pc_four [1] $end
$var wire 1 l% pc_four [0] $end
$var wire 1 m% nxt_pc [12] $end
$var wire 1 n% nxt_pc [11] $end
$var wire 1 o% nxt_pc [10] $end
$var wire 1 p% nxt_pc [9] $end
$var wire 1 q% nxt_pc [8] $end
$var wire 1 r% nxt_pc [7] $end
$var wire 1 s% nxt_pc [6] $end
$var wire 1 t% nxt_pc [5] $end
$var wire 1 u% nxt_pc [4] $end
$var wire 1 v% nxt_pc [3] $end
$var wire 1 w% nxt_pc [2] $end
$var wire 1 x% nxt_pc [1] $end
$var wire 1 y% nxt_pc [0] $end
$upscope $end

$scope module plus4 $end
$var wire 1 z% pc_in [12] $end
$var wire 1 {% pc_in [11] $end
$var wire 1 |% pc_in [10] $end
$var wire 1 }% pc_in [9] $end
$var wire 1 ~% pc_in [8] $end
$var wire 1 !& pc_in [7] $end
$var wire 1 "& pc_in [6] $end
$var wire 1 #& pc_in [5] $end
$var wire 1 $& pc_in [4] $end
$var wire 1 %& pc_in [3] $end
$var wire 1 && pc_in [2] $end
$var wire 1 '& pc_in [1] $end
$var wire 1 (& pc_in [0] $end
$var wire 1 )& pc_out [12] $end
$var wire 1 *& pc_out [11] $end
$var wire 1 +& pc_out [10] $end
$var wire 1 ,& pc_out [9] $end
$var wire 1 -& pc_out [8] $end
$var wire 1 .& pc_out [7] $end
$var wire 1 /& pc_out [6] $end
$var wire 1 0& pc_out [5] $end
$var wire 1 1& pc_out [4] $end
$var wire 1 2& pc_out [3] $end
$var wire 1 3& pc_out [2] $end
$var wire 1 4& pc_out [1] $end
$var wire 1 5& pc_out [0] $end
$upscope $end

$scope module pcr $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 6& nxt_pc [12] $end
$var wire 1 7& nxt_pc [11] $end
$var wire 1 8& nxt_pc [10] $end
$var wire 1 9& nxt_pc [9] $end
$var wire 1 :& nxt_pc [8] $end
$var wire 1 ;& nxt_pc [7] $end
$var wire 1 <& nxt_pc [6] $end
$var wire 1 =& nxt_pc [5] $end
$var wire 1 >& nxt_pc [4] $end
$var wire 1 ?& nxt_pc [3] $end
$var wire 1 @& nxt_pc [2] $end
$var wire 1 A& nxt_pc [1] $end
$var wire 1 B& nxt_pc [0] $end
$var reg 13 C& pc [12:0] $end
$upscope $end

$scope module im $end
$var wire 1 D& pc [12] $end
$var wire 1 E& pc [11] $end
$var wire 1 F& pc [10] $end
$var wire 1 G& pc [9] $end
$var wire 1 H& pc [8] $end
$var wire 1 I& pc [7] $end
$var wire 1 J& pc [6] $end
$var wire 1 K& pc [5] $end
$var wire 1 L& pc [4] $end
$var wire 1 M& pc [3] $end
$var wire 1 N& pc [2] $end
$var wire 1 O& pc [1] $end
$var wire 1 P& pc [0] $end
$var wire 1 Q& instr [31] $end
$var wire 1 R& instr [30] $end
$var wire 1 S& instr [29] $end
$var wire 1 T& instr [28] $end
$var wire 1 U& instr [27] $end
$var wire 1 V& instr [26] $end
$var wire 1 W& instr [25] $end
$var wire 1 X& instr [24] $end
$var wire 1 Y& instr [23] $end
$var wire 1 Z& instr [22] $end
$var wire 1 [& instr [21] $end
$var wire 1 \& instr [20] $end
$var wire 1 ]& instr [19] $end
$var wire 1 ^& instr [18] $end
$var wire 1 _& instr [17] $end
$var wire 1 `& instr [16] $end
$var wire 1 a& instr [15] $end
$var wire 1 b& instr [14] $end
$var wire 1 c& instr [13] $end
$var wire 1 d& instr [12] $end
$var wire 1 e& instr [11] $end
$var wire 1 f& instr [10] $end
$var wire 1 g& instr [9] $end
$var wire 1 h& instr [8] $end
$var wire 1 i& instr [7] $end
$var wire 1 j& instr [6] $end
$var wire 1 k& instr [5] $end
$var wire 1 l& instr [4] $end
$var wire 1 m& instr [3] $end
$var wire 1 n& instr [2] $end
$var wire 1 o& instr [1] $end
$var wire 1 p& instr [0] $end
$upscope $end

$scope module rd $end
$var parameter 7 q& LUI $end
$var wire 1 r& instr [31] $end
$var wire 1 s& instr [30] $end
$var wire 1 t& instr [29] $end
$var wire 1 u& instr [28] $end
$var wire 1 v& instr [27] $end
$var wire 1 w& instr [26] $end
$var wire 1 x& instr [25] $end
$var wire 1 y& instr [24] $end
$var wire 1 z& instr [23] $end
$var wire 1 {& instr [22] $end
$var wire 1 |& instr [21] $end
$var wire 1 }& instr [20] $end
$var wire 1 ~& instr [19] $end
$var wire 1 !' instr [18] $end
$var wire 1 "' instr [17] $end
$var wire 1 #' instr [16] $end
$var wire 1 $' instr [15] $end
$var wire 1 %' instr [14] $end
$var wire 1 &' instr [13] $end
$var wire 1 '' instr [12] $end
$var wire 1 (' instr [11] $end
$var wire 1 )' instr [10] $end
$var wire 1 *' instr [9] $end
$var wire 1 +' instr [8] $end
$var wire 1 ,' instr [7] $end
$var wire 1 -' instr [6] $end
$var wire 1 .' instr [5] $end
$var wire 1 /' instr [4] $end
$var wire 1 0' instr [3] $end
$var wire 1 1' instr [2] $end
$var wire 1 2' instr [1] $end
$var wire 1 3' instr [0] $end
$var reg 5 4' rs1_addr [4:0] $end
$var reg 5 5' rs2_addr [4:0] $end
$var reg 5 6' rd_addr [4:0] $end
$var reg 5 7' rs1 [4:0] $end
$var reg 5 8' rs2 [4:0] $end
$var reg 5 9' rd [4:0] $end
$var reg 7 :' opcode [6:0] $end
$upscope $end

$scope module ig $end
$var parameter 7 ;' LUI $end
$var parameter 7 <' AUIPC $end
$var parameter 7 =' JAL $end
$var parameter 7 >' JALR $end
$var parameter 7 ?' Br $end
$var parameter 7 @' Ld $end
$var parameter 7 A' St $end
$var parameter 7 B' Im $end
$var wire 1 C' instr [31] $end
$var wire 1 D' instr [30] $end
$var wire 1 E' instr [29] $end
$var wire 1 F' instr [28] $end
$var wire 1 G' instr [27] $end
$var wire 1 H' instr [26] $end
$var wire 1 I' instr [25] $end
$var wire 1 J' instr [24] $end
$var wire 1 K' instr [23] $end
$var wire 1 L' instr [22] $end
$var wire 1 M' instr [21] $end
$var wire 1 N' instr [20] $end
$var wire 1 O' instr [19] $end
$var wire 1 P' instr [18] $end
$var wire 1 Q' instr [17] $end
$var wire 1 R' instr [16] $end
$var wire 1 S' instr [15] $end
$var wire 1 T' instr [14] $end
$var wire 1 U' instr [13] $end
$var wire 1 V' instr [12] $end
$var wire 1 W' instr [11] $end
$var wire 1 X' instr [10] $end
$var wire 1 Y' instr [9] $end
$var wire 1 Z' instr [8] $end
$var wire 1 [' instr [7] $end
$var wire 1 \' instr [6] $end
$var wire 1 ]' instr [5] $end
$var wire 1 ^' instr [4] $end
$var wire 1 _' instr [3] $end
$var wire 1 `' instr [2] $end
$var wire 1 a' instr [1] $end
$var wire 1 b' instr [0] $end
$var reg 32 c' imm [31:0] $end
$var reg 20 d' iU [19:0] $end
$var reg 21 e' iJ [20:0] $end
$var reg 12 f' iI [11:0] $end
$var reg 12 g' iS [11:0] $end
$var reg 13 h' iB [12:0] $end
$var reg 5 i' shamt [4:0] $end
$var reg 7 j' opcode [6:0] $end
$var reg 3 k' funct3 [2:0] $end
$upscope $end

$scope module rf $end
$var wire 1 0 clk_i $end
$var wire 1 1 rst_ni $end
$var wire 1 l' rs1_addr [4] $end
$var wire 1 m' rs1_addr [3] $end
$var wire 1 n' rs1_addr [2] $end
$var wire 1 o' rs1_addr [1] $end
$var wire 1 p' rs1_addr [0] $end
$var wire 1 q' rs2_addr [4] $end
$var wire 1 r' rs2_addr [3] $end
$var wire 1 s' rs2_addr [2] $end
$var wire 1 t' rs2_addr [1] $end
$var wire 1 u' rs2_addr [0] $end
$var wire 1 v' rd_addr [4] $end
$var wire 1 w' rd_addr [3] $end
$var wire 1 x' rd_addr [2] $end
$var wire 1 y' rd_addr [1] $end
$var wire 1 z' rd_addr [0] $end
$var wire 1 {' rd_data [31] $end
$var wire 1 |' rd_data [30] $end
$var wire 1 }' rd_data [29] $end
$var wire 1 ~' rd_data [28] $end
$var wire 1 !( rd_data [27] $end
$var wire 1 "( rd_data [26] $end
$var wire 1 #( rd_data [25] $end
$var wire 1 $( rd_data [24] $end
$var wire 1 %( rd_data [23] $end
$var wire 1 &( rd_data [22] $end
$var wire 1 '( rd_data [21] $end
$var wire 1 (( rd_data [20] $end
$var wire 1 )( rd_data [19] $end
$var wire 1 *( rd_data [18] $end
$var wire 1 +( rd_data [17] $end
$var wire 1 ,( rd_data [16] $end
$var wire 1 -( rd_data [15] $end
$var wire 1 .( rd_data [14] $end
$var wire 1 /( rd_data [13] $end
$var wire 1 0( rd_data [12] $end
$var wire 1 1( rd_data [11] $end
$var wire 1 2( rd_data [10] $end
$var wire 1 3( rd_data [9] $end
$var wire 1 4( rd_data [8] $end
$var wire 1 5( rd_data [7] $end
$var wire 1 6( rd_data [6] $end
$var wire 1 7( rd_data [5] $end
$var wire 1 8( rd_data [4] $end
$var wire 1 9( rd_data [3] $end
$var wire 1 :( rd_data [2] $end
$var wire 1 ;( rd_data [1] $end
$var wire 1 <( rd_data [0] $end
$var wire 1 =( rd_wren $end
$var wire 1 >( rs1_data [31] $end
$var wire 1 ?( rs1_data [30] $end
$var wire 1 @( rs1_data [29] $end
$var wire 1 A( rs1_data [28] $end
$var wire 1 B( rs1_data [27] $end
$var wire 1 C( rs1_data [26] $end
$var wire 1 D( rs1_data [25] $end
$var wire 1 E( rs1_data [24] $end
$var wire 1 F( rs1_data [23] $end
$var wire 1 G( rs1_data [22] $end
$var wire 1 H( rs1_data [21] $end
$var wire 1 I( rs1_data [20] $end
$var wire 1 J( rs1_data [19] $end
$var wire 1 K( rs1_data [18] $end
$var wire 1 L( rs1_data [17] $end
$var wire 1 M( rs1_data [16] $end
$var wire 1 N( rs1_data [15] $end
$var wire 1 O( rs1_data [14] $end
$var wire 1 P( rs1_data [13] $end
$var wire 1 Q( rs1_data [12] $end
$var wire 1 R( rs1_data [11] $end
$var wire 1 S( rs1_data [10] $end
$var wire 1 T( rs1_data [9] $end
$var wire 1 U( rs1_data [8] $end
$var wire 1 V( rs1_data [7] $end
$var wire 1 W( rs1_data [6] $end
$var wire 1 X( rs1_data [5] $end
$var wire 1 Y( rs1_data [4] $end
$var wire 1 Z( rs1_data [3] $end
$var wire 1 [( rs1_data [2] $end
$var wire 1 \( rs1_data [1] $end
$var wire 1 ]( rs1_data [0] $end
$var wire 1 ^( rs2_data [31] $end
$var wire 1 _( rs2_data [30] $end
$var wire 1 `( rs2_data [29] $end
$var wire 1 a( rs2_data [28] $end
$var wire 1 b( rs2_data [27] $end
$var wire 1 c( rs2_data [26] $end
$var wire 1 d( rs2_data [25] $end
$var wire 1 e( rs2_data [24] $end
$var wire 1 f( rs2_data [23] $end
$var wire 1 g( rs2_data [22] $end
$var wire 1 h( rs2_data [21] $end
$var wire 1 i( rs2_data [20] $end
$var wire 1 j( rs2_data [19] $end
$var wire 1 k( rs2_data [18] $end
$var wire 1 l( rs2_data [17] $end
$var wire 1 m( rs2_data [16] $end
$var wire 1 n( rs2_data [15] $end
$var wire 1 o( rs2_data [14] $end
$var wire 1 p( rs2_data [13] $end
$var wire 1 q( rs2_data [12] $end
$var wire 1 r( rs2_data [11] $end
$var wire 1 s( rs2_data [10] $end
$var wire 1 t( rs2_data [9] $end
$var wire 1 u( rs2_data [8] $end
$var wire 1 v( rs2_data [7] $end
$var wire 1 w( rs2_data [6] $end
$var wire 1 x( rs2_data [5] $end
$var wire 1 y( rs2_data [4] $end
$var wire 1 z( rs2_data [3] $end
$var wire 1 {( rs2_data [2] $end
$var wire 1 |( rs2_data [1] $end
$var wire 1 }( rs2_data [0] $end
$upscope $end

$scope module brc $end
$var wire 1 ~( rs1_data [31] $end
$var wire 1 !) rs1_data [30] $end
$var wire 1 ") rs1_data [29] $end
$var wire 1 #) rs1_data [28] $end
$var wire 1 $) rs1_data [27] $end
$var wire 1 %) rs1_data [26] $end
$var wire 1 &) rs1_data [25] $end
$var wire 1 ') rs1_data [24] $end
$var wire 1 () rs1_data [23] $end
$var wire 1 )) rs1_data [22] $end
$var wire 1 *) rs1_data [21] $end
$var wire 1 +) rs1_data [20] $end
$var wire 1 ,) rs1_data [19] $end
$var wire 1 -) rs1_data [18] $end
$var wire 1 .) rs1_data [17] $end
$var wire 1 /) rs1_data [16] $end
$var wire 1 0) rs1_data [15] $end
$var wire 1 1) rs1_data [14] $end
$var wire 1 2) rs1_data [13] $end
$var wire 1 3) rs1_data [12] $end
$var wire 1 4) rs1_data [11] $end
$var wire 1 5) rs1_data [10] $end
$var wire 1 6) rs1_data [9] $end
$var wire 1 7) rs1_data [8] $end
$var wire 1 8) rs1_data [7] $end
$var wire 1 9) rs1_data [6] $end
$var wire 1 :) rs1_data [5] $end
$var wire 1 ;) rs1_data [4] $end
$var wire 1 <) rs1_data [3] $end
$var wire 1 =) rs1_data [2] $end
$var wire 1 >) rs1_data [1] $end
$var wire 1 ?) rs1_data [0] $end
$var wire 1 @) rs2_data [31] $end
$var wire 1 A) rs2_data [30] $end
$var wire 1 B) rs2_data [29] $end
$var wire 1 C) rs2_data [28] $end
$var wire 1 D) rs2_data [27] $end
$var wire 1 E) rs2_data [26] $end
$var wire 1 F) rs2_data [25] $end
$var wire 1 G) rs2_data [24] $end
$var wire 1 H) rs2_data [23] $end
$var wire 1 I) rs2_data [22] $end
$var wire 1 J) rs2_data [21] $end
$var wire 1 K) rs2_data [20] $end
$var wire 1 L) rs2_data [19] $end
$var wire 1 M) rs2_data [18] $end
$var wire 1 N) rs2_data [17] $end
$var wire 1 O) rs2_data [16] $end
$var wire 1 P) rs2_data [15] $end
$var wire 1 Q) rs2_data [14] $end
$var wire 1 R) rs2_data [13] $end
$var wire 1 S) rs2_data [12] $end
$var wire 1 T) rs2_data [11] $end
$var wire 1 U) rs2_data [10] $end
$var wire 1 V) rs2_data [9] $end
$var wire 1 W) rs2_data [8] $end
$var wire 1 X) rs2_data [7] $end
$var wire 1 Y) rs2_data [6] $end
$var wire 1 Z) rs2_data [5] $end
$var wire 1 [) rs2_data [4] $end
$var wire 1 \) rs2_data [3] $end
$var wire 1 ]) rs2_data [2] $end
$var wire 1 ^) rs2_data [1] $end
$var wire 1 _) rs2_data [0] $end
$var wire 1 `) br_unsigned $end
$var wire 1 a) br_less $end
$var wire 1 b) br_equal $end
$var wire 1 c) ua [32] $end
$var wire 1 d) ua [31] $end
$var wire 1 e) ua [30] $end
$var wire 1 f) ua [29] $end
$var wire 1 g) ua [28] $end
$var wire 1 h) ua [27] $end
$var wire 1 i) ua [26] $end
$var wire 1 j) ua [25] $end
$var wire 1 k) ua [24] $end
$var wire 1 l) ua [23] $end
$var wire 1 m) ua [22] $end
$var wire 1 n) ua [21] $end
$var wire 1 o) ua [20] $end
$var wire 1 p) ua [19] $end
$var wire 1 q) ua [18] $end
$var wire 1 r) ua [17] $end
$var wire 1 s) ua [16] $end
$var wire 1 t) ua [15] $end
$var wire 1 u) ua [14] $end
$var wire 1 v) ua [13] $end
$var wire 1 w) ua [12] $end
$var wire 1 x) ua [11] $end
$var wire 1 y) ua [10] $end
$var wire 1 z) ua [9] $end
$var wire 1 {) ua [8] $end
$var wire 1 |) ua [7] $end
$var wire 1 }) ua [6] $end
$var wire 1 ~) ua [5] $end
$var wire 1 !* ua [4] $end
$var wire 1 "* ua [3] $end
$var wire 1 #* ua [2] $end
$var wire 1 $* ua [1] $end
$var wire 1 %* ua [0] $end
$var wire 1 &* ub [32] $end
$var wire 1 '* ub [31] $end
$var wire 1 (* ub [30] $end
$var wire 1 )* ub [29] $end
$var wire 1 ** ub [28] $end
$var wire 1 +* ub [27] $end
$var wire 1 ,* ub [26] $end
$var wire 1 -* ub [25] $end
$var wire 1 .* ub [24] $end
$var wire 1 /* ub [23] $end
$var wire 1 0* ub [22] $end
$var wire 1 1* ub [21] $end
$var wire 1 2* ub [20] $end
$var wire 1 3* ub [19] $end
$var wire 1 4* ub [18] $end
$var wire 1 5* ub [17] $end
$var wire 1 6* ub [16] $end
$var wire 1 7* ub [15] $end
$var wire 1 8* ub [14] $end
$var wire 1 9* ub [13] $end
$var wire 1 :* ub [12] $end
$var wire 1 ;* ub [11] $end
$var wire 1 <* ub [10] $end
$var wire 1 =* ub [9] $end
$var wire 1 >* ub [8] $end
$var wire 1 ?* ub [7] $end
$var wire 1 @* ub [6] $end
$var wire 1 A* ub [5] $end
$var wire 1 B* ub [4] $end
$var wire 1 C* ub [3] $end
$var wire 1 D* ub [2] $end
$var wire 1 E* ub [1] $end
$var wire 1 F* ub [0] $end
$var wire 1 G* uc [32] $end
$var wire 1 H* uc [31] $end
$var wire 1 I* uc [30] $end
$var wire 1 J* uc [29] $end
$var wire 1 K* uc [28] $end
$var wire 1 L* uc [27] $end
$var wire 1 M* uc [26] $end
$var wire 1 N* uc [25] $end
$var wire 1 O* uc [24] $end
$var wire 1 P* uc [23] $end
$var wire 1 Q* uc [22] $end
$var wire 1 R* uc [21] $end
$var wire 1 S* uc [20] $end
$var wire 1 T* uc [19] $end
$var wire 1 U* uc [18] $end
$var wire 1 V* uc [17] $end
$var wire 1 W* uc [16] $end
$var wire 1 X* uc [15] $end
$var wire 1 Y* uc [14] $end
$var wire 1 Z* uc [13] $end
$var wire 1 [* uc [12] $end
$var wire 1 \* uc [11] $end
$var wire 1 ]* uc [10] $end
$var wire 1 ^* uc [9] $end
$var wire 1 _* uc [8] $end
$var wire 1 `* uc [7] $end
$var wire 1 a* uc [6] $end
$var wire 1 b* uc [5] $end
$var wire 1 c* uc [4] $end
$var wire 1 d* uc [3] $end
$var wire 1 e* uc [2] $end
$var wire 1 f* uc [1] $end
$var wire 1 g* uc [0] $end
$var wire 1 h* c [31] $end
$var wire 1 i* c [30] $end
$var wire 1 j* c [29] $end
$var wire 1 k* c [28] $end
$var wire 1 l* c [27] $end
$var wire 1 m* c [26] $end
$var wire 1 n* c [25] $end
$var wire 1 o* c [24] $end
$var wire 1 p* c [23] $end
$var wire 1 q* c [22] $end
$var wire 1 r* c [21] $end
$var wire 1 s* c [20] $end
$var wire 1 t* c [19] $end
$var wire 1 u* c [18] $end
$var wire 1 v* c [17] $end
$var wire 1 w* c [16] $end
$var wire 1 x* c [15] $end
$var wire 1 y* c [14] $end
$var wire 1 z* c [13] $end
$var wire 1 {* c [12] $end
$var wire 1 |* c [11] $end
$var wire 1 }* c [10] $end
$var wire 1 ~* c [9] $end
$var wire 1 !+ c [8] $end
$var wire 1 "+ c [7] $end
$var wire 1 #+ c [6] $end
$var wire 1 $+ c [5] $end
$var wire 1 %+ c [4] $end
$var wire 1 &+ c [3] $end
$var wire 1 '+ c [2] $end
$var wire 1 (+ c [1] $end
$var wire 1 )+ c [0] $end
$var wire 1 *+ less $end
$var wire 1 ++ uless $end
$upscope $end

$scope module oam $end
$var wire 1 ,+ pc [12] $end
$var wire 1 -+ pc [11] $end
$var wire 1 .+ pc [10] $end
$var wire 1 /+ pc [9] $end
$var wire 1 0+ pc [8] $end
$var wire 1 1+ pc [7] $end
$var wire 1 2+ pc [6] $end
$var wire 1 3+ pc [5] $end
$var wire 1 4+ pc [4] $end
$var wire 1 5+ pc [3] $end
$var wire 1 6+ pc [2] $end
$var wire 1 7+ pc [1] $end
$var wire 1 8+ pc [0] $end
$var wire 1 9+ rs1_data [31] $end
$var wire 1 :+ rs1_data [30] $end
$var wire 1 ;+ rs1_data [29] $end
$var wire 1 <+ rs1_data [28] $end
$var wire 1 =+ rs1_data [27] $end
$var wire 1 >+ rs1_data [26] $end
$var wire 1 ?+ rs1_data [25] $end
$var wire 1 @+ rs1_data [24] $end
$var wire 1 A+ rs1_data [23] $end
$var wire 1 B+ rs1_data [22] $end
$var wire 1 C+ rs1_data [21] $end
$var wire 1 D+ rs1_data [20] $end
$var wire 1 E+ rs1_data [19] $end
$var wire 1 F+ rs1_data [18] $end
$var wire 1 G+ rs1_data [17] $end
$var wire 1 H+ rs1_data [16] $end
$var wire 1 I+ rs1_data [15] $end
$var wire 1 J+ rs1_data [14] $end
$var wire 1 K+ rs1_data [13] $end
$var wire 1 L+ rs1_data [12] $end
$var wire 1 M+ rs1_data [11] $end
$var wire 1 N+ rs1_data [10] $end
$var wire 1 O+ rs1_data [9] $end
$var wire 1 P+ rs1_data [8] $end
$var wire 1 Q+ rs1_data [7] $end
$var wire 1 R+ rs1_data [6] $end
$var wire 1 S+ rs1_data [5] $end
$var wire 1 T+ rs1_data [4] $end
$var wire 1 U+ rs1_data [3] $end
$var wire 1 V+ rs1_data [2] $end
$var wire 1 W+ rs1_data [1] $end
$var wire 1 X+ rs1_data [0] $end
$var wire 1 Y+ op_a_sel $end
$var wire 1 Z+ operand_a [31] $end
$var wire 1 [+ operand_a [30] $end
$var wire 1 \+ operand_a [29] $end
$var wire 1 ]+ operand_a [28] $end
$var wire 1 ^+ operand_a [27] $end
$var wire 1 _+ operand_a [26] $end
$var wire 1 `+ operand_a [25] $end
$var wire 1 a+ operand_a [24] $end
$var wire 1 b+ operand_a [23] $end
$var wire 1 c+ operand_a [22] $end
$var wire 1 d+ operand_a [21] $end
$var wire 1 e+ operand_a [20] $end
$var wire 1 f+ operand_a [19] $end
$var wire 1 g+ operand_a [18] $end
$var wire 1 h+ operand_a [17] $end
$var wire 1 i+ operand_a [16] $end
$var wire 1 j+ operand_a [15] $end
$var wire 1 k+ operand_a [14] $end
$var wire 1 l+ operand_a [13] $end
$var wire 1 m+ operand_a [12] $end
$var wire 1 n+ operand_a [11] $end
$var wire 1 o+ operand_a [10] $end
$var wire 1 p+ operand_a [9] $end
$var wire 1 q+ operand_a [8] $end
$var wire 1 r+ operand_a [7] $end
$var wire 1 s+ operand_a [6] $end
$var wire 1 t+ operand_a [5] $end
$var wire 1 u+ operand_a [4] $end
$var wire 1 v+ operand_a [3] $end
$var wire 1 w+ operand_a [2] $end
$var wire 1 x+ operand_a [1] $end
$var wire 1 y+ operand_a [0] $end
$upscope $end

$scope module obm $end
$var wire 1 z+ imm [31] $end
$var wire 1 {+ imm [30] $end
$var wire 1 |+ imm [29] $end
$var wire 1 }+ imm [28] $end
$var wire 1 ~+ imm [27] $end
$var wire 1 !, imm [26] $end
$var wire 1 ", imm [25] $end
$var wire 1 #, imm [24] $end
$var wire 1 $, imm [23] $end
$var wire 1 %, imm [22] $end
$var wire 1 &, imm [21] $end
$var wire 1 ', imm [20] $end
$var wire 1 (, imm [19] $end
$var wire 1 ), imm [18] $end
$var wire 1 *, imm [17] $end
$var wire 1 +, imm [16] $end
$var wire 1 ,, imm [15] $end
$var wire 1 -, imm [14] $end
$var wire 1 ., imm [13] $end
$var wire 1 /, imm [12] $end
$var wire 1 0, imm [11] $end
$var wire 1 1, imm [10] $end
$var wire 1 2, imm [9] $end
$var wire 1 3, imm [8] $end
$var wire 1 4, imm [7] $end
$var wire 1 5, imm [6] $end
$var wire 1 6, imm [5] $end
$var wire 1 7, imm [4] $end
$var wire 1 8, imm [3] $end
$var wire 1 9, imm [2] $end
$var wire 1 :, imm [1] $end
$var wire 1 ;, imm [0] $end
$var wire 1 <, rs2_data [31] $end
$var wire 1 =, rs2_data [30] $end
$var wire 1 >, rs2_data [29] $end
$var wire 1 ?, rs2_data [28] $end
$var wire 1 @, rs2_data [27] $end
$var wire 1 A, rs2_data [26] $end
$var wire 1 B, rs2_data [25] $end
$var wire 1 C, rs2_data [24] $end
$var wire 1 D, rs2_data [23] $end
$var wire 1 E, rs2_data [22] $end
$var wire 1 F, rs2_data [21] $end
$var wire 1 G, rs2_data [20] $end
$var wire 1 H, rs2_data [19] $end
$var wire 1 I, rs2_data [18] $end
$var wire 1 J, rs2_data [17] $end
$var wire 1 K, rs2_data [16] $end
$var wire 1 L, rs2_data [15] $end
$var wire 1 M, rs2_data [14] $end
$var wire 1 N, rs2_data [13] $end
$var wire 1 O, rs2_data [12] $end
$var wire 1 P, rs2_data [11] $end
$var wire 1 Q, rs2_data [10] $end
$var wire 1 R, rs2_data [9] $end
$var wire 1 S, rs2_data [8] $end
$var wire 1 T, rs2_data [7] $end
$var wire 1 U, rs2_data [6] $end
$var wire 1 V, rs2_data [5] $end
$var wire 1 W, rs2_data [4] $end
$var wire 1 X, rs2_data [3] $end
$var wire 1 Y, rs2_data [2] $end
$var wire 1 Z, rs2_data [1] $end
$var wire 1 [, rs2_data [0] $end
$var wire 1 \, op_b_sel $end
$var wire 1 ], operand_b [31] $end
$var wire 1 ^, operand_b [30] $end
$var wire 1 _, operand_b [29] $end
$var wire 1 `, operand_b [28] $end
$var wire 1 a, operand_b [27] $end
$var wire 1 b, operand_b [26] $end
$var wire 1 c, operand_b [25] $end
$var wire 1 d, operand_b [24] $end
$var wire 1 e, operand_b [23] $end
$var wire 1 f, operand_b [22] $end
$var wire 1 g, operand_b [21] $end
$var wire 1 h, operand_b [20] $end
$var wire 1 i, operand_b [19] $end
$var wire 1 j, operand_b [18] $end
$var wire 1 k, operand_b [17] $end
$var wire 1 l, operand_b [16] $end
$var wire 1 m, operand_b [15] $end
$var wire 1 n, operand_b [14] $end
$var wire 1 o, operand_b [13] $end
$var wire 1 p, operand_b [12] $end
$var wire 1 q, operand_b [11] $end
$var wire 1 r, operand_b [10] $end
$var wire 1 s, operand_b [9] $end
$var wire 1 t, operand_b [8] $end
$var wire 1 u, operand_b [7] $end
$var wire 1 v, operand_b [6] $end
$var wire 1 w, operand_b [5] $end
$var wire 1 x, operand_b [4] $end
$var wire 1 y, operand_b [3] $end
$var wire 1 z, operand_b [2] $end
$var wire 1 {, operand_b [1] $end
$var wire 1 |, operand_b [0] $end
$upscope $end

$scope module ula $end
$var parameter 4 }, ADD $end
$var parameter 4 ~, SUB $end
$var parameter 4 !- SLT $end
$var parameter 4 "- SLTU $end
$var parameter 4 #- XOR $end
$var parameter 4 $- OR $end
$var parameter 4 %- AND $end
$var parameter 4 &- SLL $end
$var parameter 4 '- SRL $end
$var parameter 4 (- SRA $end
$var wire 1 )- operand_a [31] $end
$var wire 1 *- operand_a [30] $end
$var wire 1 +- operand_a [29] $end
$var wire 1 ,- operand_a [28] $end
$var wire 1 -- operand_a [27] $end
$var wire 1 .- operand_a [26] $end
$var wire 1 /- operand_a [25] $end
$var wire 1 0- operand_a [24] $end
$var wire 1 1- operand_a [23] $end
$var wire 1 2- operand_a [22] $end
$var wire 1 3- operand_a [21] $end
$var wire 1 4- operand_a [20] $end
$var wire 1 5- operand_a [19] $end
$var wire 1 6- operand_a [18] $end
$var wire 1 7- operand_a [17] $end
$var wire 1 8- operand_a [16] $end
$var wire 1 9- operand_a [15] $end
$var wire 1 :- operand_a [14] $end
$var wire 1 ;- operand_a [13] $end
$var wire 1 <- operand_a [12] $end
$var wire 1 =- operand_a [11] $end
$var wire 1 >- operand_a [10] $end
$var wire 1 ?- operand_a [9] $end
$var wire 1 @- operand_a [8] $end
$var wire 1 A- operand_a [7] $end
$var wire 1 B- operand_a [6] $end
$var wire 1 C- operand_a [5] $end
$var wire 1 D- operand_a [4] $end
$var wire 1 E- operand_a [3] $end
$var wire 1 F- operand_a [2] $end
$var wire 1 G- operand_a [1] $end
$var wire 1 H- operand_a [0] $end
$var wire 1 I- operand_b [31] $end
$var wire 1 J- operand_b [30] $end
$var wire 1 K- operand_b [29] $end
$var wire 1 L- operand_b [28] $end
$var wire 1 M- operand_b [27] $end
$var wire 1 N- operand_b [26] $end
$var wire 1 O- operand_b [25] $end
$var wire 1 P- operand_b [24] $end
$var wire 1 Q- operand_b [23] $end
$var wire 1 R- operand_b [22] $end
$var wire 1 S- operand_b [21] $end
$var wire 1 T- operand_b [20] $end
$var wire 1 U- operand_b [19] $end
$var wire 1 V- operand_b [18] $end
$var wire 1 W- operand_b [17] $end
$var wire 1 X- operand_b [16] $end
$var wire 1 Y- operand_b [15] $end
$var wire 1 Z- operand_b [14] $end
$var wire 1 [- operand_b [13] $end
$var wire 1 \- operand_b [12] $end
$var wire 1 ]- operand_b [11] $end
$var wire 1 ^- operand_b [10] $end
$var wire 1 _- operand_b [9] $end
$var wire 1 `- operand_b [8] $end
$var wire 1 a- operand_b [7] $end
$var wire 1 b- operand_b [6] $end
$var wire 1 c- operand_b [5] $end
$var wire 1 d- operand_b [4] $end
$var wire 1 e- operand_b [3] $end
$var wire 1 f- operand_b [2] $end
$var wire 1 g- operand_b [1] $end
$var wire 1 h- operand_b [0] $end
$var wire 1 i- alu_op [3] $end
$var wire 1 j- alu_op [2] $end
$var wire 1 k- alu_op [1] $end
$var wire 1 l- alu_op [0] $end
$var reg 32 m- alu_data [31:0] $end
$var wire 1 n- ua [32] $end
$var wire 1 o- ua [31] $end
$var wire 1 p- ua [30] $end
$var wire 1 q- ua [29] $end
$var wire 1 r- ua [28] $end
$var wire 1 s- ua [27] $end
$var wire 1 t- ua [26] $end
$var wire 1 u- ua [25] $end
$var wire 1 v- ua [24] $end
$var wire 1 w- ua [23] $end
$var wire 1 x- ua [22] $end
$var wire 1 y- ua [21] $end
$var wire 1 z- ua [20] $end
$var wire 1 {- ua [19] $end
$var wire 1 |- ua [18] $end
$var wire 1 }- ua [17] $end
$var wire 1 ~- ua [16] $end
$var wire 1 !. ua [15] $end
$var wire 1 ". ua [14] $end
$var wire 1 #. ua [13] $end
$var wire 1 $. ua [12] $end
$var wire 1 %. ua [11] $end
$var wire 1 &. ua [10] $end
$var wire 1 '. ua [9] $end
$var wire 1 (. ua [8] $end
$var wire 1 ). ua [7] $end
$var wire 1 *. ua [6] $end
$var wire 1 +. ua [5] $end
$var wire 1 ,. ua [4] $end
$var wire 1 -. ua [3] $end
$var wire 1 .. ua [2] $end
$var wire 1 /. ua [1] $end
$var wire 1 0. ua [0] $end
$var wire 1 1. ub [32] $end
$var wire 1 2. ub [31] $end
$var wire 1 3. ub [30] $end
$var wire 1 4. ub [29] $end
$var wire 1 5. ub [28] $end
$var wire 1 6. ub [27] $end
$var wire 1 7. ub [26] $end
$var wire 1 8. ub [25] $end
$var wire 1 9. ub [24] $end
$var wire 1 :. ub [23] $end
$var wire 1 ;. ub [22] $end
$var wire 1 <. ub [21] $end
$var wire 1 =. ub [20] $end
$var wire 1 >. ub [19] $end
$var wire 1 ?. ub [18] $end
$var wire 1 @. ub [17] $end
$var wire 1 A. ub [16] $end
$var wire 1 B. ub [15] $end
$var wire 1 C. ub [14] $end
$var wire 1 D. ub [13] $end
$var wire 1 E. ub [12] $end
$var wire 1 F. ub [11] $end
$var wire 1 G. ub [10] $end
$var wire 1 H. ub [9] $end
$var wire 1 I. ub [8] $end
$var wire 1 J. ub [7] $end
$var wire 1 K. ub [6] $end
$var wire 1 L. ub [5] $end
$var wire 1 M. ub [4] $end
$var wire 1 N. ub [3] $end
$var wire 1 O. ub [2] $end
$var wire 1 P. ub [1] $end
$var wire 1 Q. ub [0] $end
$var wire 1 R. uc [32] $end
$var wire 1 S. uc [31] $end
$var wire 1 T. uc [30] $end
$var wire 1 U. uc [29] $end
$var wire 1 V. uc [28] $end
$var wire 1 W. uc [27] $end
$var wire 1 X. uc [26] $end
$var wire 1 Y. uc [25] $end
$var wire 1 Z. uc [24] $end
$var wire 1 [. uc [23] $end
$var wire 1 \. uc [22] $end
$var wire 1 ]. uc [21] $end
$var wire 1 ^. uc [20] $end
$var wire 1 _. uc [19] $end
$var wire 1 `. uc [18] $end
$var wire 1 a. uc [17] $end
$var wire 1 b. uc [16] $end
$var wire 1 c. uc [15] $end
$var wire 1 d. uc [14] $end
$var wire 1 e. uc [13] $end
$var wire 1 f. uc [12] $end
$var wire 1 g. uc [11] $end
$var wire 1 h. uc [10] $end
$var wire 1 i. uc [9] $end
$var wire 1 j. uc [8] $end
$var wire 1 k. uc [7] $end
$var wire 1 l. uc [6] $end
$var wire 1 m. uc [5] $end
$var wire 1 n. uc [4] $end
$var wire 1 o. uc [3] $end
$var wire 1 p. uc [2] $end
$var wire 1 q. uc [1] $end
$var wire 1 r. uc [0] $end
$var wire 1 s. c [31] $end
$var wire 1 t. c [30] $end
$var wire 1 u. c [29] $end
$var wire 1 v. c [28] $end
$var wire 1 w. c [27] $end
$var wire 1 x. c [26] $end
$var wire 1 y. c [25] $end
$var wire 1 z. c [24] $end
$var wire 1 {. c [23] $end
$var wire 1 |. c [22] $end
$var wire 1 }. c [21] $end
$var wire 1 ~. c [20] $end
$var wire 1 !/ c [19] $end
$var wire 1 "/ c [18] $end
$var wire 1 #/ c [17] $end
$var wire 1 $/ c [16] $end
$var wire 1 %/ c [15] $end
$var wire 1 &/ c [14] $end
$var wire 1 '/ c [13] $end
$var wire 1 (/ c [12] $end
$var wire 1 )/ c [11] $end
$var wire 1 */ c [10] $end
$var wire 1 +/ c [9] $end
$var wire 1 ,/ c [8] $end
$var wire 1 -/ c [7] $end
$var wire 1 ./ c [6] $end
$var wire 1 // c [5] $end
$var wire 1 0/ c [4] $end
$var wire 1 1/ c [3] $end
$var wire 1 2/ c [2] $end
$var wire 1 3/ c [1] $end
$var wire 1 4/ c [0] $end
$var wire 1 5/ s [31] $end
$var wire 1 6/ s [30] $end
$var wire 1 7/ s [29] $end
$var wire 1 8/ s [28] $end
$var wire 1 9/ s [27] $end
$var wire 1 :/ s [26] $end
$var wire 1 ;/ s [25] $end
$var wire 1 </ s [24] $end
$var wire 1 =/ s [23] $end
$var wire 1 >/ s [22] $end
$var wire 1 ?/ s [21] $end
$var wire 1 @/ s [20] $end
$var wire 1 A/ s [19] $end
$var wire 1 B/ s [18] $end
$var wire 1 C/ s [17] $end
$var wire 1 D/ s [16] $end
$var wire 1 E/ s [15] $end
$var wire 1 F/ s [14] $end
$var wire 1 G/ s [13] $end
$var wire 1 H/ s [12] $end
$var wire 1 I/ s [11] $end
$var wire 1 J/ s [10] $end
$var wire 1 K/ s [9] $end
$var wire 1 L/ s [8] $end
$var wire 1 M/ s [7] $end
$var wire 1 N/ s [6] $end
$var wire 1 O/ s [5] $end
$var wire 1 P/ s [4] $end
$var wire 1 Q/ s [3] $end
$var wire 1 R/ s [2] $end
$var wire 1 S/ s [1] $end
$var wire 1 T/ s [0] $end

$scope module ars $end
$var wire 1 )- din [31] $end
$var wire 1 *- din [30] $end
$var wire 1 +- din [29] $end
$var wire 1 ,- din [28] $end
$var wire 1 -- din [27] $end
$var wire 1 .- din [26] $end
$var wire 1 /- din [25] $end
$var wire 1 0- din [24] $end
$var wire 1 1- din [23] $end
$var wire 1 2- din [22] $end
$var wire 1 3- din [21] $end
$var wire 1 4- din [20] $end
$var wire 1 5- din [19] $end
$var wire 1 6- din [18] $end
$var wire 1 7- din [17] $end
$var wire 1 8- din [16] $end
$var wire 1 9- din [15] $end
$var wire 1 :- din [14] $end
$var wire 1 ;- din [13] $end
$var wire 1 <- din [12] $end
$var wire 1 =- din [11] $end
$var wire 1 >- din [10] $end
$var wire 1 ?- din [9] $end
$var wire 1 @- din [8] $end
$var wire 1 A- din [7] $end
$var wire 1 B- din [6] $end
$var wire 1 C- din [5] $end
$var wire 1 D- din [4] $end
$var wire 1 E- din [3] $end
$var wire 1 F- din [2] $end
$var wire 1 G- din [1] $end
$var wire 1 H- din [0] $end
$var wire 1 d- amount [4] $end
$var wire 1 e- amount [3] $end
$var wire 1 f- amount [2] $end
$var wire 1 g- amount [1] $end
$var wire 1 h- amount [0] $end
$var reg 32 U/ dout [31:0] $end
$var wire 1 V/ logic_shift [31] $end
$var wire 1 W/ logic_shift [30] $end
$var wire 1 X/ logic_shift [29] $end
$var wire 1 Y/ logic_shift [28] $end
$var wire 1 Z/ logic_shift [27] $end
$var wire 1 [/ logic_shift [26] $end
$var wire 1 \/ logic_shift [25] $end
$var wire 1 ]/ logic_shift [24] $end
$var wire 1 ^/ logic_shift [23] $end
$var wire 1 _/ logic_shift [22] $end
$var wire 1 `/ logic_shift [21] $end
$var wire 1 a/ logic_shift [20] $end
$var wire 1 b/ logic_shift [19] $end
$var wire 1 c/ logic_shift [18] $end
$var wire 1 d/ logic_shift [17] $end
$var wire 1 e/ logic_shift [16] $end
$var wire 1 f/ logic_shift [15] $end
$var wire 1 g/ logic_shift [14] $end
$var wire 1 h/ logic_shift [13] $end
$var wire 1 i/ logic_shift [12] $end
$var wire 1 j/ logic_shift [11] $end
$var wire 1 k/ logic_shift [10] $end
$var wire 1 l/ logic_shift [9] $end
$var wire 1 m/ logic_shift [8] $end
$var wire 1 n/ logic_shift [7] $end
$var wire 1 o/ logic_shift [6] $end
$var wire 1 p/ logic_shift [5] $end
$var wire 1 q/ logic_shift [4] $end
$var wire 1 r/ logic_shift [3] $end
$var wire 1 s/ logic_shift [2] $end
$var wire 1 t/ logic_shift [1] $end
$var wire 1 u/ logic_shift [0] $end
$upscope $end
$upscope $end

$scope module usl $end
$var wire 1 0 clk_i $end
$var wire 1 1 rst_ni $end
$var wire 1 v/ st_en $end
$var wire 1 w/ addr [11] $end
$var wire 1 x/ addr [10] $end
$var wire 1 y/ addr [9] $end
$var wire 1 z/ addr [8] $end
$var wire 1 {/ addr [7] $end
$var wire 1 |/ addr [6] $end
$var wire 1 }/ addr [5] $end
$var wire 1 ~/ addr [4] $end
$var wire 1 !0 addr [3] $end
$var wire 1 "0 addr [2] $end
$var wire 1 #0 addr [1] $end
$var wire 1 $0 addr [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 st_data [31] $end
$var wire 1 *0 st_data [30] $end
$var wire 1 +0 st_data [29] $end
$var wire 1 ,0 st_data [28] $end
$var wire 1 -0 st_data [27] $end
$var wire 1 .0 st_data [26] $end
$var wire 1 /0 st_data [25] $end
$var wire 1 00 st_data [24] $end
$var wire 1 10 st_data [23] $end
$var wire 1 20 st_data [22] $end
$var wire 1 30 st_data [21] $end
$var wire 1 40 st_data [20] $end
$var wire 1 50 st_data [19] $end
$var wire 1 60 st_data [18] $end
$var wire 1 70 st_data [17] $end
$var wire 1 80 st_data [16] $end
$var wire 1 90 st_data [15] $end
$var wire 1 :0 st_data [14] $end
$var wire 1 ;0 st_data [13] $end
$var wire 1 <0 st_data [12] $end
$var wire 1 =0 st_data [11] $end
$var wire 1 >0 st_data [10] $end
$var wire 1 ?0 st_data [9] $end
$var wire 1 @0 st_data [8] $end
$var wire 1 A0 st_data [7] $end
$var wire 1 B0 st_data [6] $end
$var wire 1 C0 st_data [5] $end
$var wire 1 D0 st_data [4] $end
$var wire 1 E0 st_data [3] $end
$var wire 1 F0 st_data [2] $end
$var wire 1 G0 st_data [1] $end
$var wire 1 H0 st_data [0] $end
$var wire 1 2 io_sw [31] $end
$var wire 1 3 io_sw [30] $end
$var wire 1 4 io_sw [29] $end
$var wire 1 5 io_sw [28] $end
$var wire 1 6 io_sw [27] $end
$var wire 1 7 io_sw [26] $end
$var wire 1 8 io_sw [25] $end
$var wire 1 9 io_sw [24] $end
$var wire 1 : io_sw [23] $end
$var wire 1 ; io_sw [22] $end
$var wire 1 < io_sw [21] $end
$var wire 1 = io_sw [20] $end
$var wire 1 > io_sw [19] $end
$var wire 1 ? io_sw [18] $end
$var wire 1 @ io_sw [17] $end
$var wire 1 A io_sw [16] $end
$var wire 1 B io_sw [15] $end
$var wire 1 C io_sw [14] $end
$var wire 1 D io_sw [13] $end
$var wire 1 E io_sw [12] $end
$var wire 1 F io_sw [11] $end
$var wire 1 G io_sw [10] $end
$var wire 1 H io_sw [9] $end
$var wire 1 I io_sw [8] $end
$var wire 1 J io_sw [7] $end
$var wire 1 K io_sw [6] $end
$var wire 1 L io_sw [5] $end
$var wire 1 M io_sw [4] $end
$var wire 1 N io_sw [3] $end
$var wire 1 O io_sw [2] $end
$var wire 1 P io_sw [1] $end
$var wire 1 Q io_sw [0] $end
$var wire 1 I0 ld_data [31] $end
$var wire 1 J0 ld_data [30] $end
$var wire 1 K0 ld_data [29] $end
$var wire 1 L0 ld_data [28] $end
$var wire 1 M0 ld_data [27] $end
$var wire 1 N0 ld_data [26] $end
$var wire 1 O0 ld_data [25] $end
$var wire 1 P0 ld_data [24] $end
$var wire 1 Q0 ld_data [23] $end
$var wire 1 R0 ld_data [22] $end
$var wire 1 S0 ld_data [21] $end
$var wire 1 T0 ld_data [20] $end
$var wire 1 U0 ld_data [19] $end
$var wire 1 V0 ld_data [18] $end
$var wire 1 W0 ld_data [17] $end
$var wire 1 X0 ld_data [16] $end
$var wire 1 Y0 ld_data [15] $end
$var wire 1 Z0 ld_data [14] $end
$var wire 1 [0 ld_data [13] $end
$var wire 1 \0 ld_data [12] $end
$var wire 1 ]0 ld_data [11] $end
$var wire 1 ^0 ld_data [10] $end
$var wire 1 _0 ld_data [9] $end
$var wire 1 `0 ld_data [8] $end
$var wire 1 a0 ld_data [7] $end
$var wire 1 b0 ld_data [6] $end
$var wire 1 c0 ld_data [5] $end
$var wire 1 d0 ld_data [4] $end
$var wire 1 e0 ld_data [3] $end
$var wire 1 f0 ld_data [2] $end
$var wire 1 g0 ld_data [1] $end
$var wire 1 h0 ld_data [0] $end
$var wire 1 _ io_lcd [31] $end
$var wire 1 ` io_lcd [30] $end
$var wire 1 a io_lcd [29] $end
$var wire 1 b io_lcd [28] $end
$var wire 1 c io_lcd [27] $end
$var wire 1 d io_lcd [26] $end
$var wire 1 e io_lcd [25] $end
$var wire 1 f io_lcd [24] $end
$var wire 1 g io_lcd [23] $end
$var wire 1 h io_lcd [22] $end
$var wire 1 i io_lcd [21] $end
$var wire 1 j io_lcd [20] $end
$var wire 1 k io_lcd [19] $end
$var wire 1 l io_lcd [18] $end
$var wire 1 m io_lcd [17] $end
$var wire 1 n io_lcd [16] $end
$var wire 1 o io_lcd [15] $end
$var wire 1 p io_lcd [14] $end
$var wire 1 q io_lcd [13] $end
$var wire 1 r io_lcd [12] $end
$var wire 1 s io_lcd [11] $end
$var wire 1 t io_lcd [10] $end
$var wire 1 u io_lcd [9] $end
$var wire 1 v io_lcd [8] $end
$var wire 1 w io_lcd [7] $end
$var wire 1 x io_lcd [6] $end
$var wire 1 y io_lcd [5] $end
$var wire 1 z io_lcd [4] $end
$var wire 1 { io_lcd [3] $end
$var wire 1 | io_lcd [2] $end
$var wire 1 } io_lcd [1] $end
$var wire 1 ~ io_lcd [0] $end
$var wire 1 !! io_ledg [31] $end
$var wire 1 "! io_ledg [30] $end
$var wire 1 #! io_ledg [29] $end
$var wire 1 $! io_ledg [28] $end
$var wire 1 %! io_ledg [27] $end
$var wire 1 &! io_ledg [26] $end
$var wire 1 '! io_ledg [25] $end
$var wire 1 (! io_ledg [24] $end
$var wire 1 )! io_ledg [23] $end
$var wire 1 *! io_ledg [22] $end
$var wire 1 +! io_ledg [21] $end
$var wire 1 ,! io_ledg [20] $end
$var wire 1 -! io_ledg [19] $end
$var wire 1 .! io_ledg [18] $end
$var wire 1 /! io_ledg [17] $end
$var wire 1 0! io_ledg [16] $end
$var wire 1 1! io_ledg [15] $end
$var wire 1 2! io_ledg [14] $end
$var wire 1 3! io_ledg [13] $end
$var wire 1 4! io_ledg [12] $end
$var wire 1 5! io_ledg [11] $end
$var wire 1 6! io_ledg [10] $end
$var wire 1 7! io_ledg [9] $end
$var wire 1 8! io_ledg [8] $end
$var wire 1 9! io_ledg [7] $end
$var wire 1 :! io_ledg [6] $end
$var wire 1 ;! io_ledg [5] $end
$var wire 1 <! io_ledg [4] $end
$var wire 1 =! io_ledg [3] $end
$var wire 1 >! io_ledg [2] $end
$var wire 1 ?! io_ledg [1] $end
$var wire 1 @! io_ledg [0] $end
$var wire 1 A! io_ledr [31] $end
$var wire 1 B! io_ledr [30] $end
$var wire 1 C! io_ledr [29] $end
$var wire 1 D! io_ledr [28] $end
$var wire 1 E! io_ledr [27] $end
$var wire 1 F! io_ledr [26] $end
$var wire 1 G! io_ledr [25] $end
$var wire 1 H! io_ledr [24] $end
$var wire 1 I! io_ledr [23] $end
$var wire 1 J! io_ledr [22] $end
$var wire 1 K! io_ledr [21] $end
$var wire 1 L! io_ledr [20] $end
$var wire 1 M! io_ledr [19] $end
$var wire 1 N! io_ledr [18] $end
$var wire 1 O! io_ledr [17] $end
$var wire 1 P! io_ledr [16] $end
$var wire 1 Q! io_ledr [15] $end
$var wire 1 R! io_ledr [14] $end
$var wire 1 S! io_ledr [13] $end
$var wire 1 T! io_ledr [12] $end
$var wire 1 U! io_ledr [11] $end
$var wire 1 V! io_ledr [10] $end
$var wire 1 W! io_ledr [9] $end
$var wire 1 X! io_ledr [8] $end
$var wire 1 Y! io_ledr [7] $end
$var wire 1 Z! io_ledr [6] $end
$var wire 1 [! io_ledr [5] $end
$var wire 1 \! io_ledr [4] $end
$var wire 1 ]! io_ledr [3] $end
$var wire 1 ^! io_ledr [2] $end
$var wire 1 _! io_ledr [1] $end
$var wire 1 `! io_ledr [0] $end
$var wire 1 a! io_hex0 [31] $end
$var wire 1 b! io_hex0 [30] $end
$var wire 1 c! io_hex0 [29] $end
$var wire 1 d! io_hex0 [28] $end
$var wire 1 e! io_hex0 [27] $end
$var wire 1 f! io_hex0 [26] $end
$var wire 1 g! io_hex0 [25] $end
$var wire 1 h! io_hex0 [24] $end
$var wire 1 i! io_hex0 [23] $end
$var wire 1 j! io_hex0 [22] $end
$var wire 1 k! io_hex0 [21] $end
$var wire 1 l! io_hex0 [20] $end
$var wire 1 m! io_hex0 [19] $end
$var wire 1 n! io_hex0 [18] $end
$var wire 1 o! io_hex0 [17] $end
$var wire 1 p! io_hex0 [16] $end
$var wire 1 q! io_hex0 [15] $end
$var wire 1 r! io_hex0 [14] $end
$var wire 1 s! io_hex0 [13] $end
$var wire 1 t! io_hex0 [12] $end
$var wire 1 u! io_hex0 [11] $end
$var wire 1 v! io_hex0 [10] $end
$var wire 1 w! io_hex0 [9] $end
$var wire 1 x! io_hex0 [8] $end
$var wire 1 y! io_hex0 [7] $end
$var wire 1 z! io_hex0 [6] $end
$var wire 1 {! io_hex0 [5] $end
$var wire 1 |! io_hex0 [4] $end
$var wire 1 }! io_hex0 [3] $end
$var wire 1 ~! io_hex0 [2] $end
$var wire 1 !" io_hex0 [1] $end
$var wire 1 "" io_hex0 [0] $end
$var wire 1 #" io_hex1 [31] $end
$var wire 1 $" io_hex1 [30] $end
$var wire 1 %" io_hex1 [29] $end
$var wire 1 &" io_hex1 [28] $end
$var wire 1 '" io_hex1 [27] $end
$var wire 1 (" io_hex1 [26] $end
$var wire 1 )" io_hex1 [25] $end
$var wire 1 *" io_hex1 [24] $end
$var wire 1 +" io_hex1 [23] $end
$var wire 1 ," io_hex1 [22] $end
$var wire 1 -" io_hex1 [21] $end
$var wire 1 ." io_hex1 [20] $end
$var wire 1 /" io_hex1 [19] $end
$var wire 1 0" io_hex1 [18] $end
$var wire 1 1" io_hex1 [17] $end
$var wire 1 2" io_hex1 [16] $end
$var wire 1 3" io_hex1 [15] $end
$var wire 1 4" io_hex1 [14] $end
$var wire 1 5" io_hex1 [13] $end
$var wire 1 6" io_hex1 [12] $end
$var wire 1 7" io_hex1 [11] $end
$var wire 1 8" io_hex1 [10] $end
$var wire 1 9" io_hex1 [9] $end
$var wire 1 :" io_hex1 [8] $end
$var wire 1 ;" io_hex1 [7] $end
$var wire 1 <" io_hex1 [6] $end
$var wire 1 =" io_hex1 [5] $end
$var wire 1 >" io_hex1 [4] $end
$var wire 1 ?" io_hex1 [3] $end
$var wire 1 @" io_hex1 [2] $end
$var wire 1 A" io_hex1 [1] $end
$var wire 1 B" io_hex1 [0] $end
$var wire 1 C" io_hex2 [31] $end
$var wire 1 D" io_hex2 [30] $end
$var wire 1 E" io_hex2 [29] $end
$var wire 1 F" io_hex2 [28] $end
$var wire 1 G" io_hex2 [27] $end
$var wire 1 H" io_hex2 [26] $end
$var wire 1 I" io_hex2 [25] $end
$var wire 1 J" io_hex2 [24] $end
$var wire 1 K" io_hex2 [23] $end
$var wire 1 L" io_hex2 [22] $end
$var wire 1 M" io_hex2 [21] $end
$var wire 1 N" io_hex2 [20] $end
$var wire 1 O" io_hex2 [19] $end
$var wire 1 P" io_hex2 [18] $end
$var wire 1 Q" io_hex2 [17] $end
$var wire 1 R" io_hex2 [16] $end
$var wire 1 S" io_hex2 [15] $end
$var wire 1 T" io_hex2 [14] $end
$var wire 1 U" io_hex2 [13] $end
$var wire 1 V" io_hex2 [12] $end
$var wire 1 W" io_hex2 [11] $end
$var wire 1 X" io_hex2 [10] $end
$var wire 1 Y" io_hex2 [9] $end
$var wire 1 Z" io_hex2 [8] $end
$var wire 1 [" io_hex2 [7] $end
$var wire 1 \" io_hex2 [6] $end
$var wire 1 ]" io_hex2 [5] $end
$var wire 1 ^" io_hex2 [4] $end
$var wire 1 _" io_hex2 [3] $end
$var wire 1 `" io_hex2 [2] $end
$var wire 1 a" io_hex2 [1] $end
$var wire 1 b" io_hex2 [0] $end
$var wire 1 c" io_hex3 [31] $end
$var wire 1 d" io_hex3 [30] $end
$var wire 1 e" io_hex3 [29] $end
$var wire 1 f" io_hex3 [28] $end
$var wire 1 g" io_hex3 [27] $end
$var wire 1 h" io_hex3 [26] $end
$var wire 1 i" io_hex3 [25] $end
$var wire 1 j" io_hex3 [24] $end
$var wire 1 k" io_hex3 [23] $end
$var wire 1 l" io_hex3 [22] $end
$var wire 1 m" io_hex3 [21] $end
$var wire 1 n" io_hex3 [20] $end
$var wire 1 o" io_hex3 [19] $end
$var wire 1 p" io_hex3 [18] $end
$var wire 1 q" io_hex3 [17] $end
$var wire 1 r" io_hex3 [16] $end
$var wire 1 s" io_hex3 [15] $end
$var wire 1 t" io_hex3 [14] $end
$var wire 1 u" io_hex3 [13] $end
$var wire 1 v" io_hex3 [12] $end
$var wire 1 w" io_hex3 [11] $end
$var wire 1 x" io_hex3 [10] $end
$var wire 1 y" io_hex3 [9] $end
$var wire 1 z" io_hex3 [8] $end
$var wire 1 {" io_hex3 [7] $end
$var wire 1 |" io_hex3 [6] $end
$var wire 1 }" io_hex3 [5] $end
$var wire 1 ~" io_hex3 [4] $end
$var wire 1 !# io_hex3 [3] $end
$var wire 1 "# io_hex3 [2] $end
$var wire 1 ## io_hex3 [1] $end
$var wire 1 $# io_hex3 [0] $end
$var wire 1 %# io_hex4 [31] $end
$var wire 1 &# io_hex4 [30] $end
$var wire 1 '# io_hex4 [29] $end
$var wire 1 (# io_hex4 [28] $end
$var wire 1 )# io_hex4 [27] $end
$var wire 1 *# io_hex4 [26] $end
$var wire 1 +# io_hex4 [25] $end
$var wire 1 ,# io_hex4 [24] $end
$var wire 1 -# io_hex4 [23] $end
$var wire 1 .# io_hex4 [22] $end
$var wire 1 /# io_hex4 [21] $end
$var wire 1 0# io_hex4 [20] $end
$var wire 1 1# io_hex4 [19] $end
$var wire 1 2# io_hex4 [18] $end
$var wire 1 3# io_hex4 [17] $end
$var wire 1 4# io_hex4 [16] $end
$var wire 1 5# io_hex4 [15] $end
$var wire 1 6# io_hex4 [14] $end
$var wire 1 7# io_hex4 [13] $end
$var wire 1 8# io_hex4 [12] $end
$var wire 1 9# io_hex4 [11] $end
$var wire 1 :# io_hex4 [10] $end
$var wire 1 ;# io_hex4 [9] $end
$var wire 1 <# io_hex4 [8] $end
$var wire 1 =# io_hex4 [7] $end
$var wire 1 ># io_hex4 [6] $end
$var wire 1 ?# io_hex4 [5] $end
$var wire 1 @# io_hex4 [4] $end
$var wire 1 A# io_hex4 [3] $end
$var wire 1 B# io_hex4 [2] $end
$var wire 1 C# io_hex4 [1] $end
$var wire 1 D# io_hex4 [0] $end
$var wire 1 E# io_hex5 [31] $end
$var wire 1 F# io_hex5 [30] $end
$var wire 1 G# io_hex5 [29] $end
$var wire 1 H# io_hex5 [28] $end
$var wire 1 I# io_hex5 [27] $end
$var wire 1 J# io_hex5 [26] $end
$var wire 1 K# io_hex5 [25] $end
$var wire 1 L# io_hex5 [24] $end
$var wire 1 M# io_hex5 [23] $end
$var wire 1 N# io_hex5 [22] $end
$var wire 1 O# io_hex5 [21] $end
$var wire 1 P# io_hex5 [20] $end
$var wire 1 Q# io_hex5 [19] $end
$var wire 1 R# io_hex5 [18] $end
$var wire 1 S# io_hex5 [17] $end
$var wire 1 T# io_hex5 [16] $end
$var wire 1 U# io_hex5 [15] $end
$var wire 1 V# io_hex5 [14] $end
$var wire 1 W# io_hex5 [13] $end
$var wire 1 X# io_hex5 [12] $end
$var wire 1 Y# io_hex5 [11] $end
$var wire 1 Z# io_hex5 [10] $end
$var wire 1 [# io_hex5 [9] $end
$var wire 1 \# io_hex5 [8] $end
$var wire 1 ]# io_hex5 [7] $end
$var wire 1 ^# io_hex5 [6] $end
$var wire 1 _# io_hex5 [5] $end
$var wire 1 `# io_hex5 [4] $end
$var wire 1 a# io_hex5 [3] $end
$var wire 1 b# io_hex5 [2] $end
$var wire 1 c# io_hex5 [1] $end
$var wire 1 d# io_hex5 [0] $end
$var wire 1 e# io_hex6 [31] $end
$var wire 1 f# io_hex6 [30] $end
$var wire 1 g# io_hex6 [29] $end
$var wire 1 h# io_hex6 [28] $end
$var wire 1 i# io_hex6 [27] $end
$var wire 1 j# io_hex6 [26] $end
$var wire 1 k# io_hex6 [25] $end
$var wire 1 l# io_hex6 [24] $end
$var wire 1 m# io_hex6 [23] $end
$var wire 1 n# io_hex6 [22] $end
$var wire 1 o# io_hex6 [21] $end
$var wire 1 p# io_hex6 [20] $end
$var wire 1 q# io_hex6 [19] $end
$var wire 1 r# io_hex6 [18] $end
$var wire 1 s# io_hex6 [17] $end
$var wire 1 t# io_hex6 [16] $end
$var wire 1 u# io_hex6 [15] $end
$var wire 1 v# io_hex6 [14] $end
$var wire 1 w# io_hex6 [13] $end
$var wire 1 x# io_hex6 [12] $end
$var wire 1 y# io_hex6 [11] $end
$var wire 1 z# io_hex6 [10] $end
$var wire 1 {# io_hex6 [9] $end
$var wire 1 |# io_hex6 [8] $end
$var wire 1 }# io_hex6 [7] $end
$var wire 1 ~# io_hex6 [6] $end
$var wire 1 !$ io_hex6 [5] $end
$var wire 1 "$ io_hex6 [4] $end
$var wire 1 #$ io_hex6 [3] $end
$var wire 1 $$ io_hex6 [2] $end
$var wire 1 %$ io_hex6 [1] $end
$var wire 1 &$ io_hex6 [0] $end
$var wire 1 '$ io_hex7 [31] $end
$var wire 1 ($ io_hex7 [30] $end
$var wire 1 )$ io_hex7 [29] $end
$var wire 1 *$ io_hex7 [28] $end
$var wire 1 +$ io_hex7 [27] $end
$var wire 1 ,$ io_hex7 [26] $end
$var wire 1 -$ io_hex7 [25] $end
$var wire 1 .$ io_hex7 [24] $end
$var wire 1 /$ io_hex7 [23] $end
$var wire 1 0$ io_hex7 [22] $end
$var wire 1 1$ io_hex7 [21] $end
$var wire 1 2$ io_hex7 [20] $end
$var wire 1 3$ io_hex7 [19] $end
$var wire 1 4$ io_hex7 [18] $end
$var wire 1 5$ io_hex7 [17] $end
$var wire 1 6$ io_hex7 [16] $end
$var wire 1 7$ io_hex7 [15] $end
$var wire 1 8$ io_hex7 [14] $end
$var wire 1 9$ io_hex7 [13] $end
$var wire 1 :$ io_hex7 [12] $end
$var wire 1 ;$ io_hex7 [11] $end
$var wire 1 <$ io_hex7 [10] $end
$var wire 1 =$ io_hex7 [9] $end
$var wire 1 >$ io_hex7 [8] $end
$var wire 1 ?$ io_hex7 [7] $end
$var wire 1 @$ io_hex7 [6] $end
$var wire 1 A$ io_hex7 [5] $end
$var wire 1 B$ io_hex7 [4] $end
$var wire 1 C$ io_hex7 [3] $end
$var wire 1 D$ io_hex7 [2] $end
$var wire 1 E$ io_hex7 [1] $end
$var wire 1 F$ io_hex7 [0] $end
$var reg 1 i0 data_we $end
$var reg 1 j0 out_we $end
$var reg 1 k0 in_we $end
$var reg 32 l0 data_wire [31:0] $end
$var reg 32 m0 out_wire [31:0] $end
$var reg 32 n0 in_wire [31:0] $end
$var reg 32 o0 sw_wire [31:0] $end
$var reg 11 p0 da [10:0] $end
$var reg 8 q0 oa [7:0] $end
$var reg 8 r0 ia [7:0] $end

$scope module ad $end
$var wire 1 w/ main_addr [11] $end
$var wire 1 x/ main_addr [10] $end
$var wire 1 y/ main_addr [9] $end
$var wire 1 z/ main_addr [8] $end
$var wire 1 {/ main_addr [7] $end
$var wire 1 |/ main_addr [6] $end
$var wire 1 }/ main_addr [5] $end
$var wire 1 ~/ main_addr [4] $end
$var wire 1 !0 main_addr [3] $end
$var wire 1 "0 main_addr [2] $end
$var wire 1 #0 main_addr [1] $end
$var wire 1 $0 main_addr [0] $end
$var wire 1 v/ main_we $end
$var wire 1 s0 data_addr [10] $end
$var wire 1 t0 data_addr [9] $end
$var wire 1 u0 data_addr [8] $end
$var wire 1 v0 data_addr [7] $end
$var wire 1 w0 data_addr [6] $end
$var wire 1 x0 data_addr [5] $end
$var wire 1 y0 data_addr [4] $end
$var wire 1 z0 data_addr [3] $end
$var wire 1 {0 data_addr [2] $end
$var wire 1 |0 data_addr [1] $end
$var wire 1 }0 data_addr [0] $end
$var wire 1 ~0 out_addr [7] $end
$var wire 1 !1 out_addr [6] $end
$var wire 1 "1 out_addr [5] $end
$var wire 1 #1 out_addr [4] $end
$var wire 1 $1 out_addr [3] $end
$var wire 1 %1 out_addr [2] $end
$var wire 1 &1 out_addr [1] $end
$var wire 1 '1 out_addr [0] $end
$var wire 1 (1 in_addr [7] $end
$var wire 1 )1 in_addr [6] $end
$var wire 1 *1 in_addr [5] $end
$var wire 1 +1 in_addr [4] $end
$var wire 1 ,1 in_addr [3] $end
$var wire 1 -1 in_addr [2] $end
$var wire 1 .1 in_addr [1] $end
$var wire 1 /1 in_addr [0] $end
$var wire 1 01 data_en $end
$var wire 1 11 out_en $end
$var wire 1 21 in_en $end
$upscope $end

$scope module sw $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 31 B [11] $end
$var wire 1 41 B [10] $end
$var wire 1 51 B [9] $end
$var wire 1 61 B [8] $end
$var wire 1 71 B [7] $end
$var wire 1 81 B [6] $end
$var wire 1 91 B [5] $end
$var wire 1 :1 B [4] $end
$var wire 1 ;1 B [3] $end
$var wire 1 <1 B [2] $end
$var wire 1 =1 B [1] $end
$var wire 1 >1 B [0] $end
$var wire 1 2 ins [31] $end
$var wire 1 3 ins [30] $end
$var wire 1 4 ins [29] $end
$var wire 1 5 ins [28] $end
$var wire 1 6 ins [27] $end
$var wire 1 7 ins [26] $end
$var wire 1 8 ins [25] $end
$var wire 1 9 ins [24] $end
$var wire 1 : ins [23] $end
$var wire 1 ; ins [22] $end
$var wire 1 < ins [21] $end
$var wire 1 = ins [20] $end
$var wire 1 > ins [19] $end
$var wire 1 ? ins [18] $end
$var wire 1 @ ins [17] $end
$var wire 1 A ins [16] $end
$var wire 1 B ins [15] $end
$var wire 1 C ins [14] $end
$var wire 1 D ins [13] $end
$var wire 1 E ins [12] $end
$var wire 1 F ins [11] $end
$var wire 1 G ins [10] $end
$var wire 1 H ins [9] $end
$var wire 1 I ins [8] $end
$var wire 1 J ins [7] $end
$var wire 1 K ins [6] $end
$var wire 1 L ins [5] $end
$var wire 1 M ins [4] $end
$var wire 1 N ins [3] $end
$var wire 1 O ins [2] $end
$var wire 1 P ins [1] $end
$var wire 1 Q ins [0] $end
$var wire 1 ?1 outs [31] $end
$var wire 1 @1 outs [30] $end
$var wire 1 A1 outs [29] $end
$var wire 1 B1 outs [28] $end
$var wire 1 C1 outs [27] $end
$var wire 1 D1 outs [26] $end
$var wire 1 E1 outs [25] $end
$var wire 1 F1 outs [24] $end
$var wire 1 G1 outs [23] $end
$var wire 1 H1 outs [22] $end
$var wire 1 I1 outs [21] $end
$var wire 1 J1 outs [20] $end
$var wire 1 K1 outs [19] $end
$var wire 1 L1 outs [18] $end
$var wire 1 M1 outs [17] $end
$var wire 1 N1 outs [16] $end
$var wire 1 O1 outs [15] $end
$var wire 1 P1 outs [14] $end
$var wire 1 Q1 outs [13] $end
$var wire 1 R1 outs [12] $end
$var wire 1 S1 outs [11] $end
$var wire 1 T1 outs [10] $end
$var wire 1 U1 outs [9] $end
$var wire 1 V1 outs [8] $end
$var wire 1 W1 outs [7] $end
$var wire 1 X1 outs [6] $end
$var wire 1 Y1 outs [5] $end
$var wire 1 Z1 outs [4] $end
$var wire 1 [1 outs [3] $end
$var wire 1 \1 outs [2] $end
$var wire 1 ]1 outs [1] $end
$var wire 1 ^1 outs [0] $end
$upscope $end

$scope module dmem $end
$var wire 1 _1 address [10] $end
$var wire 1 `1 address [9] $end
$var wire 1 a1 address [8] $end
$var wire 1 b1 address [7] $end
$var wire 1 c1 address [6] $end
$var wire 1 d1 address [5] $end
$var wire 1 e1 address [4] $end
$var wire 1 f1 address [3] $end
$var wire 1 g1 address [2] $end
$var wire 1 h1 address [1] $end
$var wire 1 i1 address [0] $end
$var tri1 1 %0 byteena [3] $end
$var tri1 1 &0 byteena [2] $end
$var tri1 1 '0 byteena [1] $end
$var tri1 1 (0 byteena [0] $end
$var tri1 1 j1 clock $end
$var wire 1 )0 data [31] $end
$var wire 1 *0 data [30] $end
$var wire 1 +0 data [29] $end
$var wire 1 ,0 data [28] $end
$var wire 1 -0 data [27] $end
$var wire 1 .0 data [26] $end
$var wire 1 /0 data [25] $end
$var wire 1 00 data [24] $end
$var wire 1 10 data [23] $end
$var wire 1 20 data [22] $end
$var wire 1 30 data [21] $end
$var wire 1 40 data [20] $end
$var wire 1 50 data [19] $end
$var wire 1 60 data [18] $end
$var wire 1 70 data [17] $end
$var wire 1 80 data [16] $end
$var wire 1 90 data [15] $end
$var wire 1 :0 data [14] $end
$var wire 1 ;0 data [13] $end
$var wire 1 <0 data [12] $end
$var wire 1 =0 data [11] $end
$var wire 1 >0 data [10] $end
$var wire 1 ?0 data [9] $end
$var wire 1 @0 data [8] $end
$var wire 1 A0 data [7] $end
$var wire 1 B0 data [6] $end
$var wire 1 C0 data [5] $end
$var wire 1 D0 data [4] $end
$var wire 1 E0 data [3] $end
$var wire 1 F0 data [2] $end
$var wire 1 G0 data [1] $end
$var wire 1 H0 data [0] $end
$var wire 1 k1 wren $end
$var wire 1 l1 q [31] $end
$var wire 1 m1 q [30] $end
$var wire 1 n1 q [29] $end
$var wire 1 o1 q [28] $end
$var wire 1 p1 q [27] $end
$var wire 1 q1 q [26] $end
$var wire 1 r1 q [25] $end
$var wire 1 s1 q [24] $end
$var wire 1 t1 q [23] $end
$var wire 1 u1 q [22] $end
$var wire 1 v1 q [21] $end
$var wire 1 w1 q [20] $end
$var wire 1 x1 q [19] $end
$var wire 1 y1 q [18] $end
$var wire 1 z1 q [17] $end
$var wire 1 {1 q [16] $end
$var wire 1 |1 q [15] $end
$var wire 1 }1 q [14] $end
$var wire 1 ~1 q [13] $end
$var wire 1 !2 q [12] $end
$var wire 1 "2 q [11] $end
$var wire 1 #2 q [10] $end
$var wire 1 $2 q [9] $end
$var wire 1 %2 q [8] $end
$var wire 1 &2 q [7] $end
$var wire 1 '2 q [6] $end
$var wire 1 (2 q [5] $end
$var wire 1 )2 q [4] $end
$var wire 1 *2 q [3] $end
$var wire 1 +2 q [2] $end
$var wire 1 ,2 q [1] $end
$var wire 1 -2 q [0] $end
$var wire 1 .2 sub_wire0 [31] $end
$var wire 1 /2 sub_wire0 [30] $end
$var wire 1 02 sub_wire0 [29] $end
$var wire 1 12 sub_wire0 [28] $end
$var wire 1 22 sub_wire0 [27] $end
$var wire 1 32 sub_wire0 [26] $end
$var wire 1 42 sub_wire0 [25] $end
$var wire 1 52 sub_wire0 [24] $end
$var wire 1 62 sub_wire0 [23] $end
$var wire 1 72 sub_wire0 [22] $end
$var wire 1 82 sub_wire0 [21] $end
$var wire 1 92 sub_wire0 [20] $end
$var wire 1 :2 sub_wire0 [19] $end
$var wire 1 ;2 sub_wire0 [18] $end
$var wire 1 <2 sub_wire0 [17] $end
$var wire 1 =2 sub_wire0 [16] $end
$var wire 1 >2 sub_wire0 [15] $end
$var wire 1 ?2 sub_wire0 [14] $end
$var wire 1 @2 sub_wire0 [13] $end
$var wire 1 A2 sub_wire0 [12] $end
$var wire 1 B2 sub_wire0 [11] $end
$var wire 1 C2 sub_wire0 [10] $end
$var wire 1 D2 sub_wire0 [9] $end
$var wire 1 E2 sub_wire0 [8] $end
$var wire 1 F2 sub_wire0 [7] $end
$var wire 1 G2 sub_wire0 [6] $end
$var wire 1 H2 sub_wire0 [5] $end
$var wire 1 I2 sub_wire0 [4] $end
$var wire 1 J2 sub_wire0 [3] $end
$var wire 1 K2 sub_wire0 [2] $end
$var wire 1 L2 sub_wire0 [1] $end
$var wire 1 M2 sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 N2 width_a $end
$var parameter 32 O2 widthad_a $end
$var parameter 32 P2 numwords_a $end
$var parameter 96 Q2 outdata_reg_a $end
$var parameter 32 R2 address_aclr_a $end
$var parameter 32 S2 outdata_aclr_a $end
$var parameter 32 T2 indata_aclr_a $end
$var parameter 32 U2 wrcontrol_aclr_a $end
$var parameter 32 V2 byteena_aclr_a $end
$var parameter 32 W2 width_byteena_a $end
$var parameter 32 X2 width_b $end
$var parameter 32 Y2 widthad_b $end
$var parameter 32 Z2 numwords_b $end
$var parameter 48 [2 rdcontrol_reg_b $end
$var parameter 48 \2 address_reg_b $end
$var parameter 96 ]2 outdata_reg_b $end
$var parameter 32 ^2 outdata_aclr_b $end
$var parameter 32 _2 rdcontrol_aclr_b $end
$var parameter 48 `2 indata_reg_b $end
$var parameter 48 a2 wrcontrol_wraddress_reg_b $end
$var parameter 48 b2 byteena_reg_b $end
$var parameter 32 c2 indata_aclr_b $end
$var parameter 32 d2 wrcontrol_aclr_b $end
$var parameter 32 e2 address_aclr_b $end
$var parameter 32 f2 byteena_aclr_b $end
$var parameter 32 g2 width_byteena_b $end
$var parameter 48 h2 clock_enable_input_a $end
$var parameter 48 i2 clock_enable_output_a $end
$var parameter 48 j2 clock_enable_input_b $end
$var parameter 48 k2 clock_enable_output_b $end
$var parameter 120 l2 clock_enable_core_a $end
$var parameter 120 m2 clock_enable_core_b $end
$var parameter 160 n2 read_during_write_mode_port_a $end
$var parameter 160 o2 read_during_write_mode_port_b $end
$var parameter 40 p2 enable_ecc $end
$var parameter 32 q2 width_eccstatus $end
$var parameter 40 r2 ecc_pipeline_stage_enabled $end
$var parameter 88 s2 operation_mode $end
$var parameter 32 t2 byte_size $end
$var parameter 72 u2 read_during_write_mode_mixed_ports $end
$var parameter 32 v2 ram_block_type $end
$var parameter 48 w2 init_file $end
$var parameter 48 x2 init_file_layout $end
$var parameter 32 y2 maximum_depth $end
$var parameter 72 z2 intended_device_family $end
$var parameter 168 {2 lpm_hint $end
$var parameter 80 |2 lpm_type $end
$var parameter 24 }2 implement_in_les $end
$var parameter 40 ~2 power_up_uninitialized $end
$var parameter 32 !3 family_arria10 $end
$var tri0 1 k1 wren_a $end
$var tri0 1 "3 wren_b $end
$var tri1 1 #3 rden_a $end
$var tri1 1 $3 rden_b $end
$var wire 1 )0 data_a [31] $end
$var wire 1 *0 data_a [30] $end
$var wire 1 +0 data_a [29] $end
$var wire 1 ,0 data_a [28] $end
$var wire 1 -0 data_a [27] $end
$var wire 1 .0 data_a [26] $end
$var wire 1 /0 data_a [25] $end
$var wire 1 00 data_a [24] $end
$var wire 1 10 data_a [23] $end
$var wire 1 20 data_a [22] $end
$var wire 1 30 data_a [21] $end
$var wire 1 40 data_a [20] $end
$var wire 1 50 data_a [19] $end
$var wire 1 60 data_a [18] $end
$var wire 1 70 data_a [17] $end
$var wire 1 80 data_a [16] $end
$var wire 1 90 data_a [15] $end
$var wire 1 :0 data_a [14] $end
$var wire 1 ;0 data_a [13] $end
$var wire 1 <0 data_a [12] $end
$var wire 1 =0 data_a [11] $end
$var wire 1 >0 data_a [10] $end
$var wire 1 ?0 data_a [9] $end
$var wire 1 @0 data_a [8] $end
$var wire 1 A0 data_a [7] $end
$var wire 1 B0 data_a [6] $end
$var wire 1 C0 data_a [5] $end
$var wire 1 D0 data_a [4] $end
$var wire 1 E0 data_a [3] $end
$var wire 1 F0 data_a [2] $end
$var wire 1 G0 data_a [1] $end
$var wire 1 H0 data_a [0] $end
$var wire 1 %3 data_b [0] $end
$var wire 1 _1 address_a [10] $end
$var wire 1 `1 address_a [9] $end
$var wire 1 a1 address_a [8] $end
$var wire 1 b1 address_a [7] $end
$var wire 1 c1 address_a [6] $end
$var wire 1 d1 address_a [5] $end
$var wire 1 e1 address_a [4] $end
$var wire 1 f1 address_a [3] $end
$var wire 1 g1 address_a [2] $end
$var wire 1 h1 address_a [1] $end
$var wire 1 i1 address_a [0] $end
$var wire 1 &3 address_b [0] $end
$var tri1 1 j1 clock0 $end
$var wire 1 '3 clock1 $end
$var tri1 1 (3 clocken0 $end
$var tri1 1 )3 clocken1 $end
$var tri1 1 *3 clocken2 $end
$var tri1 1 +3 clocken3 $end
$var tri0 1 ,3 aclr0 $end
$var tri0 1 -3 aclr1 $end
$var tri1 1 %0 byteena_a [3] $end
$var tri1 1 &0 byteena_a [2] $end
$var tri1 1 '0 byteena_a [1] $end
$var tri1 1 (0 byteena_a [0] $end
$var tri1 1 .3 byteena_b [0] $end
$var tri0 1 /3 addressstall_a $end
$var tri0 1 03 addressstall_b $end
$var wire 1 .2 q_a [31] $end
$var wire 1 /2 q_a [30] $end
$var wire 1 02 q_a [29] $end
$var wire 1 12 q_a [28] $end
$var wire 1 22 q_a [27] $end
$var wire 1 32 q_a [26] $end
$var wire 1 42 q_a [25] $end
$var wire 1 52 q_a [24] $end
$var wire 1 62 q_a [23] $end
$var wire 1 72 q_a [22] $end
$var wire 1 82 q_a [21] $end
$var wire 1 92 q_a [20] $end
$var wire 1 :2 q_a [19] $end
$var wire 1 ;2 q_a [18] $end
$var wire 1 <2 q_a [17] $end
$var wire 1 =2 q_a [16] $end
$var wire 1 >2 q_a [15] $end
$var wire 1 ?2 q_a [14] $end
$var wire 1 @2 q_a [13] $end
$var wire 1 A2 q_a [12] $end
$var wire 1 B2 q_a [11] $end
$var wire 1 C2 q_a [10] $end
$var wire 1 D2 q_a [9] $end
$var wire 1 E2 q_a [8] $end
$var wire 1 F2 q_a [7] $end
$var wire 1 G2 q_a [6] $end
$var wire 1 H2 q_a [5] $end
$var wire 1 I2 q_a [4] $end
$var wire 1 J2 q_a [3] $end
$var wire 1 K2 q_a [2] $end
$var wire 1 L2 q_a [1] $end
$var wire 1 M2 q_a [0] $end
$var wire 1 13 q_b [0] $end
$var wire 1 23 eccstatus [2] $end
$var wire 1 33 eccstatus [1] $end
$var wire 1 43 eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 53 width_a $end
$var parameter 32 63 widthad_a $end
$var parameter 32 73 numwords_a $end
$var parameter 96 83 outdata_reg_a $end
$var parameter 32 93 address_aclr_a $end
$var parameter 32 :3 outdata_aclr_a $end
$var parameter 32 ;3 indata_aclr_a $end
$var parameter 32 <3 wrcontrol_aclr_a $end
$var parameter 32 =3 byteena_aclr_a $end
$var parameter 32 >3 width_byteena_a $end
$var parameter 32 ?3 width_b $end
$var parameter 32 @3 widthad_b $end
$var parameter 32 A3 numwords_b $end
$var parameter 48 B3 rdcontrol_reg_b $end
$var parameter 48 C3 address_reg_b $end
$var parameter 96 D3 outdata_reg_b $end
$var parameter 32 E3 outdata_aclr_b $end
$var parameter 32 F3 rdcontrol_aclr_b $end
$var parameter 48 G3 indata_reg_b $end
$var parameter 48 H3 wrcontrol_wraddress_reg_b $end
$var parameter 48 I3 byteena_reg_b $end
$var parameter 32 J3 indata_aclr_b $end
$var parameter 32 K3 wrcontrol_aclr_b $end
$var parameter 32 L3 address_aclr_b $end
$var parameter 32 M3 byteena_aclr_b $end
$var parameter 32 N3 width_byteena_b $end
$var parameter 48 O3 clock_enable_input_a $end
$var parameter 48 P3 clock_enable_output_a $end
$var parameter 48 Q3 clock_enable_input_b $end
$var parameter 48 R3 clock_enable_output_b $end
$var parameter 120 S3 clock_enable_core_a $end
$var parameter 120 T3 clock_enable_core_b $end
$var parameter 160 U3 read_during_write_mode_port_a $end
$var parameter 160 V3 read_during_write_mode_port_b $end
$var parameter 40 W3 enable_ecc $end
$var parameter 32 X3 width_eccstatus $end
$var parameter 40 Y3 ecc_pipeline_stage_enabled $end
$var parameter 88 Z3 operation_mode $end
$var parameter 32 [3 byte_size $end
$var parameter 72 \3 read_during_write_mode_mixed_ports $end
$var parameter 32 ]3 ram_block_type $end
$var parameter 48 ^3 init_file $end
$var parameter 48 _3 init_file_layout $end
$var parameter 32 `3 maximum_depth $end
$var parameter 72 a3 intended_device_family $end
$var parameter 168 b3 lpm_hint $end
$var parameter 80 c3 lpm_type $end
$var parameter 24 d3 implement_in_les $end
$var parameter 40 e3 power_up_uninitialized $end
$var parameter 24 f3 sim_show_memory_data_in_port_b_layout $end
$var parameter 32 g3 is_lutram $end
$var parameter 32 h3 is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 i3 is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 j3 check_simultaneous_read_write $end
$var parameter 32 k3 dual_port_addreg_b_clk0 $end
$var parameter 32 l3 dual_port_addreg_b_clk1 $end
$var parameter 32 m3 i_byte_size_tmp $end
$var parameter 32 n3 i_lutram_read $end
$var parameter 32 o3 enable_mem_data_b_reading $end
$var parameter 32 p3 family_arriav $end
$var parameter 32 q3 family_cyclonev $end
$var parameter 32 r3 family_base_arriav $end
$var parameter 32 s3 family_arria10 $end
$var parameter 32 t3 family_stratix10 $end
$var parameter 32 u3 family_arriavi $end
$var parameter 32 v3 family_nightfury $end
$var parameter 32 w3 family_arriavgz $end
$var parameter 32 x3 family_stratixv $end
$var parameter 32 y3 family_hardcopyiv $end
$var parameter 32 z3 family_hardcopyiii $end
$var parameter 32 {3 family_hardcopyii $end
$var parameter 32 |3 family_arriaiigz $end
$var parameter 32 }3 family_arriaiigx $end
$var parameter 32 ~3 family_stratixiii $end
$var parameter 32 !4 family_zippleback $end
$var parameter 32 "4 family_cycloneiii $end
$var parameter 32 #4 family_cyclone $end
$var parameter 32 $4 family_base_cycloneii $end
$var parameter 32 %4 family_cycloneii $end
$var parameter 32 &4 family_base_stratix $end
$var parameter 32 '4 family_base_stratixii $end
$var parameter 32 (4 family_has_lutram $end
$var parameter 32 )4 family_has_stratixv_style_ram $end
$var parameter 32 *4 family_has_stratixiii_style_ram $end
$var parameter 32 +4 family_has_m512 $end
$var parameter 32 ,4 family_has_megaram $end
$var parameter 32 -4 family_has_stratixi_style_ram $end
$var parameter 32 .4 is_write_on_positive_edge $end
$var parameter 32 /4 lutram_single_port_fast_read $end
$var parameter 32 04 lutram_dual_port_fast_read $end
$var parameter 32 14 s3_address_aclr_a $end
$var parameter 32 24 s3_address_aclr_b $end
$var parameter 32 34 i_address_aclr_family_a $end
$var parameter 32 44 i_address_aclr_family_b $end
$var tri0 1 k1 wren_a $end
$var tri0 1 "3 wren_b $end
$var tri1 1 #3 rden_a $end
$var tri1 1 $3 rden_b $end
$var wire 1 )0 data_a [31] $end
$var wire 1 *0 data_a [30] $end
$var wire 1 +0 data_a [29] $end
$var wire 1 ,0 data_a [28] $end
$var wire 1 -0 data_a [27] $end
$var wire 1 .0 data_a [26] $end
$var wire 1 /0 data_a [25] $end
$var wire 1 00 data_a [24] $end
$var wire 1 10 data_a [23] $end
$var wire 1 20 data_a [22] $end
$var wire 1 30 data_a [21] $end
$var wire 1 40 data_a [20] $end
$var wire 1 50 data_a [19] $end
$var wire 1 60 data_a [18] $end
$var wire 1 70 data_a [17] $end
$var wire 1 80 data_a [16] $end
$var wire 1 90 data_a [15] $end
$var wire 1 :0 data_a [14] $end
$var wire 1 ;0 data_a [13] $end
$var wire 1 <0 data_a [12] $end
$var wire 1 =0 data_a [11] $end
$var wire 1 >0 data_a [10] $end
$var wire 1 ?0 data_a [9] $end
$var wire 1 @0 data_a [8] $end
$var wire 1 A0 data_a [7] $end
$var wire 1 B0 data_a [6] $end
$var wire 1 C0 data_a [5] $end
$var wire 1 D0 data_a [4] $end
$var wire 1 E0 data_a [3] $end
$var wire 1 F0 data_a [2] $end
$var wire 1 G0 data_a [1] $end
$var wire 1 H0 data_a [0] $end
$var wire 1 %3 data_b [0] $end
$var wire 1 _1 address_a [10] $end
$var wire 1 `1 address_a [9] $end
$var wire 1 a1 address_a [8] $end
$var wire 1 b1 address_a [7] $end
$var wire 1 c1 address_a [6] $end
$var wire 1 d1 address_a [5] $end
$var wire 1 e1 address_a [4] $end
$var wire 1 f1 address_a [3] $end
$var wire 1 g1 address_a [2] $end
$var wire 1 h1 address_a [1] $end
$var wire 1 i1 address_a [0] $end
$var wire 1 &3 address_b [0] $end
$var tri1 1 j1 clock0 $end
$var wire 1 '3 clock1 $end
$var tri1 1 (3 clocken0 $end
$var tri1 1 )3 clocken1 $end
$var tri1 1 *3 clocken2 $end
$var tri1 1 +3 clocken3 $end
$var tri0 1 ,3 aclr0 $end
$var tri0 1 -3 aclr1 $end
$var wire 1 %0 byteena_a [3] $end
$var wire 1 &0 byteena_a [2] $end
$var wire 1 '0 byteena_a [1] $end
$var wire 1 (0 byteena_a [0] $end
$var wire 1 .3 byteena_b [0] $end
$var tri0 1 /3 addressstall_a $end
$var tri0 1 03 addressstall_b $end
$var wire 1 .2 q_a [31] $end
$var wire 1 /2 q_a [30] $end
$var wire 1 02 q_a [29] $end
$var wire 1 12 q_a [28] $end
$var wire 1 22 q_a [27] $end
$var wire 1 32 q_a [26] $end
$var wire 1 42 q_a [25] $end
$var wire 1 52 q_a [24] $end
$var wire 1 62 q_a [23] $end
$var wire 1 72 q_a [22] $end
$var wire 1 82 q_a [21] $end
$var wire 1 92 q_a [20] $end
$var wire 1 :2 q_a [19] $end
$var wire 1 ;2 q_a [18] $end
$var wire 1 <2 q_a [17] $end
$var wire 1 =2 q_a [16] $end
$var wire 1 >2 q_a [15] $end
$var wire 1 ?2 q_a [14] $end
$var wire 1 @2 q_a [13] $end
$var wire 1 A2 q_a [12] $end
$var wire 1 B2 q_a [11] $end
$var wire 1 C2 q_a [10] $end
$var wire 1 D2 q_a [9] $end
$var wire 1 E2 q_a [8] $end
$var wire 1 F2 q_a [7] $end
$var wire 1 G2 q_a [6] $end
$var wire 1 H2 q_a [5] $end
$var wire 1 I2 q_a [4] $end
$var wire 1 J2 q_a [3] $end
$var wire 1 K2 q_a [2] $end
$var wire 1 L2 q_a [1] $end
$var wire 1 M2 q_a [0] $end
$var wire 1 13 q_b [0] $end
$var wire 1 23 eccstatus [2] $end
$var wire 1 33 eccstatus [1] $end
$var wire 1 43 eccstatus [0] $end
$var reg 32 54 i_data_reg_a [31:0] $end
$var reg 32 64 temp_wa [31:0] $end
$var reg 32 74 temp_wa2 [31:0] $end
$var reg 32 84 temp_wa2b [31:0] $end
$var reg 32 94 init_temp [31:0] $end
$var reg 1 :4 i_data_reg_b [0:0] $end
$var reg 1 ;4 temp_wb [0:0] $end
$var reg 1 <4 temp_wb2 [0:0] $end
$var reg 1 =4 temp $end
$var reg 32 >4 i_q_reg_a [31:0] $end
$var reg 32 ?4 i_q_tmp_a [31:0] $end
$var reg 32 @4 i_q_tmp2_a [31:0] $end
$var reg 1 A4 i_q_reg_b [0:0] $end
$var reg 1 B4 i_q_tmp_b [0:0] $end
$var reg 1 C4 i_q_tmp2_b [0:0] $end
$var reg 1 D4 i_q_output_latch [0:0] $end
$var reg 32 E4 i_byteena_mask_reg_a [31:0] $end
$var reg 1 F4 i_byteena_mask_reg_b [0:0] $end
$var reg 11 G4 i_address_reg_a [10:0] $end
$var reg 1 H4 i_address_reg_b [0:0] $end
$var reg 1 I4 i_q_ecc_reg_b [0:0] $end
$var reg 1 J4 i_q_ecc_tmp_b [0:0] $end
$var reg 11 K4 i_original_address_a [10:0] $end
$var reg 32 L4 i_byteena_mask_reg_a_tmp [31:0] $end
$var reg 1 M4 i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 32 N4 i_byteena_mask_reg_a_out [31:0] $end
$var reg 1 O4 i_byteena_mask_reg_b_out [0:0] $end
$var reg 32 P4 i_byteena_mask_reg_a_x [31:0] $end
$var reg 1 Q4 i_byteena_mask_reg_b_x [0:0] $end
$var reg 32 R4 i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 1 S4 i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 T4 ram_initf [2048:1] $end
$var reg 1 U4 i_wren_reg_a $end
$var reg 1 V4 i_wren_reg_b $end
$var reg 1 W4 i_rden_reg_a $end
$var reg 1 X4 i_rden_reg_b $end
$var reg 1 Y4 i_read_flag_a $end
$var reg 1 Z4 i_read_flag_b $end
$var reg 1 [4 i_write_flag_a $end
$var reg 1 \4 i_write_flag_b $end
$var reg 1 ]4 good_to_go_a $end
$var reg 1 ^4 good_to_go_b $end
$var reg 32 _4 file_desc [31:0] $end
$var reg 1 `4 init_file_b_port $end
$var reg 1 a4 i_nmram_write_a $end
$var reg 1 b4 i_nmram_write_b $end
$var reg 32 c4 wa_mult_x [31:0] $end
$var reg 32 d4 wa_mult_x_ii [31:0] $end
$var reg 32 e4 wa_mult_x_iii [31:0] $end
$var reg 43 f4 add_reg_a_mult_wa [42:0] $end
$var reg 2 g4 add_reg_b_mult_wb [1:0] $end
$var reg 43 h4 add_reg_a_mult_wa_pl_wa [42:0] $end
$var reg 2 i4 add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 j4 same_clock_pulse0 $end
$var reg 1 k4 same_clock_pulse1 $end
$var reg 1 l4 i_original_data_b [0:0] $end
$var reg 32 m4 i_original_data_a [31:0] $end
$var reg 1 n4 i_address_aclr_a_flag $end
$var reg 1 o4 i_address_aclr_a_prev $end
$var reg 1 p4 i_address_aclr_b_flag $end
$var reg 1 q4 i_address_aclr_b_prev $end
$var reg 1 r4 i_outdata_aclr_a_prev $end
$var reg 1 s4 i_outdata_aclr_b_prev $end
$var reg 1 t4 i_force_reread_a $end
$var reg 1 u4 i_force_reread_a1 $end
$var reg 1 v4 i_force_reread_b $end
$var reg 1 w4 i_force_reread_b1 $end
$var reg 1 x4 i_force_reread_a_signal $end
$var reg 1 y4 i_force_reread_b_signal $end
$var reg 169 z4 cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 {4 i_ram_block_type [56:0] $end
$var integer 32 |4 i_byte_size $end
$var wire 1 }4 i_good_to_write_a $end
$var wire 1 ~4 i_good_to_write_b $end
$var reg 1 !5 i_good_to_write_a2 $end
$var reg 1 "5 i_good_to_write_b2 $end
$var reg 1 #5 i_core_clocken_a_reg $end
$var reg 1 $5 i_core_clocken0_b_reg $end
$var reg 1 %5 i_core_clocken1_b_reg $end
$var wire 1 &5 i_indata_aclr_a $end
$var wire 1 '5 i_address_aclr_a $end
$var wire 1 (5 i_wrcontrol_aclr_a $end
$var wire 1 )5 i_indata_aclr_b $end
$var wire 1 *5 i_address_aclr_b $end
$var wire 1 +5 i_wrcontrol_aclr_b $end
$var wire 1 ,5 i_outdata_aclr_a $end
$var wire 1 -5 i_outdata_aclr_b $end
$var wire 1 .5 i_rdcontrol_aclr_b $end
$var wire 1 /5 i_byteena_aclr_a $end
$var wire 1 05 i_byteena_aclr_b $end
$var wire 1 15 i_outdata_clken_a $end
$var wire 1 25 i_outdata_clken_b $end
$var wire 1 35 i_outlatch_clken_a $end
$var wire 1 45 i_outlatch_clken_b $end
$var wire 1 55 i_clocken0 $end
$var wire 1 65 i_clocken1_b $end
$var wire 1 75 i_clocken0_b $end
$var wire 1 85 i_core_clocken_a $end
$var wire 1 95 i_core_clocken_b $end
$var wire 1 :5 i_core_clocken0_b $end
$var wire 1 ;5 i_core_clocken1_b $end
$var tri1 1 <5 i_byteena_a [3] $end
$var tri1 1 =5 i_byteena_a [2] $end
$var tri1 1 >5 i_byteena_a [1] $end
$var tri1 1 ?5 i_byteena_a [0] $end
$var tri1 1 @5 i_byteena_b [0] $end
$var integer 32 A5 i_numwords_a $end
$var integer 32 B5 i_numwords_b $end
$var integer 32 C5 i_aclr_flag_a $end
$var integer 32 D5 i_aclr_flag_b $end
$var integer 32 E5 i_q_tmp2_a_idx $end
$var integer 32 F5 init_i $end
$var integer 32 G5 i $end
$var integer 32 H5 i2 $end
$var integer 32 I5 i3 $end
$var integer 32 J5 i4 $end
$var integer 32 K5 i5 $end
$var integer 32 L5 j $end
$var integer 32 M5 j2 $end
$var integer 32 N5 j3 $end
$var integer 32 O5 k $end
$var integer 32 P5 k2 $end
$var integer 32 Q5 k3 $end
$var integer 32 R5 k4 $end
$var integer 32 S5 i_div_wa $end
$var integer 32 T5 i_div_wb $end
$var integer 32 U5 j_plus_i2 $end
$var integer 32 V5 j2_plus_i5 $end
$var integer 32 W5 j3_plus_i5 $end
$var integer 32 X5 j_plus_i2_div_a $end
$var integer 32 Y5 j2_plus_i5_div_a $end
$var integer 32 Z5 j3_plus_i5_div_a $end
$var integer 32 [5 j3_plus_i5_div_b $end
$var integer 32 \5 i_byteena_count $end
$var integer 32 ]5 port_a_bit_count_low $end
$var integer 32 ^5 port_a_bit_count_high $end
$var integer 32 _5 port_b_bit_count_low $end
$var integer 32 `5 port_b_bit_count_high $end
$var time 64 a5 i_data_write_time_a $end
$var time 64 b5 i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 c5 IS_FAMILY_ARRIA10 $end
$var reg 160 d5 device [160:1] $end
$var reg 1 e5 is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 f5 IS_FAMILY_ARRIAGX $end
$var reg 160 g5 device [160:1] $end
$var reg 1 h5 is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 i5 IS_FAMILY_ARRIAIIGX $end
$var reg 160 j5 device [160:1] $end
$var reg 1 k5 is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 l5 IS_FAMILY_ARRIAIIGZ $end
$var reg 160 m5 device [160:1] $end
$var reg 1 n5 is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 o5 IS_FAMILY_ARRIAVGZ $end
$var reg 160 p5 device [160:1] $end
$var reg 1 q5 is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 r5 IS_FAMILY_ARRIAV $end
$var reg 160 s5 device [160:1] $end
$var reg 1 t5 is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 u5 IS_FAMILY_CYCLONE10LP $end
$var reg 160 v5 device [160:1] $end
$var reg 1 w5 is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 x5 IS_FAMILY_CYCLONEII $end
$var reg 160 y5 device [160:1] $end
$var reg 1 z5 is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 {5 IS_FAMILY_CYCLONEIIILS $end
$var reg 160 |5 device [160:1] $end
$var reg 1 }5 is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 ~5 IS_FAMILY_CYCLONEIII $end
$var reg 160 !6 device [160:1] $end
$var reg 1 "6 is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 #6 IS_FAMILY_CYCLONEIVE $end
$var reg 160 $6 device [160:1] $end
$var reg 1 %6 is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 &6 IS_FAMILY_CYCLONEIVGX $end
$var reg 160 '6 device [160:1] $end
$var reg 1 (6 is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 )6 IS_FAMILY_CYCLONEV $end
$var reg 160 *6 device [160:1] $end
$var reg 1 +6 is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 ,6 IS_FAMILY_CYCLONE $end
$var reg 160 -6 device [160:1] $end
$var reg 1 .6 is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 /6 IS_FAMILY_HARDCOPYII $end
$var reg 160 06 device [160:1] $end
$var reg 1 16 is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 26 IS_FAMILY_HARDCOPYIII $end
$var reg 160 36 device [160:1] $end
$var reg 1 46 is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 56 IS_FAMILY_HARDCOPYIV $end
$var reg 160 66 device [160:1] $end
$var reg 1 76 is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 86 IS_FAMILY_MAX10 $end
$var reg 160 96 device [160:1] $end
$var reg 1 :6 is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 ;6 IS_FAMILY_MAXII $end
$var reg 160 <6 device [160:1] $end
$var reg 1 =6 is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 >6 IS_FAMILY_MAXV $end
$var reg 160 ?6 device [160:1] $end
$var reg 1 @6 is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 A6 IS_FAMILY_STRATIX10 $end
$var reg 160 B6 device [160:1] $end
$var reg 1 C6 is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 D6 IS_FAMILY_STRATIXGX $end
$var reg 160 E6 device [160:1] $end
$var reg 1 F6 is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 G6 IS_FAMILY_STRATIXIIGX $end
$var reg 160 H6 device [160:1] $end
$var reg 1 I6 is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 J6 IS_FAMILY_STRATIXII $end
$var reg 160 K6 device [160:1] $end
$var reg 1 L6 is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 M6 IS_FAMILY_STRATIXIII $end
$var reg 160 N6 device [160:1] $end
$var reg 1 O6 is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 P6 IS_FAMILY_STRATIXIV $end
$var reg 160 Q6 device [160:1] $end
$var reg 1 R6 is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 S6 IS_FAMILY_STRATIXV $end
$var reg 160 T6 device [160:1] $end
$var reg 1 U6 is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 V6 IS_FAMILY_STRATIX $end
$var reg 160 W6 device [160:1] $end
$var reg 1 X6 is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 Y6 FEATURE_FAMILY_STRATIXGX $end
$var reg 160 Z6 device [160:1] $end
$var reg 1 [6 var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 \6 FEATURE_FAMILY_CYCLONE $end
$var reg 160 ]6 device [160:1] $end
$var reg 1 ^6 var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 _6 FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 `6 device [160:1] $end
$var reg 1 a6 var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 b6 FEATURE_FAMILY_STRATIXIII $end
$var reg 160 c6 device [160:1] $end
$var reg 1 d6 var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 e6 FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 f6 device [160:1] $end
$var reg 1 g6 var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 h6 FEATURE_FAMILY_STRATIXV $end
$var reg 160 i6 device [160:1] $end
$var reg 1 j6 var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 k6 FEATURE_FAMILY_ARRIA10 $end
$var reg 160 l6 device [160:1] $end
$var reg 1 m6 var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 n6 FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 o6 device [160:1] $end
$var reg 1 p6 var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 q6 FEATURE_FAMILY_STRATIXII $end
$var reg 160 r6 device [160:1] $end
$var reg 1 s6 var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 t6 FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 u6 device [160:1] $end
$var reg 1 v6 var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 w6 FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 x6 device [160:1] $end
$var reg 1 y6 var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 z6 FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 {6 device [160:1] $end
$var reg 1 |6 var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 }6 FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 ~6 device [160:1] $end
$var reg 1 !7 var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 "7 FEATURE_FAMILY_STRATIX $end
$var reg 160 #7 device [160:1] $end
$var reg 1 $7 var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 %7 FEATURE_FAMILY_MAXII $end
$var reg 160 &7 device [160:1] $end
$var reg 1 '7 var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 (7 FEATURE_FAMILY_MAXV $end
$var reg 160 )7 device [160:1] $end
$var reg 1 *7 var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 +7 FEATURE_FAMILY_CYCLONEII $end
$var reg 160 ,7 device [160:1] $end
$var reg 1 -7 var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 .7 FEATURE_FAMILY_STRATIXIV $end
$var reg 160 /7 device [160:1] $end
$var reg 1 07 var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 17 FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 27 device [160:1] $end
$var reg 1 37 var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 47 FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 57 device [160:1] $end
$var reg 1 67 var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 77 FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 87 device [160:1] $end
$var reg 1 97 var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 :7 FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 ;7 device [160:1] $end
$var reg 1 <7 var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 =7 FEATURE_FAMILY_CYCLONEV $end
$var reg 160 >7 device [160:1] $end
$var reg 1 ?7 var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 @7 FEATURE_FAMILY_ARRIAV $end
$var reg 160 A7 device [160:1] $end
$var reg 1 B7 var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 C7 FEATURE_FAMILY_MAX10 $end
$var reg 160 D7 device [160:1] $end
$var reg 1 E7 var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 F7 FEATURE_FAMILY_STRATIX10 $end
$var reg 160 G7 device [160:1] $end
$var reg 1 H7 var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 I7 FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 J7 device [160:1] $end
$var reg 1 K7 var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 L7 FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 M7 device [160:1] $end
$var reg 1 N7 var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 O7 FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 P7 device [160:1] $end
$var reg 1 Q7 var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 R7 FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 S7 device [160:1] $end
$var reg 1 T7 var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 U7 FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 V7 device [160:1] $end
$var reg 1 W7 var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 X7 FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 Y7 device [160:1] $end
$var reg 1 Z7 var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 [7 FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 \7 device [160:1] $end
$var reg 1 ]7 var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 ^7 FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 _7 device [160:1] $end
$var reg 1 `7 var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 a7 FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 b7 device [160:1] $end
$var reg 1 c7 var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 d7 FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 e7 device [160:1] $end
$var reg 1 f7 var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 g7 FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 h7 device [160:1] $end
$var reg 1 i7 var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 j7 IS_VALID_FAMILY $end
$var reg 160 k7 device [160:1] $end
$var reg 1 l7 is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 m7 tolower [8:1] $end
$var reg 8 n7 given_character [8:1] $end
$var reg 8 o7 conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 p7 ecc_parity [7:0] $end
$var reg 8 q7 i_eccencparity [7:0] $end
$var integer 32 r7 pointer $end
$var integer 32 s7 pointer_max $end
$var integer 32 t7 pointer_min $end
$var integer 32 u7 flag_err $end
$var integer 32 v7 flag $end
$var integer 32 w7 flag_double $end
$var integer 32 x7 flag_triple $end
$var integer 32 y7 flag_single $end
$var integer 32 z7 flag_no_err $end
$var integer 32 {7 flag_uncorr $end
$var integer 32 |7 n $end
$var integer 32 }7 err $end
$var integer 32 ~7 found $end
$var integer 32 !8 found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 "8 in_file [2048:1] $end
$var integer 32 #8 width $end
$var reg 2048 $8 out_file [2048:1] $end
$var reg 2048 %8 buffer [2048:1] $end
$var reg 1025 &8 memory_data1 [1024:0] $end
$var reg 1025 '8 memory_data2 [1024:0] $end
$var reg 8 (8 c [8:1] $end
$var reg 4 )8 hex [3:0] $end
$var reg 4 *8 tmp_char [3:0] $end
$var reg 24 +8 address_radix [24:1] $end
$var reg 24 ,8 data_radix [24:1] $end
$var reg 1 -8 get_width $end
$var reg 1 .8 get_depth $end
$var reg 1 /8 get_data_radix $end
$var reg 1 08 get_address_radix $end
$var reg 1 18 width_found $end
$var reg 1 28 depth_found $end
$var reg 1 38 data_radix_found $end
$var reg 1 48 address_radix_found $end
$var reg 1 58 get_address_data_pairs $end
$var reg 1 68 get_address $end
$var reg 1 78 get_data $end
$var reg 1 88 display_address $end
$var reg 1 98 invalid_address $end
$var reg 1 :8 get_start_address $end
$var reg 1 ;8 get_end_address $end
$var reg 1 <8 done $end
$var reg 1 =8 error_status $end
$var reg 1 >8 first_rec $end
$var reg 1 ?8 last_rec $end
$var integer 32 @8 memory_width $end
$var integer 32 A8 memory_depth $end
$var integer 32 B8 value $end
$var integer 32 C8 ifp $end
$var integer 32 D8 ofp $end
$var integer 32 E8 r $end
$var integer 32 F8 r2 $end
$var integer 32 G8 i $end
$var integer 32 H8 j $end
$var integer 32 I8 k $end
$var integer 32 J8 m $end
$var integer 32 K8 n $end
$var integer 32 L8 negative $end
$var integer 32 M8 off_addr $end
$var integer 32 N8 nn $end
$var integer 32 O8 address $end
$var integer 32 P8 tt $end
$var integer 32 Q8 cc $end
$var integer 32 R8 aah $end
$var integer 32 S8 aal $end
$var integer 32 T8 dd $end
$var integer 32 U8 sum $end
$var integer 32 V8 start_address $end
$var integer 32 W8 end_address $end
$var integer 32 X8 line_no $end
$var integer 32 Y8 character_count $end
$var integer 32 Z8 comment_with_percent_found $end
$var integer 32 [8 comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 \8 in_file [2048:1] $end
$var integer 32 ]8 width $end
$var reg 2048 ^8 out_file [2048:1] $end
$var reg 8 _8 c [8:1] $end
$var reg 4 `8 hex [3:0] $end
$var reg 4 a8 tmp_char [3:0] $end
$var reg 1 b8 done $end
$var reg 1 c8 error_status $end
$var reg 1 d8 first_rec $end
$var reg 1 e8 last_rec $end
$var reg 1 f8 first_normal_record $end
$var reg 1 g8 is_word_address_format $end
$var integer 32 h8 ifp $end
$var integer 32 i8 ofp $end
$var integer 32 j8 r $end
$var integer 32 k8 r2 $end
$var integer 32 l8 i $end
$var integer 32 m8 j $end
$var integer 32 n8 k $end
$var integer 32 o8 m $end
$var integer 32 p8 n $end
$var integer 32 q8 off_addr $end
$var integer 32 r8 nn $end
$var integer 32 s8 aaaa $end
$var integer 32 t8 aaaa_pre $end
$var integer 32 u8 tt $end
$var integer 32 v8 cc $end
$var integer 32 w8 aah $end
$var integer 32 x8 aal $end
$var integer 32 y8 dd $end
$var integer 32 z8 sum $end
$var integer 32 {8 line_no $end
$var integer 32 |8 divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 }8 in_file [2048:1] $end
$var integer 32 ~8 width $end
$var reg 2048 !9 out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module omem $end
$var wire 1 "9 address [7] $end
$var wire 1 #9 address [6] $end
$var wire 1 $9 address [5] $end
$var wire 1 %9 address [4] $end
$var wire 1 &9 address [3] $end
$var wire 1 '9 address [2] $end
$var wire 1 (9 address [1] $end
$var wire 1 )9 address [0] $end
$var tri1 1 %0 byteena [3] $end
$var tri1 1 &0 byteena [2] $end
$var tri1 1 '0 byteena [1] $end
$var tri1 1 (0 byteena [0] $end
$var tri1 1 *9 clock $end
$var wire 1 )0 data [31] $end
$var wire 1 *0 data [30] $end
$var wire 1 +0 data [29] $end
$var wire 1 ,0 data [28] $end
$var wire 1 -0 data [27] $end
$var wire 1 .0 data [26] $end
$var wire 1 /0 data [25] $end
$var wire 1 00 data [24] $end
$var wire 1 10 data [23] $end
$var wire 1 20 data [22] $end
$var wire 1 30 data [21] $end
$var wire 1 40 data [20] $end
$var wire 1 50 data [19] $end
$var wire 1 60 data [18] $end
$var wire 1 70 data [17] $end
$var wire 1 80 data [16] $end
$var wire 1 90 data [15] $end
$var wire 1 :0 data [14] $end
$var wire 1 ;0 data [13] $end
$var wire 1 <0 data [12] $end
$var wire 1 =0 data [11] $end
$var wire 1 >0 data [10] $end
$var wire 1 ?0 data [9] $end
$var wire 1 @0 data [8] $end
$var wire 1 A0 data [7] $end
$var wire 1 B0 data [6] $end
$var wire 1 C0 data [5] $end
$var wire 1 D0 data [4] $end
$var wire 1 E0 data [3] $end
$var wire 1 F0 data [2] $end
$var wire 1 G0 data [1] $end
$var wire 1 H0 data [0] $end
$var wire 1 +9 wren $end
$var wire 1 ,9 q [31] $end
$var wire 1 -9 q [30] $end
$var wire 1 .9 q [29] $end
$var wire 1 /9 q [28] $end
$var wire 1 09 q [27] $end
$var wire 1 19 q [26] $end
$var wire 1 29 q [25] $end
$var wire 1 39 q [24] $end
$var wire 1 49 q [23] $end
$var wire 1 59 q [22] $end
$var wire 1 69 q [21] $end
$var wire 1 79 q [20] $end
$var wire 1 89 q [19] $end
$var wire 1 99 q [18] $end
$var wire 1 :9 q [17] $end
$var wire 1 ;9 q [16] $end
$var wire 1 <9 q [15] $end
$var wire 1 =9 q [14] $end
$var wire 1 >9 q [13] $end
$var wire 1 ?9 q [12] $end
$var wire 1 @9 q [11] $end
$var wire 1 A9 q [10] $end
$var wire 1 B9 q [9] $end
$var wire 1 C9 q [8] $end
$var wire 1 D9 q [7] $end
$var wire 1 E9 q [6] $end
$var wire 1 F9 q [5] $end
$var wire 1 G9 q [4] $end
$var wire 1 H9 q [3] $end
$var wire 1 I9 q [2] $end
$var wire 1 J9 q [1] $end
$var wire 1 K9 q [0] $end
$var wire 1 L9 sub_wire0 [31] $end
$var wire 1 M9 sub_wire0 [30] $end
$var wire 1 N9 sub_wire0 [29] $end
$var wire 1 O9 sub_wire0 [28] $end
$var wire 1 P9 sub_wire0 [27] $end
$var wire 1 Q9 sub_wire0 [26] $end
$var wire 1 R9 sub_wire0 [25] $end
$var wire 1 S9 sub_wire0 [24] $end
$var wire 1 T9 sub_wire0 [23] $end
$var wire 1 U9 sub_wire0 [22] $end
$var wire 1 V9 sub_wire0 [21] $end
$var wire 1 W9 sub_wire0 [20] $end
$var wire 1 X9 sub_wire0 [19] $end
$var wire 1 Y9 sub_wire0 [18] $end
$var wire 1 Z9 sub_wire0 [17] $end
$var wire 1 [9 sub_wire0 [16] $end
$var wire 1 \9 sub_wire0 [15] $end
$var wire 1 ]9 sub_wire0 [14] $end
$var wire 1 ^9 sub_wire0 [13] $end
$var wire 1 _9 sub_wire0 [12] $end
$var wire 1 `9 sub_wire0 [11] $end
$var wire 1 a9 sub_wire0 [10] $end
$var wire 1 b9 sub_wire0 [9] $end
$var wire 1 c9 sub_wire0 [8] $end
$var wire 1 d9 sub_wire0 [7] $end
$var wire 1 e9 sub_wire0 [6] $end
$var wire 1 f9 sub_wire0 [5] $end
$var wire 1 g9 sub_wire0 [4] $end
$var wire 1 h9 sub_wire0 [3] $end
$var wire 1 i9 sub_wire0 [2] $end
$var wire 1 j9 sub_wire0 [1] $end
$var wire 1 k9 sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 l9 width_a $end
$var parameter 32 m9 widthad_a $end
$var parameter 32 n9 numwords_a $end
$var parameter 96 o9 outdata_reg_a $end
$var parameter 32 p9 address_aclr_a $end
$var parameter 32 q9 outdata_aclr_a $end
$var parameter 32 r9 indata_aclr_a $end
$var parameter 32 s9 wrcontrol_aclr_a $end
$var parameter 32 t9 byteena_aclr_a $end
$var parameter 32 u9 width_byteena_a $end
$var parameter 32 v9 width_b $end
$var parameter 32 w9 widthad_b $end
$var parameter 32 x9 numwords_b $end
$var parameter 48 y9 rdcontrol_reg_b $end
$var parameter 48 z9 address_reg_b $end
$var parameter 96 {9 outdata_reg_b $end
$var parameter 32 |9 outdata_aclr_b $end
$var parameter 32 }9 rdcontrol_aclr_b $end
$var parameter 48 ~9 indata_reg_b $end
$var parameter 48 !: wrcontrol_wraddress_reg_b $end
$var parameter 48 ": byteena_reg_b $end
$var parameter 32 #: indata_aclr_b $end
$var parameter 32 $: wrcontrol_aclr_b $end
$var parameter 32 %: address_aclr_b $end
$var parameter 32 &: byteena_aclr_b $end
$var parameter 32 ': width_byteena_b $end
$var parameter 48 (: clock_enable_input_a $end
$var parameter 48 ): clock_enable_output_a $end
$var parameter 48 *: clock_enable_input_b $end
$var parameter 48 +: clock_enable_output_b $end
$var parameter 120 ,: clock_enable_core_a $end
$var parameter 120 -: clock_enable_core_b $end
$var parameter 160 .: read_during_write_mode_port_a $end
$var parameter 160 /: read_during_write_mode_port_b $end
$var parameter 40 0: enable_ecc $end
$var parameter 32 1: width_eccstatus $end
$var parameter 40 2: ecc_pipeline_stage_enabled $end
$var parameter 88 3: operation_mode $end
$var parameter 32 4: byte_size $end
$var parameter 72 5: read_during_write_mode_mixed_ports $end
$var parameter 32 6: ram_block_type $end
$var parameter 48 7: init_file $end
$var parameter 48 8: init_file_layout $end
$var parameter 32 9: maximum_depth $end
$var parameter 72 :: intended_device_family $end
$var parameter 168 ;: lpm_hint $end
$var parameter 80 <: lpm_type $end
$var parameter 24 =: implement_in_les $end
$var parameter 40 >: power_up_uninitialized $end
$var parameter 32 ?: family_arria10 $end
$var tri0 1 +9 wren_a $end
$var tri0 1 @: wren_b $end
$var tri1 1 A: rden_a $end
$var tri1 1 B: rden_b $end
$var wire 1 )0 data_a [31] $end
$var wire 1 *0 data_a [30] $end
$var wire 1 +0 data_a [29] $end
$var wire 1 ,0 data_a [28] $end
$var wire 1 -0 data_a [27] $end
$var wire 1 .0 data_a [26] $end
$var wire 1 /0 data_a [25] $end
$var wire 1 00 data_a [24] $end
$var wire 1 10 data_a [23] $end
$var wire 1 20 data_a [22] $end
$var wire 1 30 data_a [21] $end
$var wire 1 40 data_a [20] $end
$var wire 1 50 data_a [19] $end
$var wire 1 60 data_a [18] $end
$var wire 1 70 data_a [17] $end
$var wire 1 80 data_a [16] $end
$var wire 1 90 data_a [15] $end
$var wire 1 :0 data_a [14] $end
$var wire 1 ;0 data_a [13] $end
$var wire 1 <0 data_a [12] $end
$var wire 1 =0 data_a [11] $end
$var wire 1 >0 data_a [10] $end
$var wire 1 ?0 data_a [9] $end
$var wire 1 @0 data_a [8] $end
$var wire 1 A0 data_a [7] $end
$var wire 1 B0 data_a [6] $end
$var wire 1 C0 data_a [5] $end
$var wire 1 D0 data_a [4] $end
$var wire 1 E0 data_a [3] $end
$var wire 1 F0 data_a [2] $end
$var wire 1 G0 data_a [1] $end
$var wire 1 H0 data_a [0] $end
$var wire 1 C: data_b [0] $end
$var wire 1 "9 address_a [7] $end
$var wire 1 #9 address_a [6] $end
$var wire 1 $9 address_a [5] $end
$var wire 1 %9 address_a [4] $end
$var wire 1 &9 address_a [3] $end
$var wire 1 '9 address_a [2] $end
$var wire 1 (9 address_a [1] $end
$var wire 1 )9 address_a [0] $end
$var wire 1 D: address_b [0] $end
$var tri1 1 *9 clock0 $end
$var wire 1 E: clock1 $end
$var tri1 1 F: clocken0 $end
$var tri1 1 G: clocken1 $end
$var tri1 1 H: clocken2 $end
$var tri1 1 I: clocken3 $end
$var tri0 1 J: aclr0 $end
$var tri0 1 K: aclr1 $end
$var tri1 1 %0 byteena_a [3] $end
$var tri1 1 &0 byteena_a [2] $end
$var tri1 1 '0 byteena_a [1] $end
$var tri1 1 (0 byteena_a [0] $end
$var tri1 1 L: byteena_b [0] $end
$var tri0 1 M: addressstall_a $end
$var tri0 1 N: addressstall_b $end
$var wire 1 L9 q_a [31] $end
$var wire 1 M9 q_a [30] $end
$var wire 1 N9 q_a [29] $end
$var wire 1 O9 q_a [28] $end
$var wire 1 P9 q_a [27] $end
$var wire 1 Q9 q_a [26] $end
$var wire 1 R9 q_a [25] $end
$var wire 1 S9 q_a [24] $end
$var wire 1 T9 q_a [23] $end
$var wire 1 U9 q_a [22] $end
$var wire 1 V9 q_a [21] $end
$var wire 1 W9 q_a [20] $end
$var wire 1 X9 q_a [19] $end
$var wire 1 Y9 q_a [18] $end
$var wire 1 Z9 q_a [17] $end
$var wire 1 [9 q_a [16] $end
$var wire 1 \9 q_a [15] $end
$var wire 1 ]9 q_a [14] $end
$var wire 1 ^9 q_a [13] $end
$var wire 1 _9 q_a [12] $end
$var wire 1 `9 q_a [11] $end
$var wire 1 a9 q_a [10] $end
$var wire 1 b9 q_a [9] $end
$var wire 1 c9 q_a [8] $end
$var wire 1 d9 q_a [7] $end
$var wire 1 e9 q_a [6] $end
$var wire 1 f9 q_a [5] $end
$var wire 1 g9 q_a [4] $end
$var wire 1 h9 q_a [3] $end
$var wire 1 i9 q_a [2] $end
$var wire 1 j9 q_a [1] $end
$var wire 1 k9 q_a [0] $end
$var wire 1 O: q_b [0] $end
$var wire 1 P: eccstatus [2] $end
$var wire 1 Q: eccstatus [1] $end
$var wire 1 R: eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 S: width_a $end
$var parameter 32 T: widthad_a $end
$var parameter 32 U: numwords_a $end
$var parameter 96 V: outdata_reg_a $end
$var parameter 32 W: address_aclr_a $end
$var parameter 32 X: outdata_aclr_a $end
$var parameter 32 Y: indata_aclr_a $end
$var parameter 32 Z: wrcontrol_aclr_a $end
$var parameter 32 [: byteena_aclr_a $end
$var parameter 32 \: width_byteena_a $end
$var parameter 32 ]: width_b $end
$var parameter 32 ^: widthad_b $end
$var parameter 32 _: numwords_b $end
$var parameter 48 `: rdcontrol_reg_b $end
$var parameter 48 a: address_reg_b $end
$var parameter 96 b: outdata_reg_b $end
$var parameter 32 c: outdata_aclr_b $end
$var parameter 32 d: rdcontrol_aclr_b $end
$var parameter 48 e: indata_reg_b $end
$var parameter 48 f: wrcontrol_wraddress_reg_b $end
$var parameter 48 g: byteena_reg_b $end
$var parameter 32 h: indata_aclr_b $end
$var parameter 32 i: wrcontrol_aclr_b $end
$var parameter 32 j: address_aclr_b $end
$var parameter 32 k: byteena_aclr_b $end
$var parameter 32 l: width_byteena_b $end
$var parameter 48 m: clock_enable_input_a $end
$var parameter 48 n: clock_enable_output_a $end
$var parameter 48 o: clock_enable_input_b $end
$var parameter 48 p: clock_enable_output_b $end
$var parameter 120 q: clock_enable_core_a $end
$var parameter 120 r: clock_enable_core_b $end
$var parameter 160 s: read_during_write_mode_port_a $end
$var parameter 160 t: read_during_write_mode_port_b $end
$var parameter 40 u: enable_ecc $end
$var parameter 32 v: width_eccstatus $end
$var parameter 40 w: ecc_pipeline_stage_enabled $end
$var parameter 88 x: operation_mode $end
$var parameter 32 y: byte_size $end
$var parameter 72 z: read_during_write_mode_mixed_ports $end
$var parameter 32 {: ram_block_type $end
$var parameter 48 |: init_file $end
$var parameter 48 }: init_file_layout $end
$var parameter 32 ~: maximum_depth $end
$var parameter 72 !; intended_device_family $end
$var parameter 168 "; lpm_hint $end
$var parameter 80 #; lpm_type $end
$var parameter 24 $; implement_in_les $end
$var parameter 40 %; power_up_uninitialized $end
$var parameter 24 &; sim_show_memory_data_in_port_b_layout $end
$var parameter 32 '; is_lutram $end
$var parameter 32 (; is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 ); is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 *; check_simultaneous_read_write $end
$var parameter 32 +; dual_port_addreg_b_clk0 $end
$var parameter 32 ,; dual_port_addreg_b_clk1 $end
$var parameter 32 -; i_byte_size_tmp $end
$var parameter 32 .; i_lutram_read $end
$var parameter 32 /; enable_mem_data_b_reading $end
$var parameter 32 0; family_arriav $end
$var parameter 32 1; family_cyclonev $end
$var parameter 32 2; family_base_arriav $end
$var parameter 32 3; family_arria10 $end
$var parameter 32 4; family_stratix10 $end
$var parameter 32 5; family_arriavi $end
$var parameter 32 6; family_nightfury $end
$var parameter 32 7; family_arriavgz $end
$var parameter 32 8; family_stratixv $end
$var parameter 32 9; family_hardcopyiv $end
$var parameter 32 :; family_hardcopyiii $end
$var parameter 32 ;; family_hardcopyii $end
$var parameter 32 <; family_arriaiigz $end
$var parameter 32 =; family_arriaiigx $end
$var parameter 32 >; family_stratixiii $end
$var parameter 32 ?; family_zippleback $end
$var parameter 32 @; family_cycloneiii $end
$var parameter 32 A; family_cyclone $end
$var parameter 32 B; family_base_cycloneii $end
$var parameter 32 C; family_cycloneii $end
$var parameter 32 D; family_base_stratix $end
$var parameter 32 E; family_base_stratixii $end
$var parameter 32 F; family_has_lutram $end
$var parameter 32 G; family_has_stratixv_style_ram $end
$var parameter 32 H; family_has_stratixiii_style_ram $end
$var parameter 32 I; family_has_m512 $end
$var parameter 32 J; family_has_megaram $end
$var parameter 32 K; family_has_stratixi_style_ram $end
$var parameter 32 L; is_write_on_positive_edge $end
$var parameter 32 M; lutram_single_port_fast_read $end
$var parameter 32 N; lutram_dual_port_fast_read $end
$var parameter 32 O; s3_address_aclr_a $end
$var parameter 32 P; s3_address_aclr_b $end
$var parameter 32 Q; i_address_aclr_family_a $end
$var parameter 32 R; i_address_aclr_family_b $end
$var tri0 1 +9 wren_a $end
$var tri0 1 @: wren_b $end
$var tri1 1 A: rden_a $end
$var tri1 1 B: rden_b $end
$var wire 1 )0 data_a [31] $end
$var wire 1 *0 data_a [30] $end
$var wire 1 +0 data_a [29] $end
$var wire 1 ,0 data_a [28] $end
$var wire 1 -0 data_a [27] $end
$var wire 1 .0 data_a [26] $end
$var wire 1 /0 data_a [25] $end
$var wire 1 00 data_a [24] $end
$var wire 1 10 data_a [23] $end
$var wire 1 20 data_a [22] $end
$var wire 1 30 data_a [21] $end
$var wire 1 40 data_a [20] $end
$var wire 1 50 data_a [19] $end
$var wire 1 60 data_a [18] $end
$var wire 1 70 data_a [17] $end
$var wire 1 80 data_a [16] $end
$var wire 1 90 data_a [15] $end
$var wire 1 :0 data_a [14] $end
$var wire 1 ;0 data_a [13] $end
$var wire 1 <0 data_a [12] $end
$var wire 1 =0 data_a [11] $end
$var wire 1 >0 data_a [10] $end
$var wire 1 ?0 data_a [9] $end
$var wire 1 @0 data_a [8] $end
$var wire 1 A0 data_a [7] $end
$var wire 1 B0 data_a [6] $end
$var wire 1 C0 data_a [5] $end
$var wire 1 D0 data_a [4] $end
$var wire 1 E0 data_a [3] $end
$var wire 1 F0 data_a [2] $end
$var wire 1 G0 data_a [1] $end
$var wire 1 H0 data_a [0] $end
$var wire 1 C: data_b [0] $end
$var wire 1 "9 address_a [7] $end
$var wire 1 #9 address_a [6] $end
$var wire 1 $9 address_a [5] $end
$var wire 1 %9 address_a [4] $end
$var wire 1 &9 address_a [3] $end
$var wire 1 '9 address_a [2] $end
$var wire 1 (9 address_a [1] $end
$var wire 1 )9 address_a [0] $end
$var wire 1 D: address_b [0] $end
$var tri1 1 *9 clock0 $end
$var wire 1 E: clock1 $end
$var tri1 1 F: clocken0 $end
$var tri1 1 G: clocken1 $end
$var tri1 1 H: clocken2 $end
$var tri1 1 I: clocken3 $end
$var tri0 1 J: aclr0 $end
$var tri0 1 K: aclr1 $end
$var wire 1 %0 byteena_a [3] $end
$var wire 1 &0 byteena_a [2] $end
$var wire 1 '0 byteena_a [1] $end
$var wire 1 (0 byteena_a [0] $end
$var wire 1 L: byteena_b [0] $end
$var tri0 1 M: addressstall_a $end
$var tri0 1 N: addressstall_b $end
$var wire 1 L9 q_a [31] $end
$var wire 1 M9 q_a [30] $end
$var wire 1 N9 q_a [29] $end
$var wire 1 O9 q_a [28] $end
$var wire 1 P9 q_a [27] $end
$var wire 1 Q9 q_a [26] $end
$var wire 1 R9 q_a [25] $end
$var wire 1 S9 q_a [24] $end
$var wire 1 T9 q_a [23] $end
$var wire 1 U9 q_a [22] $end
$var wire 1 V9 q_a [21] $end
$var wire 1 W9 q_a [20] $end
$var wire 1 X9 q_a [19] $end
$var wire 1 Y9 q_a [18] $end
$var wire 1 Z9 q_a [17] $end
$var wire 1 [9 q_a [16] $end
$var wire 1 \9 q_a [15] $end
$var wire 1 ]9 q_a [14] $end
$var wire 1 ^9 q_a [13] $end
$var wire 1 _9 q_a [12] $end
$var wire 1 `9 q_a [11] $end
$var wire 1 a9 q_a [10] $end
$var wire 1 b9 q_a [9] $end
$var wire 1 c9 q_a [8] $end
$var wire 1 d9 q_a [7] $end
$var wire 1 e9 q_a [6] $end
$var wire 1 f9 q_a [5] $end
$var wire 1 g9 q_a [4] $end
$var wire 1 h9 q_a [3] $end
$var wire 1 i9 q_a [2] $end
$var wire 1 j9 q_a [1] $end
$var wire 1 k9 q_a [0] $end
$var wire 1 O: q_b [0] $end
$var wire 1 P: eccstatus [2] $end
$var wire 1 Q: eccstatus [1] $end
$var wire 1 R: eccstatus [0] $end
$var reg 32 S; i_data_reg_a [31:0] $end
$var reg 32 T; temp_wa [31:0] $end
$var reg 32 U; temp_wa2 [31:0] $end
$var reg 32 V; temp_wa2b [31:0] $end
$var reg 32 W; init_temp [31:0] $end
$var reg 1 X; i_data_reg_b [0:0] $end
$var reg 1 Y; temp_wb [0:0] $end
$var reg 1 Z; temp_wb2 [0:0] $end
$var reg 1 [; temp $end
$var reg 32 \; i_q_reg_a [31:0] $end
$var reg 32 ]; i_q_tmp_a [31:0] $end
$var reg 32 ^; i_q_tmp2_a [31:0] $end
$var reg 1 _; i_q_reg_b [0:0] $end
$var reg 1 `; i_q_tmp_b [0:0] $end
$var reg 1 a; i_q_tmp2_b [0:0] $end
$var reg 1 b; i_q_output_latch [0:0] $end
$var reg 32 c; i_byteena_mask_reg_a [31:0] $end
$var reg 1 d; i_byteena_mask_reg_b [0:0] $end
$var reg 8 e; i_address_reg_a [7:0] $end
$var reg 1 f; i_address_reg_b [0:0] $end
$var reg 1 g; i_q_ecc_reg_b [0:0] $end
$var reg 1 h; i_q_ecc_tmp_b [0:0] $end
$var reg 8 i; i_original_address_a [7:0] $end
$var reg 32 j; i_byteena_mask_reg_a_tmp [31:0] $end
$var reg 1 k; i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 32 l; i_byteena_mask_reg_a_out [31:0] $end
$var reg 1 m; i_byteena_mask_reg_b_out [0:0] $end
$var reg 32 n; i_byteena_mask_reg_a_x [31:0] $end
$var reg 1 o; i_byteena_mask_reg_b_x [0:0] $end
$var reg 32 p; i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 1 q; i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 r; ram_initf [2048:1] $end
$var reg 1 s; i_wren_reg_a $end
$var reg 1 t; i_wren_reg_b $end
$var reg 1 u; i_rden_reg_a $end
$var reg 1 v; i_rden_reg_b $end
$var reg 1 w; i_read_flag_a $end
$var reg 1 x; i_read_flag_b $end
$var reg 1 y; i_write_flag_a $end
$var reg 1 z; i_write_flag_b $end
$var reg 1 {; good_to_go_a $end
$var reg 1 |; good_to_go_b $end
$var reg 32 }; file_desc [31:0] $end
$var reg 1 ~; init_file_b_port $end
$var reg 1 !< i_nmram_write_a $end
$var reg 1 "< i_nmram_write_b $end
$var reg 32 #< wa_mult_x [31:0] $end
$var reg 32 $< wa_mult_x_ii [31:0] $end
$var reg 32 %< wa_mult_x_iii [31:0] $end
$var reg 40 &< add_reg_a_mult_wa [39:0] $end
$var reg 2 '< add_reg_b_mult_wb [1:0] $end
$var reg 40 (< add_reg_a_mult_wa_pl_wa [39:0] $end
$var reg 2 )< add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 *< same_clock_pulse0 $end
$var reg 1 +< same_clock_pulse1 $end
$var reg 1 ,< i_original_data_b [0:0] $end
$var reg 32 -< i_original_data_a [31:0] $end
$var reg 1 .< i_address_aclr_a_flag $end
$var reg 1 /< i_address_aclr_a_prev $end
$var reg 1 0< i_address_aclr_b_flag $end
$var reg 1 1< i_address_aclr_b_prev $end
$var reg 1 2< i_outdata_aclr_a_prev $end
$var reg 1 3< i_outdata_aclr_b_prev $end
$var reg 1 4< i_force_reread_a $end
$var reg 1 5< i_force_reread_a1 $end
$var reg 1 6< i_force_reread_b $end
$var reg 1 7< i_force_reread_b1 $end
$var reg 1 8< i_force_reread_a_signal $end
$var reg 1 9< i_force_reread_b_signal $end
$var reg 169 :< cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 ;< i_ram_block_type [56:0] $end
$var integer 32 << i_byte_size $end
$var wire 1 =< i_good_to_write_a $end
$var wire 1 >< i_good_to_write_b $end
$var reg 1 ?< i_good_to_write_a2 $end
$var reg 1 @< i_good_to_write_b2 $end
$var reg 1 A< i_core_clocken_a_reg $end
$var reg 1 B< i_core_clocken0_b_reg $end
$var reg 1 C< i_core_clocken1_b_reg $end
$var wire 1 D< i_indata_aclr_a $end
$var wire 1 E< i_address_aclr_a $end
$var wire 1 F< i_wrcontrol_aclr_a $end
$var wire 1 G< i_indata_aclr_b $end
$var wire 1 H< i_address_aclr_b $end
$var wire 1 I< i_wrcontrol_aclr_b $end
$var wire 1 J< i_outdata_aclr_a $end
$var wire 1 K< i_outdata_aclr_b $end
$var wire 1 L< i_rdcontrol_aclr_b $end
$var wire 1 M< i_byteena_aclr_a $end
$var wire 1 N< i_byteena_aclr_b $end
$var wire 1 O< i_outdata_clken_a $end
$var wire 1 P< i_outdata_clken_b $end
$var wire 1 Q< i_outlatch_clken_a $end
$var wire 1 R< i_outlatch_clken_b $end
$var wire 1 S< i_clocken0 $end
$var wire 1 T< i_clocken1_b $end
$var wire 1 U< i_clocken0_b $end
$var wire 1 V< i_core_clocken_a $end
$var wire 1 W< i_core_clocken_b $end
$var wire 1 X< i_core_clocken0_b $end
$var wire 1 Y< i_core_clocken1_b $end
$var tri1 1 Z< i_byteena_a [3] $end
$var tri1 1 [< i_byteena_a [2] $end
$var tri1 1 \< i_byteena_a [1] $end
$var tri1 1 ]< i_byteena_a [0] $end
$var tri1 1 ^< i_byteena_b [0] $end
$var integer 32 _< i_numwords_a $end
$var integer 32 `< i_numwords_b $end
$var integer 32 a< i_aclr_flag_a $end
$var integer 32 b< i_aclr_flag_b $end
$var integer 32 c< i_q_tmp2_a_idx $end
$var integer 32 d< init_i $end
$var integer 32 e< i $end
$var integer 32 f< i2 $end
$var integer 32 g< i3 $end
$var integer 32 h< i4 $end
$var integer 32 i< i5 $end
$var integer 32 j< j $end
$var integer 32 k< j2 $end
$var integer 32 l< j3 $end
$var integer 32 m< k $end
$var integer 32 n< k2 $end
$var integer 32 o< k3 $end
$var integer 32 p< k4 $end
$var integer 32 q< i_div_wa $end
$var integer 32 r< i_div_wb $end
$var integer 32 s< j_plus_i2 $end
$var integer 32 t< j2_plus_i5 $end
$var integer 32 u< j3_plus_i5 $end
$var integer 32 v< j_plus_i2_div_a $end
$var integer 32 w< j2_plus_i5_div_a $end
$var integer 32 x< j3_plus_i5_div_a $end
$var integer 32 y< j3_plus_i5_div_b $end
$var integer 32 z< i_byteena_count $end
$var integer 32 {< port_a_bit_count_low $end
$var integer 32 |< port_a_bit_count_high $end
$var integer 32 }< port_b_bit_count_low $end
$var integer 32 ~< port_b_bit_count_high $end
$var time 64 != i_data_write_time_a $end
$var time 64 "= i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 #= IS_FAMILY_ARRIA10 $end
$var reg 160 $= device [160:1] $end
$var reg 1 %= is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 &= IS_FAMILY_ARRIAGX $end
$var reg 160 '= device [160:1] $end
$var reg 1 (= is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 )= IS_FAMILY_ARRIAIIGX $end
$var reg 160 *= device [160:1] $end
$var reg 1 += is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 ,= IS_FAMILY_ARRIAIIGZ $end
$var reg 160 -= device [160:1] $end
$var reg 1 .= is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 /= IS_FAMILY_ARRIAVGZ $end
$var reg 160 0= device [160:1] $end
$var reg 1 1= is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 2= IS_FAMILY_ARRIAV $end
$var reg 160 3= device [160:1] $end
$var reg 1 4= is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 5= IS_FAMILY_CYCLONE10LP $end
$var reg 160 6= device [160:1] $end
$var reg 1 7= is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 8= IS_FAMILY_CYCLONEII $end
$var reg 160 9= device [160:1] $end
$var reg 1 := is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 ;= IS_FAMILY_CYCLONEIIILS $end
$var reg 160 <= device [160:1] $end
$var reg 1 == is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 >= IS_FAMILY_CYCLONEIII $end
$var reg 160 ?= device [160:1] $end
$var reg 1 @= is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 A= IS_FAMILY_CYCLONEIVE $end
$var reg 160 B= device [160:1] $end
$var reg 1 C= is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 D= IS_FAMILY_CYCLONEIVGX $end
$var reg 160 E= device [160:1] $end
$var reg 1 F= is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 G= IS_FAMILY_CYCLONEV $end
$var reg 160 H= device [160:1] $end
$var reg 1 I= is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 J= IS_FAMILY_CYCLONE $end
$var reg 160 K= device [160:1] $end
$var reg 1 L= is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 M= IS_FAMILY_HARDCOPYII $end
$var reg 160 N= device [160:1] $end
$var reg 1 O= is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 P= IS_FAMILY_HARDCOPYIII $end
$var reg 160 Q= device [160:1] $end
$var reg 1 R= is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 S= IS_FAMILY_HARDCOPYIV $end
$var reg 160 T= device [160:1] $end
$var reg 1 U= is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 V= IS_FAMILY_MAX10 $end
$var reg 160 W= device [160:1] $end
$var reg 1 X= is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 Y= IS_FAMILY_MAXII $end
$var reg 160 Z= device [160:1] $end
$var reg 1 [= is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 \= IS_FAMILY_MAXV $end
$var reg 160 ]= device [160:1] $end
$var reg 1 ^= is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 _= IS_FAMILY_STRATIX10 $end
$var reg 160 `= device [160:1] $end
$var reg 1 a= is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 b= IS_FAMILY_STRATIXGX $end
$var reg 160 c= device [160:1] $end
$var reg 1 d= is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 e= IS_FAMILY_STRATIXIIGX $end
$var reg 160 f= device [160:1] $end
$var reg 1 g= is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 h= IS_FAMILY_STRATIXII $end
$var reg 160 i= device [160:1] $end
$var reg 1 j= is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 k= IS_FAMILY_STRATIXIII $end
$var reg 160 l= device [160:1] $end
$var reg 1 m= is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 n= IS_FAMILY_STRATIXIV $end
$var reg 160 o= device [160:1] $end
$var reg 1 p= is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 q= IS_FAMILY_STRATIXV $end
$var reg 160 r= device [160:1] $end
$var reg 1 s= is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 t= IS_FAMILY_STRATIX $end
$var reg 160 u= device [160:1] $end
$var reg 1 v= is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 w= FEATURE_FAMILY_STRATIXGX $end
$var reg 160 x= device [160:1] $end
$var reg 1 y= var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 z= FEATURE_FAMILY_CYCLONE $end
$var reg 160 {= device [160:1] $end
$var reg 1 |= var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 }= FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 ~= device [160:1] $end
$var reg 1 !> var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 "> FEATURE_FAMILY_STRATIXIII $end
$var reg 160 #> device [160:1] $end
$var reg 1 $> var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 %> FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 &> device [160:1] $end
$var reg 1 '> var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 (> FEATURE_FAMILY_STRATIXV $end
$var reg 160 )> device [160:1] $end
$var reg 1 *> var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 +> FEATURE_FAMILY_ARRIA10 $end
$var reg 160 ,> device [160:1] $end
$var reg 1 -> var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 .> FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 /> device [160:1] $end
$var reg 1 0> var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 1> FEATURE_FAMILY_STRATIXII $end
$var reg 160 2> device [160:1] $end
$var reg 1 3> var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 4> FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 5> device [160:1] $end
$var reg 1 6> var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 7> FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 8> device [160:1] $end
$var reg 1 9> var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 :> FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 ;> device [160:1] $end
$var reg 1 <> var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 => FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 >> device [160:1] $end
$var reg 1 ?> var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 @> FEATURE_FAMILY_STRATIX $end
$var reg 160 A> device [160:1] $end
$var reg 1 B> var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 C> FEATURE_FAMILY_MAXII $end
$var reg 160 D> device [160:1] $end
$var reg 1 E> var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 F> FEATURE_FAMILY_MAXV $end
$var reg 160 G> device [160:1] $end
$var reg 1 H> var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 I> FEATURE_FAMILY_CYCLONEII $end
$var reg 160 J> device [160:1] $end
$var reg 1 K> var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 L> FEATURE_FAMILY_STRATIXIV $end
$var reg 160 M> device [160:1] $end
$var reg 1 N> var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 O> FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 P> device [160:1] $end
$var reg 1 Q> var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 R> FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 S> device [160:1] $end
$var reg 1 T> var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 U> FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 V> device [160:1] $end
$var reg 1 W> var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 X> FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 Y> device [160:1] $end
$var reg 1 Z> var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 [> FEATURE_FAMILY_CYCLONEV $end
$var reg 160 \> device [160:1] $end
$var reg 1 ]> var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 ^> FEATURE_FAMILY_ARRIAV $end
$var reg 160 _> device [160:1] $end
$var reg 1 `> var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 a> FEATURE_FAMILY_MAX10 $end
$var reg 160 b> device [160:1] $end
$var reg 1 c> var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 d> FEATURE_FAMILY_STRATIX10 $end
$var reg 160 e> device [160:1] $end
$var reg 1 f> var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 g> FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 h> device [160:1] $end
$var reg 1 i> var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 j> FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 k> device [160:1] $end
$var reg 1 l> var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 m> FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 n> device [160:1] $end
$var reg 1 o> var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 p> FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 q> device [160:1] $end
$var reg 1 r> var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 s> FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 t> device [160:1] $end
$var reg 1 u> var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 v> FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 w> device [160:1] $end
$var reg 1 x> var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 y> FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 z> device [160:1] $end
$var reg 1 {> var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 |> FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 }> device [160:1] $end
$var reg 1 ~> var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 !? FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 "? device [160:1] $end
$var reg 1 #? var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 $? FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 %? device [160:1] $end
$var reg 1 &? var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 '? FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 (? device [160:1] $end
$var reg 1 )? var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 *? IS_VALID_FAMILY $end
$var reg 160 +? device [160:1] $end
$var reg 1 ,? is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 -? tolower [8:1] $end
$var reg 8 .? given_character [8:1] $end
$var reg 8 /? conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 0? ecc_parity [7:0] $end
$var reg 8 1? i_eccencparity [7:0] $end
$var integer 32 2? pointer $end
$var integer 32 3? pointer_max $end
$var integer 32 4? pointer_min $end
$var integer 32 5? flag_err $end
$var integer 32 6? flag $end
$var integer 32 7? flag_double $end
$var integer 32 8? flag_triple $end
$var integer 32 9? flag_single $end
$var integer 32 :? flag_no_err $end
$var integer 32 ;? flag_uncorr $end
$var integer 32 <? n $end
$var integer 32 =? err $end
$var integer 32 >? found $end
$var integer 32 ?? found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 @? in_file [2048:1] $end
$var integer 32 A? width $end
$var reg 2048 B? out_file [2048:1] $end
$var reg 2048 C? buffer [2048:1] $end
$var reg 1025 D? memory_data1 [1024:0] $end
$var reg 1025 E? memory_data2 [1024:0] $end
$var reg 8 F? c [8:1] $end
$var reg 4 G? hex [3:0] $end
$var reg 4 H? tmp_char [3:0] $end
$var reg 24 I? address_radix [24:1] $end
$var reg 24 J? data_radix [24:1] $end
$var reg 1 K? get_width $end
$var reg 1 L? get_depth $end
$var reg 1 M? get_data_radix $end
$var reg 1 N? get_address_radix $end
$var reg 1 O? width_found $end
$var reg 1 P? depth_found $end
$var reg 1 Q? data_radix_found $end
$var reg 1 R? address_radix_found $end
$var reg 1 S? get_address_data_pairs $end
$var reg 1 T? get_address $end
$var reg 1 U? get_data $end
$var reg 1 V? display_address $end
$var reg 1 W? invalid_address $end
$var reg 1 X? get_start_address $end
$var reg 1 Y? get_end_address $end
$var reg 1 Z? done $end
$var reg 1 [? error_status $end
$var reg 1 \? first_rec $end
$var reg 1 ]? last_rec $end
$var integer 32 ^? memory_width $end
$var integer 32 _? memory_depth $end
$var integer 32 `? value $end
$var integer 32 a? ifp $end
$var integer 32 b? ofp $end
$var integer 32 c? r $end
$var integer 32 d? r2 $end
$var integer 32 e? i $end
$var integer 32 f? j $end
$var integer 32 g? k $end
$var integer 32 h? m $end
$var integer 32 i? n $end
$var integer 32 j? negative $end
$var integer 32 k? off_addr $end
$var integer 32 l? nn $end
$var integer 32 m? address $end
$var integer 32 n? tt $end
$var integer 32 o? cc $end
$var integer 32 p? aah $end
$var integer 32 q? aal $end
$var integer 32 r? dd $end
$var integer 32 s? sum $end
$var integer 32 t? start_address $end
$var integer 32 u? end_address $end
$var integer 32 v? line_no $end
$var integer 32 w? character_count $end
$var integer 32 x? comment_with_percent_found $end
$var integer 32 y? comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 z? in_file [2048:1] $end
$var integer 32 {? width $end
$var reg 2048 |? out_file [2048:1] $end
$var reg 8 }? c [8:1] $end
$var reg 4 ~? hex [3:0] $end
$var reg 4 !@ tmp_char [3:0] $end
$var reg 1 "@ done $end
$var reg 1 #@ error_status $end
$var reg 1 $@ first_rec $end
$var reg 1 %@ last_rec $end
$var reg 1 &@ first_normal_record $end
$var reg 1 '@ is_word_address_format $end
$var integer 32 (@ ifp $end
$var integer 32 )@ ofp $end
$var integer 32 *@ r $end
$var integer 32 +@ r2 $end
$var integer 32 ,@ i $end
$var integer 32 -@ j $end
$var integer 32 .@ k $end
$var integer 32 /@ m $end
$var integer 32 0@ n $end
$var integer 32 1@ off_addr $end
$var integer 32 2@ nn $end
$var integer 32 3@ aaaa $end
$var integer 32 4@ aaaa_pre $end
$var integer 32 5@ tt $end
$var integer 32 6@ cc $end
$var integer 32 7@ aah $end
$var integer 32 8@ aal $end
$var integer 32 9@ dd $end
$var integer 32 :@ sum $end
$var integer 32 ;@ line_no $end
$var integer 32 <@ divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 =@ in_file [2048:1] $end
$var integer 32 >@ width $end
$var reg 2048 ?@ out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module imem $end
$var wire 1 @@ address [7] $end
$var wire 1 A@ address [6] $end
$var wire 1 B@ address [5] $end
$var wire 1 C@ address [4] $end
$var wire 1 D@ address [3] $end
$var wire 1 E@ address [2] $end
$var wire 1 F@ address [1] $end
$var wire 1 G@ address [0] $end
$var tri1 1 H@ byteena [3] $end
$var tri1 1 I@ byteena [2] $end
$var tri1 1 J@ byteena [1] $end
$var tri1 1 K@ byteena [0] $end
$var tri1 1 L@ clock $end
$var wire 1 M@ data [31] $end
$var wire 1 N@ data [30] $end
$var wire 1 O@ data [29] $end
$var wire 1 P@ data [28] $end
$var wire 1 Q@ data [27] $end
$var wire 1 R@ data [26] $end
$var wire 1 S@ data [25] $end
$var wire 1 T@ data [24] $end
$var wire 1 U@ data [23] $end
$var wire 1 V@ data [22] $end
$var wire 1 W@ data [21] $end
$var wire 1 X@ data [20] $end
$var wire 1 Y@ data [19] $end
$var wire 1 Z@ data [18] $end
$var wire 1 [@ data [17] $end
$var wire 1 \@ data [16] $end
$var wire 1 ]@ data [15] $end
$var wire 1 ^@ data [14] $end
$var wire 1 _@ data [13] $end
$var wire 1 `@ data [12] $end
$var wire 1 a@ data [11] $end
$var wire 1 b@ data [10] $end
$var wire 1 c@ data [9] $end
$var wire 1 d@ data [8] $end
$var wire 1 e@ data [7] $end
$var wire 1 f@ data [6] $end
$var wire 1 g@ data [5] $end
$var wire 1 h@ data [4] $end
$var wire 1 i@ data [3] $end
$var wire 1 j@ data [2] $end
$var wire 1 k@ data [1] $end
$var wire 1 l@ data [0] $end
$var wire 1 m@ wren $end
$var wire 1 n@ q [31] $end
$var wire 1 o@ q [30] $end
$var wire 1 p@ q [29] $end
$var wire 1 q@ q [28] $end
$var wire 1 r@ q [27] $end
$var wire 1 s@ q [26] $end
$var wire 1 t@ q [25] $end
$var wire 1 u@ q [24] $end
$var wire 1 v@ q [23] $end
$var wire 1 w@ q [22] $end
$var wire 1 x@ q [21] $end
$var wire 1 y@ q [20] $end
$var wire 1 z@ q [19] $end
$var wire 1 {@ q [18] $end
$var wire 1 |@ q [17] $end
$var wire 1 }@ q [16] $end
$var wire 1 ~@ q [15] $end
$var wire 1 !A q [14] $end
$var wire 1 "A q [13] $end
$var wire 1 #A q [12] $end
$var wire 1 $A q [11] $end
$var wire 1 %A q [10] $end
$var wire 1 &A q [9] $end
$var wire 1 'A q [8] $end
$var wire 1 (A q [7] $end
$var wire 1 )A q [6] $end
$var wire 1 *A q [5] $end
$var wire 1 +A q [4] $end
$var wire 1 ,A q [3] $end
$var wire 1 -A q [2] $end
$var wire 1 .A q [1] $end
$var wire 1 /A q [0] $end
$var wire 1 0A sub_wire0 [31] $end
$var wire 1 1A sub_wire0 [30] $end
$var wire 1 2A sub_wire0 [29] $end
$var wire 1 3A sub_wire0 [28] $end
$var wire 1 4A sub_wire0 [27] $end
$var wire 1 5A sub_wire0 [26] $end
$var wire 1 6A sub_wire0 [25] $end
$var wire 1 7A sub_wire0 [24] $end
$var wire 1 8A sub_wire0 [23] $end
$var wire 1 9A sub_wire0 [22] $end
$var wire 1 :A sub_wire0 [21] $end
$var wire 1 ;A sub_wire0 [20] $end
$var wire 1 <A sub_wire0 [19] $end
$var wire 1 =A sub_wire0 [18] $end
$var wire 1 >A sub_wire0 [17] $end
$var wire 1 ?A sub_wire0 [16] $end
$var wire 1 @A sub_wire0 [15] $end
$var wire 1 AA sub_wire0 [14] $end
$var wire 1 BA sub_wire0 [13] $end
$var wire 1 CA sub_wire0 [12] $end
$var wire 1 DA sub_wire0 [11] $end
$var wire 1 EA sub_wire0 [10] $end
$var wire 1 FA sub_wire0 [9] $end
$var wire 1 GA sub_wire0 [8] $end
$var wire 1 HA sub_wire0 [7] $end
$var wire 1 IA sub_wire0 [6] $end
$var wire 1 JA sub_wire0 [5] $end
$var wire 1 KA sub_wire0 [4] $end
$var wire 1 LA sub_wire0 [3] $end
$var wire 1 MA sub_wire0 [2] $end
$var wire 1 NA sub_wire0 [1] $end
$var wire 1 OA sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 PA width_a $end
$var parameter 32 QA widthad_a $end
$var parameter 32 RA numwords_a $end
$var parameter 96 SA outdata_reg_a $end
$var parameter 32 TA address_aclr_a $end
$var parameter 32 UA outdata_aclr_a $end
$var parameter 32 VA indata_aclr_a $end
$var parameter 32 WA wrcontrol_aclr_a $end
$var parameter 32 XA byteena_aclr_a $end
$var parameter 32 YA width_byteena_a $end
$var parameter 32 ZA width_b $end
$var parameter 32 [A widthad_b $end
$var parameter 32 \A numwords_b $end
$var parameter 48 ]A rdcontrol_reg_b $end
$var parameter 48 ^A address_reg_b $end
$var parameter 96 _A outdata_reg_b $end
$var parameter 32 `A outdata_aclr_b $end
$var parameter 32 aA rdcontrol_aclr_b $end
$var parameter 48 bA indata_reg_b $end
$var parameter 48 cA wrcontrol_wraddress_reg_b $end
$var parameter 48 dA byteena_reg_b $end
$var parameter 32 eA indata_aclr_b $end
$var parameter 32 fA wrcontrol_aclr_b $end
$var parameter 32 gA address_aclr_b $end
$var parameter 32 hA byteena_aclr_b $end
$var parameter 32 iA width_byteena_b $end
$var parameter 48 jA clock_enable_input_a $end
$var parameter 48 kA clock_enable_output_a $end
$var parameter 48 lA clock_enable_input_b $end
$var parameter 48 mA clock_enable_output_b $end
$var parameter 120 nA clock_enable_core_a $end
$var parameter 120 oA clock_enable_core_b $end
$var parameter 160 pA read_during_write_mode_port_a $end
$var parameter 160 qA read_during_write_mode_port_b $end
$var parameter 40 rA enable_ecc $end
$var parameter 32 sA width_eccstatus $end
$var parameter 40 tA ecc_pipeline_stage_enabled $end
$var parameter 88 uA operation_mode $end
$var parameter 32 vA byte_size $end
$var parameter 72 wA read_during_write_mode_mixed_ports $end
$var parameter 32 xA ram_block_type $end
$var parameter 48 yA init_file $end
$var parameter 48 zA init_file_layout $end
$var parameter 32 {A maximum_depth $end
$var parameter 72 |A intended_device_family $end
$var parameter 168 }A lpm_hint $end
$var parameter 80 ~A lpm_type $end
$var parameter 24 !B implement_in_les $end
$var parameter 40 "B power_up_uninitialized $end
$var parameter 32 #B family_arria10 $end
$var tri0 1 m@ wren_a $end
$var tri0 1 $B wren_b $end
$var tri1 1 %B rden_a $end
$var tri1 1 &B rden_b $end
$var wire 1 M@ data_a [31] $end
$var wire 1 N@ data_a [30] $end
$var wire 1 O@ data_a [29] $end
$var wire 1 P@ data_a [28] $end
$var wire 1 Q@ data_a [27] $end
$var wire 1 R@ data_a [26] $end
$var wire 1 S@ data_a [25] $end
$var wire 1 T@ data_a [24] $end
$var wire 1 U@ data_a [23] $end
$var wire 1 V@ data_a [22] $end
$var wire 1 W@ data_a [21] $end
$var wire 1 X@ data_a [20] $end
$var wire 1 Y@ data_a [19] $end
$var wire 1 Z@ data_a [18] $end
$var wire 1 [@ data_a [17] $end
$var wire 1 \@ data_a [16] $end
$var wire 1 ]@ data_a [15] $end
$var wire 1 ^@ data_a [14] $end
$var wire 1 _@ data_a [13] $end
$var wire 1 `@ data_a [12] $end
$var wire 1 a@ data_a [11] $end
$var wire 1 b@ data_a [10] $end
$var wire 1 c@ data_a [9] $end
$var wire 1 d@ data_a [8] $end
$var wire 1 e@ data_a [7] $end
$var wire 1 f@ data_a [6] $end
$var wire 1 g@ data_a [5] $end
$var wire 1 h@ data_a [4] $end
$var wire 1 i@ data_a [3] $end
$var wire 1 j@ data_a [2] $end
$var wire 1 k@ data_a [1] $end
$var wire 1 l@ data_a [0] $end
$var wire 1 'B data_b [0] $end
$var wire 1 @@ address_a [7] $end
$var wire 1 A@ address_a [6] $end
$var wire 1 B@ address_a [5] $end
$var wire 1 C@ address_a [4] $end
$var wire 1 D@ address_a [3] $end
$var wire 1 E@ address_a [2] $end
$var wire 1 F@ address_a [1] $end
$var wire 1 G@ address_a [0] $end
$var wire 1 (B address_b [0] $end
$var tri1 1 L@ clock0 $end
$var wire 1 )B clock1 $end
$var tri1 1 *B clocken0 $end
$var tri1 1 +B clocken1 $end
$var tri1 1 ,B clocken2 $end
$var tri1 1 -B clocken3 $end
$var tri0 1 .B aclr0 $end
$var tri0 1 /B aclr1 $end
$var tri1 1 H@ byteena_a [3] $end
$var tri1 1 I@ byteena_a [2] $end
$var tri1 1 J@ byteena_a [1] $end
$var tri1 1 K@ byteena_a [0] $end
$var tri1 1 0B byteena_b [0] $end
$var tri0 1 1B addressstall_a $end
$var tri0 1 2B addressstall_b $end
$var wire 1 0A q_a [31] $end
$var wire 1 1A q_a [30] $end
$var wire 1 2A q_a [29] $end
$var wire 1 3A q_a [28] $end
$var wire 1 4A q_a [27] $end
$var wire 1 5A q_a [26] $end
$var wire 1 6A q_a [25] $end
$var wire 1 7A q_a [24] $end
$var wire 1 8A q_a [23] $end
$var wire 1 9A q_a [22] $end
$var wire 1 :A q_a [21] $end
$var wire 1 ;A q_a [20] $end
$var wire 1 <A q_a [19] $end
$var wire 1 =A q_a [18] $end
$var wire 1 >A q_a [17] $end
$var wire 1 ?A q_a [16] $end
$var wire 1 @A q_a [15] $end
$var wire 1 AA q_a [14] $end
$var wire 1 BA q_a [13] $end
$var wire 1 CA q_a [12] $end
$var wire 1 DA q_a [11] $end
$var wire 1 EA q_a [10] $end
$var wire 1 FA q_a [9] $end
$var wire 1 GA q_a [8] $end
$var wire 1 HA q_a [7] $end
$var wire 1 IA q_a [6] $end
$var wire 1 JA q_a [5] $end
$var wire 1 KA q_a [4] $end
$var wire 1 LA q_a [3] $end
$var wire 1 MA q_a [2] $end
$var wire 1 NA q_a [1] $end
$var wire 1 OA q_a [0] $end
$var wire 1 3B q_b [0] $end
$var wire 1 4B eccstatus [2] $end
$var wire 1 5B eccstatus [1] $end
$var wire 1 6B eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 7B width_a $end
$var parameter 32 8B widthad_a $end
$var parameter 32 9B numwords_a $end
$var parameter 96 :B outdata_reg_a $end
$var parameter 32 ;B address_aclr_a $end
$var parameter 32 <B outdata_aclr_a $end
$var parameter 32 =B indata_aclr_a $end
$var parameter 32 >B wrcontrol_aclr_a $end
$var parameter 32 ?B byteena_aclr_a $end
$var parameter 32 @B width_byteena_a $end
$var parameter 32 AB width_b $end
$var parameter 32 BB widthad_b $end
$var parameter 32 CB numwords_b $end
$var parameter 48 DB rdcontrol_reg_b $end
$var parameter 48 EB address_reg_b $end
$var parameter 96 FB outdata_reg_b $end
$var parameter 32 GB outdata_aclr_b $end
$var parameter 32 HB rdcontrol_aclr_b $end
$var parameter 48 IB indata_reg_b $end
$var parameter 48 JB wrcontrol_wraddress_reg_b $end
$var parameter 48 KB byteena_reg_b $end
$var parameter 32 LB indata_aclr_b $end
$var parameter 32 MB wrcontrol_aclr_b $end
$var parameter 32 NB address_aclr_b $end
$var parameter 32 OB byteena_aclr_b $end
$var parameter 32 PB width_byteena_b $end
$var parameter 48 QB clock_enable_input_a $end
$var parameter 48 RB clock_enable_output_a $end
$var parameter 48 SB clock_enable_input_b $end
$var parameter 48 TB clock_enable_output_b $end
$var parameter 120 UB clock_enable_core_a $end
$var parameter 120 VB clock_enable_core_b $end
$var parameter 160 WB read_during_write_mode_port_a $end
$var parameter 160 XB read_during_write_mode_port_b $end
$var parameter 40 YB enable_ecc $end
$var parameter 32 ZB width_eccstatus $end
$var parameter 40 [B ecc_pipeline_stage_enabled $end
$var parameter 88 \B operation_mode $end
$var parameter 32 ]B byte_size $end
$var parameter 72 ^B read_during_write_mode_mixed_ports $end
$var parameter 32 _B ram_block_type $end
$var parameter 48 `B init_file $end
$var parameter 48 aB init_file_layout $end
$var parameter 32 bB maximum_depth $end
$var parameter 72 cB intended_device_family $end
$var parameter 168 dB lpm_hint $end
$var parameter 80 eB lpm_type $end
$var parameter 24 fB implement_in_les $end
$var parameter 40 gB power_up_uninitialized $end
$var parameter 24 hB sim_show_memory_data_in_port_b_layout $end
$var parameter 32 iB is_lutram $end
$var parameter 32 jB is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 kB is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 lB check_simultaneous_read_write $end
$var parameter 32 mB dual_port_addreg_b_clk0 $end
$var parameter 32 nB dual_port_addreg_b_clk1 $end
$var parameter 32 oB i_byte_size_tmp $end
$var parameter 32 pB i_lutram_read $end
$var parameter 32 qB enable_mem_data_b_reading $end
$var parameter 32 rB family_arriav $end
$var parameter 32 sB family_cyclonev $end
$var parameter 32 tB family_base_arriav $end
$var parameter 32 uB family_arria10 $end
$var parameter 32 vB family_stratix10 $end
$var parameter 32 wB family_arriavi $end
$var parameter 32 xB family_nightfury $end
$var parameter 32 yB family_arriavgz $end
$var parameter 32 zB family_stratixv $end
$var parameter 32 {B family_hardcopyiv $end
$var parameter 32 |B family_hardcopyiii $end
$var parameter 32 }B family_hardcopyii $end
$var parameter 32 ~B family_arriaiigz $end
$var parameter 32 !C family_arriaiigx $end
$var parameter 32 "C family_stratixiii $end
$var parameter 32 #C family_zippleback $end
$var parameter 32 $C family_cycloneiii $end
$var parameter 32 %C family_cyclone $end
$var parameter 32 &C family_base_cycloneii $end
$var parameter 32 'C family_cycloneii $end
$var parameter 32 (C family_base_stratix $end
$var parameter 32 )C family_base_stratixii $end
$var parameter 32 *C family_has_lutram $end
$var parameter 32 +C family_has_stratixv_style_ram $end
$var parameter 32 ,C family_has_stratixiii_style_ram $end
$var parameter 32 -C family_has_m512 $end
$var parameter 32 .C family_has_megaram $end
$var parameter 32 /C family_has_stratixi_style_ram $end
$var parameter 32 0C is_write_on_positive_edge $end
$var parameter 32 1C lutram_single_port_fast_read $end
$var parameter 32 2C lutram_dual_port_fast_read $end
$var parameter 32 3C s3_address_aclr_a $end
$var parameter 32 4C s3_address_aclr_b $end
$var parameter 32 5C i_address_aclr_family_a $end
$var parameter 32 6C i_address_aclr_family_b $end
$var tri0 1 m@ wren_a $end
$var tri0 1 $B wren_b $end
$var tri1 1 %B rden_a $end
$var tri1 1 &B rden_b $end
$var wire 1 M@ data_a [31] $end
$var wire 1 N@ data_a [30] $end
$var wire 1 O@ data_a [29] $end
$var wire 1 P@ data_a [28] $end
$var wire 1 Q@ data_a [27] $end
$var wire 1 R@ data_a [26] $end
$var wire 1 S@ data_a [25] $end
$var wire 1 T@ data_a [24] $end
$var wire 1 U@ data_a [23] $end
$var wire 1 V@ data_a [22] $end
$var wire 1 W@ data_a [21] $end
$var wire 1 X@ data_a [20] $end
$var wire 1 Y@ data_a [19] $end
$var wire 1 Z@ data_a [18] $end
$var wire 1 [@ data_a [17] $end
$var wire 1 \@ data_a [16] $end
$var wire 1 ]@ data_a [15] $end
$var wire 1 ^@ data_a [14] $end
$var wire 1 _@ data_a [13] $end
$var wire 1 `@ data_a [12] $end
$var wire 1 a@ data_a [11] $end
$var wire 1 b@ data_a [10] $end
$var wire 1 c@ data_a [9] $end
$var wire 1 d@ data_a [8] $end
$var wire 1 e@ data_a [7] $end
$var wire 1 f@ data_a [6] $end
$var wire 1 g@ data_a [5] $end
$var wire 1 h@ data_a [4] $end
$var wire 1 i@ data_a [3] $end
$var wire 1 j@ data_a [2] $end
$var wire 1 k@ data_a [1] $end
$var wire 1 l@ data_a [0] $end
$var wire 1 'B data_b [0] $end
$var wire 1 @@ address_a [7] $end
$var wire 1 A@ address_a [6] $end
$var wire 1 B@ address_a [5] $end
$var wire 1 C@ address_a [4] $end
$var wire 1 D@ address_a [3] $end
$var wire 1 E@ address_a [2] $end
$var wire 1 F@ address_a [1] $end
$var wire 1 G@ address_a [0] $end
$var wire 1 (B address_b [0] $end
$var tri1 1 L@ clock0 $end
$var wire 1 )B clock1 $end
$var tri1 1 *B clocken0 $end
$var tri1 1 +B clocken1 $end
$var tri1 1 ,B clocken2 $end
$var tri1 1 -B clocken3 $end
$var tri0 1 .B aclr0 $end
$var tri0 1 /B aclr1 $end
$var wire 1 H@ byteena_a [3] $end
$var wire 1 I@ byteena_a [2] $end
$var wire 1 J@ byteena_a [1] $end
$var wire 1 K@ byteena_a [0] $end
$var wire 1 0B byteena_b [0] $end
$var tri0 1 1B addressstall_a $end
$var tri0 1 2B addressstall_b $end
$var wire 1 0A q_a [31] $end
$var wire 1 1A q_a [30] $end
$var wire 1 2A q_a [29] $end
$var wire 1 3A q_a [28] $end
$var wire 1 4A q_a [27] $end
$var wire 1 5A q_a [26] $end
$var wire 1 6A q_a [25] $end
$var wire 1 7A q_a [24] $end
$var wire 1 8A q_a [23] $end
$var wire 1 9A q_a [22] $end
$var wire 1 :A q_a [21] $end
$var wire 1 ;A q_a [20] $end
$var wire 1 <A q_a [19] $end
$var wire 1 =A q_a [18] $end
$var wire 1 >A q_a [17] $end
$var wire 1 ?A q_a [16] $end
$var wire 1 @A q_a [15] $end
$var wire 1 AA q_a [14] $end
$var wire 1 BA q_a [13] $end
$var wire 1 CA q_a [12] $end
$var wire 1 DA q_a [11] $end
$var wire 1 EA q_a [10] $end
$var wire 1 FA q_a [9] $end
$var wire 1 GA q_a [8] $end
$var wire 1 HA q_a [7] $end
$var wire 1 IA q_a [6] $end
$var wire 1 JA q_a [5] $end
$var wire 1 KA q_a [4] $end
$var wire 1 LA q_a [3] $end
$var wire 1 MA q_a [2] $end
$var wire 1 NA q_a [1] $end
$var wire 1 OA q_a [0] $end
$var wire 1 3B q_b [0] $end
$var wire 1 4B eccstatus [2] $end
$var wire 1 5B eccstatus [1] $end
$var wire 1 6B eccstatus [0] $end
$var reg 32 7C i_data_reg_a [31:0] $end
$var reg 32 8C temp_wa [31:0] $end
$var reg 32 9C temp_wa2 [31:0] $end
$var reg 32 :C temp_wa2b [31:0] $end
$var reg 32 ;C init_temp [31:0] $end
$var reg 1 <C i_data_reg_b [0:0] $end
$var reg 1 =C temp_wb [0:0] $end
$var reg 1 >C temp_wb2 [0:0] $end
$var reg 1 ?C temp $end
$var reg 32 @C i_q_reg_a [31:0] $end
$var reg 32 AC i_q_tmp_a [31:0] $end
$var reg 32 BC i_q_tmp2_a [31:0] $end
$var reg 1 CC i_q_reg_b [0:0] $end
$var reg 1 DC i_q_tmp_b [0:0] $end
$var reg 1 EC i_q_tmp2_b [0:0] $end
$var reg 1 FC i_q_output_latch [0:0] $end
$var reg 32 GC i_byteena_mask_reg_a [31:0] $end
$var reg 1 HC i_byteena_mask_reg_b [0:0] $end
$var reg 8 IC i_address_reg_a [7:0] $end
$var reg 1 JC i_address_reg_b [0:0] $end
$var reg 1 KC i_q_ecc_reg_b [0:0] $end
$var reg 1 LC i_q_ecc_tmp_b [0:0] $end
$var reg 8 MC i_original_address_a [7:0] $end
$var reg 32 NC i_byteena_mask_reg_a_tmp [31:0] $end
$var reg 1 OC i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 32 PC i_byteena_mask_reg_a_out [31:0] $end
$var reg 1 QC i_byteena_mask_reg_b_out [0:0] $end
$var reg 32 RC i_byteena_mask_reg_a_x [31:0] $end
$var reg 1 SC i_byteena_mask_reg_b_x [0:0] $end
$var reg 32 TC i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 1 UC i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 VC ram_initf [2048:1] $end
$var reg 1 WC i_wren_reg_a $end
$var reg 1 XC i_wren_reg_b $end
$var reg 1 YC i_rden_reg_a $end
$var reg 1 ZC i_rden_reg_b $end
$var reg 1 [C i_read_flag_a $end
$var reg 1 \C i_read_flag_b $end
$var reg 1 ]C i_write_flag_a $end
$var reg 1 ^C i_write_flag_b $end
$var reg 1 _C good_to_go_a $end
$var reg 1 `C good_to_go_b $end
$var reg 32 aC file_desc [31:0] $end
$var reg 1 bC init_file_b_port $end
$var reg 1 cC i_nmram_write_a $end
$var reg 1 dC i_nmram_write_b $end
$var reg 32 eC wa_mult_x [31:0] $end
$var reg 32 fC wa_mult_x_ii [31:0] $end
$var reg 32 gC wa_mult_x_iii [31:0] $end
$var reg 40 hC add_reg_a_mult_wa [39:0] $end
$var reg 2 iC add_reg_b_mult_wb [1:0] $end
$var reg 40 jC add_reg_a_mult_wa_pl_wa [39:0] $end
$var reg 2 kC add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 lC same_clock_pulse0 $end
$var reg 1 mC same_clock_pulse1 $end
$var reg 1 nC i_original_data_b [0:0] $end
$var reg 32 oC i_original_data_a [31:0] $end
$var reg 1 pC i_address_aclr_a_flag $end
$var reg 1 qC i_address_aclr_a_prev $end
$var reg 1 rC i_address_aclr_b_flag $end
$var reg 1 sC i_address_aclr_b_prev $end
$var reg 1 tC i_outdata_aclr_a_prev $end
$var reg 1 uC i_outdata_aclr_b_prev $end
$var reg 1 vC i_force_reread_a $end
$var reg 1 wC i_force_reread_a1 $end
$var reg 1 xC i_force_reread_b $end
$var reg 1 yC i_force_reread_b1 $end
$var reg 1 zC i_force_reread_a_signal $end
$var reg 1 {C i_force_reread_b_signal $end
$var reg 169 |C cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 }C i_ram_block_type [56:0] $end
$var integer 32 ~C i_byte_size $end
$var wire 1 !D i_good_to_write_a $end
$var wire 1 "D i_good_to_write_b $end
$var reg 1 #D i_good_to_write_a2 $end
$var reg 1 $D i_good_to_write_b2 $end
$var reg 1 %D i_core_clocken_a_reg $end
$var reg 1 &D i_core_clocken0_b_reg $end
$var reg 1 'D i_core_clocken1_b_reg $end
$var wire 1 (D i_indata_aclr_a $end
$var wire 1 )D i_address_aclr_a $end
$var wire 1 *D i_wrcontrol_aclr_a $end
$var wire 1 +D i_indata_aclr_b $end
$var wire 1 ,D i_address_aclr_b $end
$var wire 1 -D i_wrcontrol_aclr_b $end
$var wire 1 .D i_outdata_aclr_a $end
$var wire 1 /D i_outdata_aclr_b $end
$var wire 1 0D i_rdcontrol_aclr_b $end
$var wire 1 1D i_byteena_aclr_a $end
$var wire 1 2D i_byteena_aclr_b $end
$var wire 1 3D i_outdata_clken_a $end
$var wire 1 4D i_outdata_clken_b $end
$var wire 1 5D i_outlatch_clken_a $end
$var wire 1 6D i_outlatch_clken_b $end
$var wire 1 7D i_clocken0 $end
$var wire 1 8D i_clocken1_b $end
$var wire 1 9D i_clocken0_b $end
$var wire 1 :D i_core_clocken_a $end
$var wire 1 ;D i_core_clocken_b $end
$var wire 1 <D i_core_clocken0_b $end
$var wire 1 =D i_core_clocken1_b $end
$var tri1 1 >D i_byteena_a [3] $end
$var tri1 1 ?D i_byteena_a [2] $end
$var tri1 1 @D i_byteena_a [1] $end
$var tri1 1 AD i_byteena_a [0] $end
$var tri1 1 BD i_byteena_b [0] $end
$var integer 32 CD i_numwords_a $end
$var integer 32 DD i_numwords_b $end
$var integer 32 ED i_aclr_flag_a $end
$var integer 32 FD i_aclr_flag_b $end
$var integer 32 GD i_q_tmp2_a_idx $end
$var integer 32 HD init_i $end
$var integer 32 ID i $end
$var integer 32 JD i2 $end
$var integer 32 KD i3 $end
$var integer 32 LD i4 $end
$var integer 32 MD i5 $end
$var integer 32 ND j $end
$var integer 32 OD j2 $end
$var integer 32 PD j3 $end
$var integer 32 QD k $end
$var integer 32 RD k2 $end
$var integer 32 SD k3 $end
$var integer 32 TD k4 $end
$var integer 32 UD i_div_wa $end
$var integer 32 VD i_div_wb $end
$var integer 32 WD j_plus_i2 $end
$var integer 32 XD j2_plus_i5 $end
$var integer 32 YD j3_plus_i5 $end
$var integer 32 ZD j_plus_i2_div_a $end
$var integer 32 [D j2_plus_i5_div_a $end
$var integer 32 \D j3_plus_i5_div_a $end
$var integer 32 ]D j3_plus_i5_div_b $end
$var integer 32 ^D i_byteena_count $end
$var integer 32 _D port_a_bit_count_low $end
$var integer 32 `D port_a_bit_count_high $end
$var integer 32 aD port_b_bit_count_low $end
$var integer 32 bD port_b_bit_count_high $end
$var time 64 cD i_data_write_time_a $end
$var time 64 dD i_data_write_time_b $end

$scope begin genblk4 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 eD IS_FAMILY_ARRIA10 $end
$var reg 160 fD device [160:1] $end
$var reg 1 gD is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 hD IS_FAMILY_ARRIAGX $end
$var reg 160 iD device [160:1] $end
$var reg 1 jD is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 kD IS_FAMILY_ARRIAIIGX $end
$var reg 160 lD device [160:1] $end
$var reg 1 mD is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 nD IS_FAMILY_ARRIAIIGZ $end
$var reg 160 oD device [160:1] $end
$var reg 1 pD is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 qD IS_FAMILY_ARRIAVGZ $end
$var reg 160 rD device [160:1] $end
$var reg 1 sD is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 tD IS_FAMILY_ARRIAV $end
$var reg 160 uD device [160:1] $end
$var reg 1 vD is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 wD IS_FAMILY_CYCLONE10LP $end
$var reg 160 xD device [160:1] $end
$var reg 1 yD is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 zD IS_FAMILY_CYCLONEII $end
$var reg 160 {D device [160:1] $end
$var reg 1 |D is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 }D IS_FAMILY_CYCLONEIIILS $end
$var reg 160 ~D device [160:1] $end
$var reg 1 !E is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 "E IS_FAMILY_CYCLONEIII $end
$var reg 160 #E device [160:1] $end
$var reg 1 $E is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 %E IS_FAMILY_CYCLONEIVE $end
$var reg 160 &E device [160:1] $end
$var reg 1 'E is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 (E IS_FAMILY_CYCLONEIVGX $end
$var reg 160 )E device [160:1] $end
$var reg 1 *E is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 +E IS_FAMILY_CYCLONEV $end
$var reg 160 ,E device [160:1] $end
$var reg 1 -E is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 .E IS_FAMILY_CYCLONE $end
$var reg 160 /E device [160:1] $end
$var reg 1 0E is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 1E IS_FAMILY_HARDCOPYII $end
$var reg 160 2E device [160:1] $end
$var reg 1 3E is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 4E IS_FAMILY_HARDCOPYIII $end
$var reg 160 5E device [160:1] $end
$var reg 1 6E is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 7E IS_FAMILY_HARDCOPYIV $end
$var reg 160 8E device [160:1] $end
$var reg 1 9E is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 :E IS_FAMILY_MAX10 $end
$var reg 160 ;E device [160:1] $end
$var reg 1 <E is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 =E IS_FAMILY_MAXII $end
$var reg 160 >E device [160:1] $end
$var reg 1 ?E is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 @E IS_FAMILY_MAXV $end
$var reg 160 AE device [160:1] $end
$var reg 1 BE is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 CE IS_FAMILY_STRATIX10 $end
$var reg 160 DE device [160:1] $end
$var reg 1 EE is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 FE IS_FAMILY_STRATIXGX $end
$var reg 160 GE device [160:1] $end
$var reg 1 HE is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 IE IS_FAMILY_STRATIXIIGX $end
$var reg 160 JE device [160:1] $end
$var reg 1 KE is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 LE IS_FAMILY_STRATIXII $end
$var reg 160 ME device [160:1] $end
$var reg 1 NE is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 OE IS_FAMILY_STRATIXIII $end
$var reg 160 PE device [160:1] $end
$var reg 1 QE is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 RE IS_FAMILY_STRATIXIV $end
$var reg 160 SE device [160:1] $end
$var reg 1 TE is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 UE IS_FAMILY_STRATIXV $end
$var reg 160 VE device [160:1] $end
$var reg 1 WE is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 XE IS_FAMILY_STRATIX $end
$var reg 160 YE device [160:1] $end
$var reg 1 ZE is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 [E FEATURE_FAMILY_STRATIXGX $end
$var reg 160 \E device [160:1] $end
$var reg 1 ]E var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 ^E FEATURE_FAMILY_CYCLONE $end
$var reg 160 _E device [160:1] $end
$var reg 1 `E var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 aE FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 bE device [160:1] $end
$var reg 1 cE var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 dE FEATURE_FAMILY_STRATIXIII $end
$var reg 160 eE device [160:1] $end
$var reg 1 fE var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 gE FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 hE device [160:1] $end
$var reg 1 iE var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 jE FEATURE_FAMILY_STRATIXV $end
$var reg 160 kE device [160:1] $end
$var reg 1 lE var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 mE FEATURE_FAMILY_ARRIA10 $end
$var reg 160 nE device [160:1] $end
$var reg 1 oE var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 pE FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 qE device [160:1] $end
$var reg 1 rE var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 sE FEATURE_FAMILY_STRATIXII $end
$var reg 160 tE device [160:1] $end
$var reg 1 uE var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 vE FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 wE device [160:1] $end
$var reg 1 xE var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 yE FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 zE device [160:1] $end
$var reg 1 {E var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 |E FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 }E device [160:1] $end
$var reg 1 ~E var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 !F FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 "F device [160:1] $end
$var reg 1 #F var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 $F FEATURE_FAMILY_STRATIX $end
$var reg 160 %F device [160:1] $end
$var reg 1 &F var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 'F FEATURE_FAMILY_MAXII $end
$var reg 160 (F device [160:1] $end
$var reg 1 )F var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 *F FEATURE_FAMILY_MAXV $end
$var reg 160 +F device [160:1] $end
$var reg 1 ,F var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 -F FEATURE_FAMILY_CYCLONEII $end
$var reg 160 .F device [160:1] $end
$var reg 1 /F var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 0F FEATURE_FAMILY_STRATIXIV $end
$var reg 160 1F device [160:1] $end
$var reg 1 2F var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 3F FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 4F device [160:1] $end
$var reg 1 5F var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 6F FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 7F device [160:1] $end
$var reg 1 8F var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 9F FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 :F device [160:1] $end
$var reg 1 ;F var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 <F FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 =F device [160:1] $end
$var reg 1 >F var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 ?F FEATURE_FAMILY_CYCLONEV $end
$var reg 160 @F device [160:1] $end
$var reg 1 AF var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 BF FEATURE_FAMILY_ARRIAV $end
$var reg 160 CF device [160:1] $end
$var reg 1 DF var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 EF FEATURE_FAMILY_MAX10 $end
$var reg 160 FF device [160:1] $end
$var reg 1 GF var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 HF FEATURE_FAMILY_STRATIX10 $end
$var reg 160 IF device [160:1] $end
$var reg 1 JF var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 KF FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 LF device [160:1] $end
$var reg 1 MF var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 NF FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 OF device [160:1] $end
$var reg 1 PF var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 QF FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 RF device [160:1] $end
$var reg 1 SF var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 TF FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 UF device [160:1] $end
$var reg 1 VF var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 WF FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 XF device [160:1] $end
$var reg 1 YF var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 ZF FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 [F device [160:1] $end
$var reg 1 \F var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 ]F FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 ^F device [160:1] $end
$var reg 1 _F var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 `F FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 aF device [160:1] $end
$var reg 1 bF var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 cF FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 dF device [160:1] $end
$var reg 1 eF var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 fF FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 gF device [160:1] $end
$var reg 1 hF var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 iF FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 jF device [160:1] $end
$var reg 1 kF var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 lF IS_VALID_FAMILY $end
$var reg 160 mF device [160:1] $end
$var reg 1 nF is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 oF tolower [8:1] $end
$var reg 8 pF given_character [8:1] $end
$var reg 8 qF conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 rF ecc_parity [7:0] $end
$var reg 8 sF i_eccencparity [7:0] $end
$var integer 32 tF pointer $end
$var integer 32 uF pointer_max $end
$var integer 32 vF pointer_min $end
$var integer 32 wF flag_err $end
$var integer 32 xF flag $end
$var integer 32 yF flag_double $end
$var integer 32 zF flag_triple $end
$var integer 32 {F flag_single $end
$var integer 32 |F flag_no_err $end
$var integer 32 }F flag_uncorr $end
$var integer 32 ~F n $end
$var integer 32 !G err $end
$var integer 32 "G found $end
$var integer 32 #G found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 $G in_file [2048:1] $end
$var integer 32 %G width $end
$var reg 2048 &G out_file [2048:1] $end
$var reg 2048 'G buffer [2048:1] $end
$var reg 1025 (G memory_data1 [1024:0] $end
$var reg 1025 )G memory_data2 [1024:0] $end
$var reg 8 *G c [8:1] $end
$var reg 4 +G hex [3:0] $end
$var reg 4 ,G tmp_char [3:0] $end
$var reg 24 -G address_radix [24:1] $end
$var reg 24 .G data_radix [24:1] $end
$var reg 1 /G get_width $end
$var reg 1 0G get_depth $end
$var reg 1 1G get_data_radix $end
$var reg 1 2G get_address_radix $end
$var reg 1 3G width_found $end
$var reg 1 4G depth_found $end
$var reg 1 5G data_radix_found $end
$var reg 1 6G address_radix_found $end
$var reg 1 7G get_address_data_pairs $end
$var reg 1 8G get_address $end
$var reg 1 9G get_data $end
$var reg 1 :G display_address $end
$var reg 1 ;G invalid_address $end
$var reg 1 <G get_start_address $end
$var reg 1 =G get_end_address $end
$var reg 1 >G done $end
$var reg 1 ?G error_status $end
$var reg 1 @G first_rec $end
$var reg 1 AG last_rec $end
$var integer 32 BG memory_width $end
$var integer 32 CG memory_depth $end
$var integer 32 DG value $end
$var integer 32 EG ifp $end
$var integer 32 FG ofp $end
$var integer 32 GG r $end
$var integer 32 HG r2 $end
$var integer 32 IG i $end
$var integer 32 JG j $end
$var integer 32 KG k $end
$var integer 32 LG m $end
$var integer 32 MG n $end
$var integer 32 NG negative $end
$var integer 32 OG off_addr $end
$var integer 32 PG nn $end
$var integer 32 QG address $end
$var integer 32 RG tt $end
$var integer 32 SG cc $end
$var integer 32 TG aah $end
$var integer 32 UG aal $end
$var integer 32 VG dd $end
$var integer 32 WG sum $end
$var integer 32 XG start_address $end
$var integer 32 YG end_address $end
$var integer 32 ZG line_no $end
$var integer 32 [G character_count $end
$var integer 32 \G comment_with_percent_found $end
$var integer 32 ]G comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 ^G in_file [2048:1] $end
$var integer 32 _G width $end
$var reg 2048 `G out_file [2048:1] $end
$var reg 8 aG c [8:1] $end
$var reg 4 bG hex [3:0] $end
$var reg 4 cG tmp_char [3:0] $end
$var reg 1 dG done $end
$var reg 1 eG error_status $end
$var reg 1 fG first_rec $end
$var reg 1 gG last_rec $end
$var reg 1 hG first_normal_record $end
$var reg 1 iG is_word_address_format $end
$var integer 32 jG ifp $end
$var integer 32 kG ofp $end
$var integer 32 lG r $end
$var integer 32 mG r2 $end
$var integer 32 nG i $end
$var integer 32 oG j $end
$var integer 32 pG k $end
$var integer 32 qG m $end
$var integer 32 rG n $end
$var integer 32 sG off_addr $end
$var integer 32 tG nn $end
$var integer 32 uG aaaa $end
$var integer 32 vG aaaa_pre $end
$var integer 32 wG tt $end
$var integer 32 xG cc $end
$var integer 32 yG aah $end
$var integer 32 zG aal $end
$var integer 32 {G dd $end
$var integer 32 |G sum $end
$var integer 32 }G line_no $end
$var integer 32 ~G divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 !H in_file [2048:1] $end
$var integer 32 "H width $end
$var reg 2048 #H out_file [2048:1] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module hex0 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 $H B [11] $end
$var wire 1 %H B [10] $end
$var wire 1 &H B [9] $end
$var wire 1 'H B [8] $end
$var wire 1 (H B [7] $end
$var wire 1 )H B [6] $end
$var wire 1 *H B [5] $end
$var wire 1 +H B [4] $end
$var wire 1 ,H B [3] $end
$var wire 1 -H B [2] $end
$var wire 1 .H B [1] $end
$var wire 1 /H B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 0H outs [31:0] $end
$upscope $end

$scope module hex1 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 1H B [11] $end
$var wire 1 2H B [10] $end
$var wire 1 3H B [9] $end
$var wire 1 4H B [8] $end
$var wire 1 5H B [7] $end
$var wire 1 6H B [6] $end
$var wire 1 7H B [5] $end
$var wire 1 8H B [4] $end
$var wire 1 9H B [3] $end
$var wire 1 :H B [2] $end
$var wire 1 ;H B [1] $end
$var wire 1 <H B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 =H outs [31:0] $end
$upscope $end

$scope module hex2 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 >H B [11] $end
$var wire 1 ?H B [10] $end
$var wire 1 @H B [9] $end
$var wire 1 AH B [8] $end
$var wire 1 BH B [7] $end
$var wire 1 CH B [6] $end
$var wire 1 DH B [5] $end
$var wire 1 EH B [4] $end
$var wire 1 FH B [3] $end
$var wire 1 GH B [2] $end
$var wire 1 HH B [1] $end
$var wire 1 IH B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 JH outs [31:0] $end
$upscope $end

$scope module hex3 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 KH B [11] $end
$var wire 1 LH B [10] $end
$var wire 1 MH B [9] $end
$var wire 1 NH B [8] $end
$var wire 1 OH B [7] $end
$var wire 1 PH B [6] $end
$var wire 1 QH B [5] $end
$var wire 1 RH B [4] $end
$var wire 1 SH B [3] $end
$var wire 1 TH B [2] $end
$var wire 1 UH B [1] $end
$var wire 1 VH B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 WH outs [31:0] $end
$upscope $end

$scope module hex4 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 XH B [11] $end
$var wire 1 YH B [10] $end
$var wire 1 ZH B [9] $end
$var wire 1 [H B [8] $end
$var wire 1 \H B [7] $end
$var wire 1 ]H B [6] $end
$var wire 1 ^H B [5] $end
$var wire 1 _H B [4] $end
$var wire 1 `H B [3] $end
$var wire 1 aH B [2] $end
$var wire 1 bH B [1] $end
$var wire 1 cH B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 dH outs [31:0] $end
$upscope $end

$scope module hex5 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 eH B [11] $end
$var wire 1 fH B [10] $end
$var wire 1 gH B [9] $end
$var wire 1 hH B [8] $end
$var wire 1 iH B [7] $end
$var wire 1 jH B [6] $end
$var wire 1 kH B [5] $end
$var wire 1 lH B [4] $end
$var wire 1 mH B [3] $end
$var wire 1 nH B [2] $end
$var wire 1 oH B [1] $end
$var wire 1 pH B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 qH outs [31:0] $end
$upscope $end

$scope module hex6 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 rH B [11] $end
$var wire 1 sH B [10] $end
$var wire 1 tH B [9] $end
$var wire 1 uH B [8] $end
$var wire 1 vH B [7] $end
$var wire 1 wH B [6] $end
$var wire 1 xH B [5] $end
$var wire 1 yH B [4] $end
$var wire 1 zH B [3] $end
$var wire 1 {H B [2] $end
$var wire 1 |H B [1] $end
$var wire 1 }H B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 ~H outs [31:0] $end
$upscope $end

$scope module hex7 $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 !I B [11] $end
$var wire 1 "I B [10] $end
$var wire 1 #I B [9] $end
$var wire 1 $I B [8] $end
$var wire 1 %I B [7] $end
$var wire 1 &I B [6] $end
$var wire 1 'I B [5] $end
$var wire 1 (I B [4] $end
$var wire 1 )I B [3] $end
$var wire 1 *I B [2] $end
$var wire 1 +I B [1] $end
$var wire 1 ,I B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 -I outs [31:0] $end
$upscope $end

$scope module ledr $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 .I B [11] $end
$var wire 1 /I B [10] $end
$var wire 1 0I B [9] $end
$var wire 1 1I B [8] $end
$var wire 1 2I B [7] $end
$var wire 1 3I B [6] $end
$var wire 1 4I B [5] $end
$var wire 1 5I B [4] $end
$var wire 1 6I B [3] $end
$var wire 1 7I B [2] $end
$var wire 1 8I B [1] $end
$var wire 1 9I B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 :I outs [31:0] $end
$upscope $end

$scope module ledg $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 ;I B [11] $end
$var wire 1 <I B [10] $end
$var wire 1 =I B [9] $end
$var wire 1 >I B [8] $end
$var wire 1 ?I B [7] $end
$var wire 1 @I B [6] $end
$var wire 1 AI B [5] $end
$var wire 1 BI B [4] $end
$var wire 1 CI B [3] $end
$var wire 1 DI B [2] $end
$var wire 1 EI B [1] $end
$var wire 1 FI B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 GI outs [31:0] $end
$upscope $end

$scope module lcd $end
$var wire 1 0 clk $end
$var wire 1 1 rstn $end
$var wire 1 v/ en $end
$var wire 1 w/ A [11] $end
$var wire 1 x/ A [10] $end
$var wire 1 y/ A [9] $end
$var wire 1 z/ A [8] $end
$var wire 1 {/ A [7] $end
$var wire 1 |/ A [6] $end
$var wire 1 }/ A [5] $end
$var wire 1 ~/ A [4] $end
$var wire 1 !0 A [3] $end
$var wire 1 "0 A [2] $end
$var wire 1 #0 A [1] $end
$var wire 1 $0 A [0] $end
$var wire 1 HI B [11] $end
$var wire 1 II B [10] $end
$var wire 1 JI B [9] $end
$var wire 1 KI B [8] $end
$var wire 1 LI B [7] $end
$var wire 1 MI B [6] $end
$var wire 1 NI B [5] $end
$var wire 1 OI B [4] $end
$var wire 1 PI B [3] $end
$var wire 1 QI B [2] $end
$var wire 1 RI B [1] $end
$var wire 1 SI B [0] $end
$var wire 1 %0 byte_en [3] $end
$var wire 1 &0 byte_en [2] $end
$var wire 1 '0 byte_en [1] $end
$var wire 1 (0 byte_en [0] $end
$var wire 1 )0 ins [31] $end
$var wire 1 *0 ins [30] $end
$var wire 1 +0 ins [29] $end
$var wire 1 ,0 ins [28] $end
$var wire 1 -0 ins [27] $end
$var wire 1 .0 ins [26] $end
$var wire 1 /0 ins [25] $end
$var wire 1 00 ins [24] $end
$var wire 1 10 ins [23] $end
$var wire 1 20 ins [22] $end
$var wire 1 30 ins [21] $end
$var wire 1 40 ins [20] $end
$var wire 1 50 ins [19] $end
$var wire 1 60 ins [18] $end
$var wire 1 70 ins [17] $end
$var wire 1 80 ins [16] $end
$var wire 1 90 ins [15] $end
$var wire 1 :0 ins [14] $end
$var wire 1 ;0 ins [13] $end
$var wire 1 <0 ins [12] $end
$var wire 1 =0 ins [11] $end
$var wire 1 >0 ins [10] $end
$var wire 1 ?0 ins [9] $end
$var wire 1 @0 ins [8] $end
$var wire 1 A0 ins [7] $end
$var wire 1 B0 ins [6] $end
$var wire 1 C0 ins [5] $end
$var wire 1 D0 ins [4] $end
$var wire 1 E0 ins [3] $end
$var wire 1 F0 ins [2] $end
$var wire 1 G0 ins [1] $end
$var wire 1 H0 ins [0] $end
$var reg 32 TI outs [31:0] $end
$upscope $end

$scope module loader $end
$var wire 1 w/ main_addr [11] $end
$var wire 1 x/ main_addr [10] $end
$var wire 1 y/ main_addr [9] $end
$var wire 1 z/ main_addr [8] $end
$var wire 1 {/ main_addr [7] $end
$var wire 1 |/ main_addr [6] $end
$var wire 1 }/ main_addr [5] $end
$var wire 1 ~/ main_addr [4] $end
$var wire 1 !0 main_addr [3] $end
$var wire 1 "0 main_addr [2] $end
$var wire 1 #0 main_addr [1] $end
$var wire 1 $0 main_addr [0] $end
$var wire 1 UI mem_data [31] $end
$var wire 1 VI mem_data [30] $end
$var wire 1 WI mem_data [29] $end
$var wire 1 XI mem_data [28] $end
$var wire 1 YI mem_data [27] $end
$var wire 1 ZI mem_data [26] $end
$var wire 1 [I mem_data [25] $end
$var wire 1 \I mem_data [24] $end
$var wire 1 ]I mem_data [23] $end
$var wire 1 ^I mem_data [22] $end
$var wire 1 _I mem_data [21] $end
$var wire 1 `I mem_data [20] $end
$var wire 1 aI mem_data [19] $end
$var wire 1 bI mem_data [18] $end
$var wire 1 cI mem_data [17] $end
$var wire 1 dI mem_data [16] $end
$var wire 1 eI mem_data [15] $end
$var wire 1 fI mem_data [14] $end
$var wire 1 gI mem_data [13] $end
$var wire 1 hI mem_data [12] $end
$var wire 1 iI mem_data [11] $end
$var wire 1 jI mem_data [10] $end
$var wire 1 kI mem_data [9] $end
$var wire 1 lI mem_data [8] $end
$var wire 1 mI mem_data [7] $end
$var wire 1 nI mem_data [6] $end
$var wire 1 oI mem_data [5] $end
$var wire 1 pI mem_data [4] $end
$var wire 1 qI mem_data [3] $end
$var wire 1 rI mem_data [2] $end
$var wire 1 sI mem_data [1] $end
$var wire 1 tI mem_data [0] $end
$var wire 1 uI out_data [31] $end
$var wire 1 vI out_data [30] $end
$var wire 1 wI out_data [29] $end
$var wire 1 xI out_data [28] $end
$var wire 1 yI out_data [27] $end
$var wire 1 zI out_data [26] $end
$var wire 1 {I out_data [25] $end
$var wire 1 |I out_data [24] $end
$var wire 1 }I out_data [23] $end
$var wire 1 ~I out_data [22] $end
$var wire 1 !J out_data [21] $end
$var wire 1 "J out_data [20] $end
$var wire 1 #J out_data [19] $end
$var wire 1 $J out_data [18] $end
$var wire 1 %J out_data [17] $end
$var wire 1 &J out_data [16] $end
$var wire 1 'J out_data [15] $end
$var wire 1 (J out_data [14] $end
$var wire 1 )J out_data [13] $end
$var wire 1 *J out_data [12] $end
$var wire 1 +J out_data [11] $end
$var wire 1 ,J out_data [10] $end
$var wire 1 -J out_data [9] $end
$var wire 1 .J out_data [8] $end
$var wire 1 /J out_data [7] $end
$var wire 1 0J out_data [6] $end
$var wire 1 1J out_data [5] $end
$var wire 1 2J out_data [4] $end
$var wire 1 3J out_data [3] $end
$var wire 1 4J out_data [2] $end
$var wire 1 5J out_data [1] $end
$var wire 1 6J out_data [0] $end
$var wire 1 7J in_data [31] $end
$var wire 1 8J in_data [30] $end
$var wire 1 9J in_data [29] $end
$var wire 1 :J in_data [28] $end
$var wire 1 ;J in_data [27] $end
$var wire 1 <J in_data [26] $end
$var wire 1 =J in_data [25] $end
$var wire 1 >J in_data [24] $end
$var wire 1 ?J in_data [23] $end
$var wire 1 @J in_data [22] $end
$var wire 1 AJ in_data [21] $end
$var wire 1 BJ in_data [20] $end
$var wire 1 CJ in_data [19] $end
$var wire 1 DJ in_data [18] $end
$var wire 1 EJ in_data [17] $end
$var wire 1 FJ in_data [16] $end
$var wire 1 GJ in_data [15] $end
$var wire 1 HJ in_data [14] $end
$var wire 1 IJ in_data [13] $end
$var wire 1 JJ in_data [12] $end
$var wire 1 KJ in_data [11] $end
$var wire 1 LJ in_data [10] $end
$var wire 1 MJ in_data [9] $end
$var wire 1 NJ in_data [8] $end
$var wire 1 OJ in_data [7] $end
$var wire 1 PJ in_data [6] $end
$var wire 1 QJ in_data [5] $end
$var wire 1 RJ in_data [4] $end
$var wire 1 SJ in_data [3] $end
$var wire 1 TJ in_data [2] $end
$var wire 1 UJ in_data [1] $end
$var wire 1 VJ in_data [0] $end
$var wire 1 I0 data_out [31] $end
$var wire 1 J0 data_out [30] $end
$var wire 1 K0 data_out [29] $end
$var wire 1 L0 data_out [28] $end
$var wire 1 M0 data_out [27] $end
$var wire 1 N0 data_out [26] $end
$var wire 1 O0 data_out [25] $end
$var wire 1 P0 data_out [24] $end
$var wire 1 Q0 data_out [23] $end
$var wire 1 R0 data_out [22] $end
$var wire 1 S0 data_out [21] $end
$var wire 1 T0 data_out [20] $end
$var wire 1 U0 data_out [19] $end
$var wire 1 V0 data_out [18] $end
$var wire 1 W0 data_out [17] $end
$var wire 1 X0 data_out [16] $end
$var wire 1 Y0 data_out [15] $end
$var wire 1 Z0 data_out [14] $end
$var wire 1 [0 data_out [13] $end
$var wire 1 \0 data_out [12] $end
$var wire 1 ]0 data_out [11] $end
$var wire 1 ^0 data_out [10] $end
$var wire 1 _0 data_out [9] $end
$var wire 1 `0 data_out [8] $end
$var wire 1 a0 data_out [7] $end
$var wire 1 b0 data_out [6] $end
$var wire 1 c0 data_out [5] $end
$var wire 1 d0 data_out [4] $end
$var wire 1 e0 data_out [3] $end
$var wire 1 f0 data_out [2] $end
$var wire 1 g0 data_out [1] $end
$var wire 1 h0 data_out [0] $end
$upscope $end
$upscope $end

$scope module lsm $end
$var wire 1 WJ LW [31] $end
$var wire 1 XJ LW [30] $end
$var wire 1 YJ LW [29] $end
$var wire 1 ZJ LW [28] $end
$var wire 1 [J LW [27] $end
$var wire 1 \J LW [26] $end
$var wire 1 ]J LW [25] $end
$var wire 1 ^J LW [24] $end
$var wire 1 _J LW [23] $end
$var wire 1 `J LW [22] $end
$var wire 1 aJ LW [21] $end
$var wire 1 bJ LW [20] $end
$var wire 1 cJ LW [19] $end
$var wire 1 dJ LW [18] $end
$var wire 1 eJ LW [17] $end
$var wire 1 fJ LW [16] $end
$var wire 1 gJ LW [15] $end
$var wire 1 hJ LW [14] $end
$var wire 1 iJ LW [13] $end
$var wire 1 jJ LW [12] $end
$var wire 1 kJ LW [11] $end
$var wire 1 lJ LW [10] $end
$var wire 1 mJ LW [9] $end
$var wire 1 nJ LW [8] $end
$var wire 1 oJ LW [7] $end
$var wire 1 pJ LW [6] $end
$var wire 1 qJ LW [5] $end
$var wire 1 rJ LW [4] $end
$var wire 1 sJ LW [3] $end
$var wire 1 tJ LW [2] $end
$var wire 1 uJ LW [1] $end
$var wire 1 vJ LW [0] $end
$var wire 1 wJ LB [7] $end
$var wire 1 xJ LB [6] $end
$var wire 1 yJ LB [5] $end
$var wire 1 zJ LB [4] $end
$var wire 1 {J LB [3] $end
$var wire 1 |J LB [2] $end
$var wire 1 }J LB [1] $end
$var wire 1 ~J LB [0] $end
$var wire 1 !K LBU [7] $end
$var wire 1 "K LBU [6] $end
$var wire 1 #K LBU [5] $end
$var wire 1 $K LBU [4] $end
$var wire 1 %K LBU [3] $end
$var wire 1 &K LBU [2] $end
$var wire 1 'K LBU [1] $end
$var wire 1 (K LBU [0] $end
$var wire 1 )K LH [15] $end
$var wire 1 *K LH [14] $end
$var wire 1 +K LH [13] $end
$var wire 1 ,K LH [12] $end
$var wire 1 -K LH [11] $end
$var wire 1 .K LH [10] $end
$var wire 1 /K LH [9] $end
$var wire 1 0K LH [8] $end
$var wire 1 1K LH [7] $end
$var wire 1 2K LH [6] $end
$var wire 1 3K LH [5] $end
$var wire 1 4K LH [4] $end
$var wire 1 5K LH [3] $end
$var wire 1 6K LH [2] $end
$var wire 1 7K LH [1] $end
$var wire 1 8K LH [0] $end
$var wire 1 9K LHU [15] $end
$var wire 1 :K LHU [14] $end
$var wire 1 ;K LHU [13] $end
$var wire 1 <K LHU [12] $end
$var wire 1 =K LHU [11] $end
$var wire 1 >K LHU [10] $end
$var wire 1 ?K LHU [9] $end
$var wire 1 @K LHU [8] $end
$var wire 1 AK LHU [7] $end
$var wire 1 BK LHU [6] $end
$var wire 1 CK LHU [5] $end
$var wire 1 DK LHU [4] $end
$var wire 1 EK LHU [3] $end
$var wire 1 FK LHU [2] $end
$var wire 1 GK LHU [1] $end
$var wire 1 HK LHU [0] $end
$var wire 1 IK ld_sel [2] $end
$var wire 1 JK ld_sel [1] $end
$var wire 1 KK ld_sel [0] $end
$var wire 1 LK ld_data [31] $end
$var wire 1 MK ld_data [30] $end
$var wire 1 NK ld_data [29] $end
$var wire 1 OK ld_data [28] $end
$var wire 1 PK ld_data [27] $end
$var wire 1 QK ld_data [26] $end
$var wire 1 RK ld_data [25] $end
$var wire 1 SK ld_data [24] $end
$var wire 1 TK ld_data [23] $end
$var wire 1 UK ld_data [22] $end
$var wire 1 VK ld_data [21] $end
$var wire 1 WK ld_data [20] $end
$var wire 1 XK ld_data [19] $end
$var wire 1 YK ld_data [18] $end
$var wire 1 ZK ld_data [17] $end
$var wire 1 [K ld_data [16] $end
$var wire 1 \K ld_data [15] $end
$var wire 1 ]K ld_data [14] $end
$var wire 1 ^K ld_data [13] $end
$var wire 1 _K ld_data [12] $end
$var wire 1 `K ld_data [11] $end
$var wire 1 aK ld_data [10] $end
$var wire 1 bK ld_data [9] $end
$var wire 1 cK ld_data [8] $end
$var wire 1 dK ld_data [7] $end
$var wire 1 eK ld_data [6] $end
$var wire 1 fK ld_data [5] $end
$var wire 1 gK ld_data [4] $end
$var wire 1 hK ld_data [3] $end
$var wire 1 iK ld_data [2] $end
$var wire 1 jK ld_data [1] $end
$var wire 1 kK ld_data [0] $end
$upscope $end

$scope module wbm $end
$var wire 1 lK pc_four [12] $end
$var wire 1 mK pc_four [11] $end
$var wire 1 nK pc_four [10] $end
$var wire 1 oK pc_four [9] $end
$var wire 1 pK pc_four [8] $end
$var wire 1 qK pc_four [7] $end
$var wire 1 rK pc_four [6] $end
$var wire 1 sK pc_four [5] $end
$var wire 1 tK pc_four [4] $end
$var wire 1 uK pc_four [3] $end
$var wire 1 vK pc_four [2] $end
$var wire 1 wK pc_four [1] $end
$var wire 1 xK pc_four [0] $end
$var wire 1 yK alu_data [31] $end
$var wire 1 zK alu_data [30] $end
$var wire 1 {K alu_data [29] $end
$var wire 1 |K alu_data [28] $end
$var wire 1 }K alu_data [27] $end
$var wire 1 ~K alu_data [26] $end
$var wire 1 !L alu_data [25] $end
$var wire 1 "L alu_data [24] $end
$var wire 1 #L alu_data [23] $end
$var wire 1 $L alu_data [22] $end
$var wire 1 %L alu_data [21] $end
$var wire 1 &L alu_data [20] $end
$var wire 1 'L alu_data [19] $end
$var wire 1 (L alu_data [18] $end
$var wire 1 )L alu_data [17] $end
$var wire 1 *L alu_data [16] $end
$var wire 1 +L alu_data [15] $end
$var wire 1 ,L alu_data [14] $end
$var wire 1 -L alu_data [13] $end
$var wire 1 .L alu_data [12] $end
$var wire 1 /L alu_data [11] $end
$var wire 1 0L alu_data [10] $end
$var wire 1 1L alu_data [9] $end
$var wire 1 2L alu_data [8] $end
$var wire 1 3L alu_data [7] $end
$var wire 1 4L alu_data [6] $end
$var wire 1 5L alu_data [5] $end
$var wire 1 6L alu_data [4] $end
$var wire 1 7L alu_data [3] $end
$var wire 1 8L alu_data [2] $end
$var wire 1 9L alu_data [1] $end
$var wire 1 :L alu_data [0] $end
$var wire 1 ;L ld_data [31] $end
$var wire 1 <L ld_data [30] $end
$var wire 1 =L ld_data [29] $end
$var wire 1 >L ld_data [28] $end
$var wire 1 ?L ld_data [27] $end
$var wire 1 @L ld_data [26] $end
$var wire 1 AL ld_data [25] $end
$var wire 1 BL ld_data [24] $end
$var wire 1 CL ld_data [23] $end
$var wire 1 DL ld_data [22] $end
$var wire 1 EL ld_data [21] $end
$var wire 1 FL ld_data [20] $end
$var wire 1 GL ld_data [19] $end
$var wire 1 HL ld_data [18] $end
$var wire 1 IL ld_data [17] $end
$var wire 1 JL ld_data [16] $end
$var wire 1 KL ld_data [15] $end
$var wire 1 LL ld_data [14] $end
$var wire 1 ML ld_data [13] $end
$var wire 1 NL ld_data [12] $end
$var wire 1 OL ld_data [11] $end
$var wire 1 PL ld_data [10] $end
$var wire 1 QL ld_data [9] $end
$var wire 1 RL ld_data [8] $end
$var wire 1 SL ld_data [7] $end
$var wire 1 TL ld_data [6] $end
$var wire 1 UL ld_data [5] $end
$var wire 1 VL ld_data [4] $end
$var wire 1 WL ld_data [3] $end
$var wire 1 XL ld_data [2] $end
$var wire 1 YL ld_data [1] $end
$var wire 1 ZL ld_data [0] $end
$var wire 1 [L wb_sel [1] $end
$var wire 1 \L wb_sel [0] $end
$var wire 1 ]L wb_data [31] $end
$var wire 1 ^L wb_data [30] $end
$var wire 1 _L wb_data [29] $end
$var wire 1 `L wb_data [28] $end
$var wire 1 aL wb_data [27] $end
$var wire 1 bL wb_data [26] $end
$var wire 1 cL wb_data [25] $end
$var wire 1 dL wb_data [24] $end
$var wire 1 eL wb_data [23] $end
$var wire 1 fL wb_data [22] $end
$var wire 1 gL wb_data [21] $end
$var wire 1 hL wb_data [20] $end
$var wire 1 iL wb_data [19] $end
$var wire 1 jL wb_data [18] $end
$var wire 1 kL wb_data [17] $end
$var wire 1 lL wb_data [16] $end
$var wire 1 mL wb_data [15] $end
$var wire 1 nL wb_data [14] $end
$var wire 1 oL wb_data [13] $end
$var wire 1 pL wb_data [12] $end
$var wire 1 qL wb_data [11] $end
$var wire 1 rL wb_data [10] $end
$var wire 1 sL wb_data [9] $end
$var wire 1 tL wb_data [8] $end
$var wire 1 uL wb_data [7] $end
$var wire 1 vL wb_data [6] $end
$var wire 1 wL wb_data [5] $end
$var wire 1 xL wb_data [4] $end
$var wire 1 yL wb_data [3] $end
$var wire 1 zL wb_data [2] $end
$var wire 1 {L wb_data [1] $end
$var wire 1 |L wb_data [0] $end
$upscope $end
$upscope $end
$upscope $end

$scope begin std $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
b11 #
b0 $
b0 %
b0 &
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
b0 -
b0 .
b0 /
b10000000000000000000000000000000 G$
b10000000000000000000000010110111 H$
b10000000000000000000000000000000 I$
b0 J$
b0 K$
b0 L$
b10000000000000000000000000000000 M$
b0 N$
b0 O$
b10000000000000000000000000000000 P$
b100 Q$
b100 R$
b0 S$
b0 T$
b0 U$
b1 V$
b0 W$
b0 X$
b0 Y$
b0 Z$
0[$
1\$
0]$
0^$
1_$
0`$
1a$
0b$
0E%
1F%
0G%
0H%
1I%
0J%
b0 K%
b0 L%
b0 M%
b0 N%
b110111 O%
b1000000 P%
b0 Q%
b0 C&
b0 4'
b0 5'
b1 6'
b0 7'
b0 8'
b1 9'
b110111 :'
b10000000000000000000000000000000 c'
b10000000000000000000 d'
b100000000000000000000 e'
b100000000000 f'
b100000000001 g'
b1100000000000 h'
b0 i'
b110111 j'
b0 k'
b10000000000000000000000000000000 m-
b0 U/
0i0
0j0
0k0
b0 l0
b0 m0
b0 n0
b0 o0
b0 p0
b0 q0
b0 r0
bx 54
bx 64
bx 74
bx 84
bx 94
b0 :4
bx ;4
bx <4
x=4
b0 >4
b0 ?4
b0 @4
b0 A4
b0 B4
b0 C4
bx D4
b0 E4
b0 F4
b0 G4
b0 H4
bx I4
bx J4
b0 K4
bx L4
bx M4
bx N4
b0 O4
b0 P4
b0 Q4
b0 R4
bx S4
bx T4
0U4
0V4
1W4
0X4
1Y4
0Z4
0[4
0\4
1]4
0^4
bx _4
x`4
0a4
0b4
b0 c4
bx d4
bx e4
bx f4
bx g4
bx h4
bx i4
1j4
1k4
b0 l4
b0 m4
xn4
0o4
0p4
0q4
0r4
0s4
0t4
0u4
0v4
0w4
0x4
0y4
b10001000100111101001110010101000101111101000011010000010101001001000101 z4
b1000001010101010101010001001111 {4
1!5
1"5
1#5
1$5
1%5
xc5
bx d5
xe5
xf5
bx g5
xh5
xi5
bx j5
xk5
xl5
bx m5
xn5
xo5
bx p5
xq5
xr5
bx s5
xt5
xu5
bx v5
xw5
xx5
bx y5
xz5
x{5
bx |5
x}5
x~5
bx !6
x"6
x#6
bx $6
x%6
x&6
bx '6
x(6
x)6
bx *6
x+6
x,6
bx -6
x.6
x/6
bx 06
x16
x26
bx 36
x46
x56
bx 66
x76
x86
bx 96
x:6
x;6
bx <6
x=6
x>6
bx ?6
x@6
xA6
bx B6
xC6
xD6
bx E6
xF6
xG6
bx H6
xI6
xJ6
bx K6
xL6
xM6
bx N6
xO6
xP6
bx Q6
xR6
xS6
bx T6
xU6
xV6
bx W6
xX6
xY6
bx Z6
x[6
x\6
bx ]6
x^6
x_6
bx `6
xa6
xb6
bx c6
xd6
xe6
bx f6
xg6
xh6
bx i6
xj6
xk6
bx l6
xm6
xn6
bx o6
xp6
xq6
bx r6
xs6
xt6
bx u6
xv6
xw6
bx x6
xy6
xz6
bx {6
x|6
x}6
bx ~6
x!7
x"7
bx #7
x$7
x%7
bx &7
x'7
x(7
bx )7
x*7
x+7
bx ,7
x-7
x.7
bx /7
x07
x17
bx 27
x37
x47
bx 57
x67
x77
bx 87
x97
x:7
bx ;7
x<7
x=7
bx >7
x?7
x@7
bx A7
xB7
xC7
bx D7
xE7
xF7
bx G7
xH7
xI7
bx J7
xK7
xL7
bx M7
xN7
xO7
bx P7
xQ7
xR7
bx S7
xT7
xU7
bx V7
xW7
xX7
bx Y7
xZ7
x[7
bx \7
x]7
x^7
bx _7
x`7
xa7
bx b7
xc7
xd7
bx e7
xf7
xg7
bx h7
xi7
xj7
bx k7
xl7
bx m7
bx n7
bx o7
bx p7
bx q7
bx "8
bx $8
bx %8
bx &8
bx '8
bx (8
bx )8
bx *8
bx +8
bx ,8
x-8
x.8
x/8
x08
x18
x28
x38
x48
x58
x68
x78
x88
x98
x:8
x;8
x<8
x=8
x>8
x?8
bx \8
bx ^8
bx _8
bx `8
bx a8
xb8
xc8
xd8
xe8
xf8
xg8
bx }8
bx !9
bx S;
bx T;
bx U;
bx V;
bx W;
b0 X;
bx Y;
bx Z;
x[;
b0 \;
b0 ];
b0 ^;
b0 _;
b0 `;
b0 a;
bx b;
b0 c;
b0 d;
b0 e;
b0 f;
bx g;
bx h;
b0 i;
bx j;
bx k;
bx l;
b0 m;
b0 n;
b0 o;
b0 p;
bx q;
bx r;
0s;
0t;
1u;
0v;
1w;
0x;
0y;
0z;
1{;
0|;
bx };
x~;
0!<
0"<
b0 #<
bx $<
bx %<
bx &<
bx '<
bx (<
bx )<
1*<
1+<
b0 ,<
b0 -<
x.<
0/<
00<
01<
02<
03<
04<
05<
06<
07<
08<
09<
b10001000100111101001110010101000101111101000011010000010101001001000101 :<
b1000001010101010101010001001111 ;<
1?<
1@<
1A<
1B<
1C<
x#=
bx $=
x%=
x&=
bx '=
x(=
x)=
bx *=
x+=
x,=
bx -=
x.=
x/=
bx 0=
x1=
x2=
bx 3=
x4=
x5=
bx 6=
x7=
x8=
bx 9=
x:=
x;=
bx <=
x==
x>=
bx ?=
x@=
xA=
bx B=
xC=
xD=
bx E=
xF=
xG=
bx H=
xI=
xJ=
bx K=
xL=
xM=
bx N=
xO=
xP=
bx Q=
xR=
xS=
bx T=
xU=
xV=
bx W=
xX=
xY=
bx Z=
x[=
x\=
bx ]=
x^=
x_=
bx `=
xa=
xb=
bx c=
xd=
xe=
bx f=
xg=
xh=
bx i=
xj=
xk=
bx l=
xm=
xn=
bx o=
xp=
xq=
bx r=
xs=
xt=
bx u=
xv=
xw=
bx x=
xy=
xz=
bx {=
x|=
x}=
bx ~=
x!>
x">
bx #>
x$>
x%>
bx &>
x'>
x(>
bx )>
x*>
x+>
bx ,>
x->
x.>
bx />
x0>
x1>
bx 2>
x3>
x4>
bx 5>
x6>
x7>
bx 8>
x9>
x:>
bx ;>
x<>
x=>
bx >>
x?>
x@>
bx A>
xB>
xC>
bx D>
xE>
xF>
bx G>
xH>
xI>
bx J>
xK>
xL>
bx M>
xN>
xO>
bx P>
xQ>
xR>
bx S>
xT>
xU>
bx V>
xW>
xX>
bx Y>
xZ>
x[>
bx \>
x]>
x^>
bx _>
x`>
xa>
bx b>
xc>
xd>
bx e>
xf>
xg>
bx h>
xi>
xj>
bx k>
xl>
xm>
bx n>
xo>
xp>
bx q>
xr>
xs>
bx t>
xu>
xv>
bx w>
xx>
xy>
bx z>
x{>
x|>
bx }>
x~>
x!?
bx "?
x#?
x$?
bx %?
x&?
x'?
bx (?
x)?
x*?
bx +?
x,?
bx -?
bx .?
bx /?
bx 0?
bx 1?
bx @?
bx B?
bx C?
bx D?
bx E?
bx F?
bx G?
bx H?
bx I?
bx J?
xK?
xL?
xM?
xN?
xO?
xP?
xQ?
xR?
xS?
xT?
xU?
xV?
xW?
xX?
xY?
xZ?
x[?
x\?
x]?
bx z?
bx |?
bx }?
bx ~?
bx !@
x"@
x#@
x$@
x%@
x&@
x'@
bx =@
bx ?@
b0 7C
b0 8C
bx 9C
bx :C
bx ;C
b0 <C
bx =C
bx >C
x?C
b0 @C
b0 AC
b0 BC
b0 CC
b0 DC
b0 EC
bx FC
b11111111111111111111111111111111 GC
b0 HC
b0 IC
b0 JC
bx KC
bx LC
b0 MC
bx NC
bx OC
b0 PC
b0 QC
b0 RC
b0 SC
bx TC
bx UC
bx VC
1WC
0XC
1YC
0ZC
1[C
0\C
1]C
0^C
1_C
0`C
bx aC
xbC
0cC
0dC
b0 eC
bx fC
bx gC
bx hC
bx iC
bx jC
bx kC
1lC
1mC
b0 nC
b0 oC
xpC
0qC
0rC
0sC
0tC
0uC
0vC
0wC
0xC
0yC
0zC
0{C
b10001000100111101001110010101000101111101000011010000010101001001000101 |C
b1000001010101010101010001001111 }C
1#D
1$D
1%D
1&D
1'D
xeD
bx fD
xgD
xhD
bx iD
xjD
xkD
bx lD
xmD
xnD
bx oD
xpD
xqD
bx rD
xsD
xtD
bx uD
xvD
xwD
bx xD
xyD
xzD
bx {D
x|D
x}D
bx ~D
x!E
x"E
bx #E
x$E
x%E
bx &E
x'E
x(E
bx )E
x*E
x+E
bx ,E
x-E
x.E
bx /E
x0E
x1E
bx 2E
x3E
x4E
bx 5E
x6E
x7E
bx 8E
x9E
x:E
bx ;E
x<E
x=E
bx >E
x?E
x@E
bx AE
xBE
xCE
bx DE
xEE
xFE
bx GE
xHE
xIE
bx JE
xKE
xLE
bx ME
xNE
xOE
bx PE
xQE
xRE
bx SE
xTE
xUE
bx VE
xWE
xXE
bx YE
xZE
x[E
bx \E
x]E
x^E
bx _E
x`E
xaE
bx bE
xcE
xdE
bx eE
xfE
xgE
bx hE
xiE
xjE
bx kE
xlE
xmE
bx nE
xoE
xpE
bx qE
xrE
xsE
bx tE
xuE
xvE
bx wE
xxE
xyE
bx zE
x{E
x|E
bx }E
x~E
x!F
bx "F
x#F
x$F
bx %F
x&F
x'F
bx (F
x)F
x*F
bx +F
x,F
x-F
bx .F
x/F
x0F
bx 1F
x2F
x3F
bx 4F
x5F
x6F
bx 7F
x8F
x9F
bx :F
x;F
x<F
bx =F
x>F
x?F
bx @F
xAF
xBF
bx CF
xDF
xEF
bx FF
xGF
xHF
bx IF
xJF
xKF
bx LF
xMF
xNF
bx OF
xPF
xQF
bx RF
xSF
xTF
bx UF
xVF
xWF
bx XF
xYF
xZF
bx [F
x\F
x]F
bx ^F
x_F
x`F
bx aF
xbF
xcF
bx dF
xeF
xfF
bx gF
xhF
xiF
bx jF
xkF
xlF
bx mF
xnF
bx oF
bx pF
bx qF
bx rF
bx sF
bx $G
bx &G
bx 'G
bx (G
bx )G
bx *G
bx +G
bx ,G
bx -G
bx .G
x/G
x0G
x1G
x2G
x3G
x4G
x5G
x6G
x7G
x8G
x9G
x:G
x;G
x<G
x=G
x>G
x?G
x@G
xAG
bx ^G
bx `G
bx aG
bx bG
bx cG
xdG
xeG
xfG
xgG
xhG
xiG
bx !H
bx #H
b0 0H
b0 =H
b0 JH
b0 WH
b0 dH
b0 qH
b0 ~H
b0 -I
b0 :I
b0 GI
b0 TI
b110111 c$
b10111 d$
b1101111 e$
b1100111 f$
b1100011 g$
b11 h$
b100011 i$
b10 j$
b0 k$
b1 l$
b100 m$
b101 n$
b10011 o$
b110011 p$
b0 q$
b100000 r$
b0 s$
b1 t$
b100 u$
b101 v$
b110 w$
b111 x$
b0 y$
b1 z$
b10 {$
b11 |$
b100 }$
b101 ~$
b110 !%
b111 "%
b110111 q&
b110111 ;'
b10111 <'
b1101111 ='
b1100111 >'
b1100011 ?'
b11 @'
b100011 A'
b10011 B'
b0 },
b1 ~,
b10 !-
b11 "-
b100 #-
b101 $-
b110 %-
b111 &-
b1000 '-
b1001 (-
b100000 N2
b1011 O2
b100000000000 P2
b100 W2
b1 X2
b1 Y2
b0 Z2
b1 g2
b11 q2
b1000 t2
b0 y2
b0 !3
b100000 53
b1011 63
b100000000000 73
b100 >3
b1 ?3
b1 @3
b0 A3
b1 N3
b11 X3
b1000 [3
b0 `3
b0 g3
b0 h3
b0 i3
b0 j3
b0 k3
b0 l3
b1000 m3
b0 n3
b0 o3
b0 p3
b1 q3
b1 r3
b0 s3
b0 t3
b0 u3
b0 v3
b0 w3
b1 x3
b0 y3
b0 z3
b0 {3
b0 |3
b0 }3
b1 ~3
b0 !4
b0 "4
b0 #4
b0 $4
b0 %4
b0 &4
b0 '4
b1 (4
b1 )4
b1 *4
b0 +4
b0 ,4
b0 -4
b1 .4
b0 /4
b0 04
b1 14
b1 24
b1 34
b1 44
b100000 l9
b1000 m9
b100000000 n9
b100 u9
b1 v9
b1 w9
b0 x9
b1 ':
b11 1:
b1000 4:
b0 9:
b0 ?:
b100000 S:
b1000 T:
b100000000 U:
b100 \:
b1 ]:
b1 ^:
b0 _:
b1 l:
b11 v:
b1000 y:
b0 ~:
b0 ';
b0 (;
b0 );
b0 *;
b0 +;
b0 ,;
b1000 -;
b0 .;
b0 /;
b0 0;
b1 1;
b1 2;
b0 3;
b0 4;
b0 5;
b0 6;
b0 7;
b1 8;
b0 9;
b0 :;
b0 ;;
b0 <;
b0 =;
b1 >;
b0 ?;
b0 @;
b0 A;
b0 B;
b0 C;
b0 D;
b0 E;
b1 F;
b1 G;
b1 H;
b0 I;
b0 J;
b0 K;
b1 L;
b0 M;
b0 N;
b1 O;
b1 P;
b1 Q;
b1 R;
b100000 PA
b1000 QA
b100000000 RA
b100 YA
b1 ZA
b1 [A
b0 \A
b1 iA
b11 sA
b1000 vA
b0 {A
b0 #B
b100000 7B
b1000 8B
b100000000 9B
b100 @B
b1 AB
b1 BB
b0 CB
b1 PB
b11 ZB
b1000 ]B
b0 bB
b0 iB
b0 jB
b0 kB
b0 lB
b0 mB
b0 nB
b1000 oB
b0 pB
b0 qB
b0 rB
b1 sB
b1 tB
b0 uB
b0 vB
b0 wB
b0 xB
b0 yB
b1 zB
b0 {B
b0 |B
b0 }B
b0 ~B
b0 !C
b1 "C
b0 #C
b0 $C
b0 %C
b0 &C
b0 'C
b0 (C
b0 )C
b1 *C
b1 +C
b1 ,C
b0 -C
b0 .C
b0 /C
b1 0C
b0 1C
b0 2C
b1 3C
b1 4C
b1 5C
b1 6C
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 Q2
b1001110010011110100111001000101 R2
b1001110010011110100111001000101 S2
b1001110010011110100111001000101 T2
b1001110010011110100111001000101 U2
b1001110010011110100111001000101 V2
b10000110100110001001111010000110100101100110001 [2
b10000110100110001001111010000110100101100110001 \2
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 ]2
b1001110010011110100111001000101 ^2
b1001110010011110100111001000101 _2
b10000110100110001001111010000110100101100110001 `2
b10000110100110001001111010000110100101100110001 a2
b10000110100110001001111010000110100101100110001 b2
b1001110010011110100111001000101 c2
b1001110010011110100111001000101 d2
b1001110010011110100111001000101 e2
b1001110010011110100111001000101 f2
b10000100101100101010000010000010101001101010011 h2
b10000100101100101010000010000010101001101010011 i2
b10011100100111101010010010011010100000101001100 j2
b10011100100111101010010010011010100000101001100 k2
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 l2
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 m2
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 n2
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 o2
b100011001000001010011000101001101000101 p2
b100011001000001010011000101001101000101 r2
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 s2
b10001000100111101001110010101000101111101000011010000010101001001000101 u2
b1000001010101010101010001001111 v2
b10101010100111001010101010100110100010101000100 w2
b10101010100111001010101010100110100010101000100 x2
b10000110111100101100011011011000110111101101110011001010010000001010110 z2
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 {2
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 |2
b10011110100011001000110 }2
b100011001000001010011000101001101000101 ~2
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 83
b1001110010011110100111001000101 93
b1001110010011110100111001000101 :3
b1001110010011110100111001000101 ;3
b1001110010011110100111001000101 <3
b1001110010011110100111001000101 =3
b10000110100110001001111010000110100101100110001 B3
b10000110100110001001111010000110100101100110001 C3
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 D3
b1001110010011110100111001000101 E3
b1001110010011110100111001000101 F3
b10000110100110001001111010000110100101100110001 G3
b10000110100110001001111010000110100101100110001 H3
b10000110100110001001111010000110100101100110001 I3
b1001110010011110100111001000101 J3
b1001110010011110100111001000101 K3
b1001110010011110100111001000101 L3
b1001110010011110100111001000101 M3
b10000100101100101010000010000010101001101010011 O3
b10000100101100101010000010000010101001101010011 P3
b10011100100111101010010010011010100000101001100 Q3
b10011100100111101010010010011010100000101001100 R3
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 S3
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 T3
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 U3
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 V3
b100011001000001010011000101001101000101 W3
b100011001000001010011000101001101000101 Y3
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 Z3
b10001000100111101001110010101000101111101000011010000010101001001000101 \3
b1000001010101010101010001001111 ]3
b10101010100111001010101010100110100010101000100 ^3
b10101010100111001010101010100110100010101000100 _3
b10000110111100101100011011011000110111101101110011001010010000001010110 a3
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 b3
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 c3
b10011110100011001000110 d3
b100011001000001010011000101001101000101 e3
b10011110100011001000110 f3
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 o9
b1001110010011110100111001000101 p9
b1001110010011110100111001000101 q9
b1001110010011110100111001000101 r9
b1001110010011110100111001000101 s9
b1001110010011110100111001000101 t9
b10000110100110001001111010000110100101100110001 y9
b10000110100110001001111010000110100101100110001 z9
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 {9
b1001110010011110100111001000101 |9
b1001110010011110100111001000101 }9
b10000110100110001001111010000110100101100110001 ~9
b10000110100110001001111010000110100101100110001 !:
b10000110100110001001111010000110100101100110001 ":
b1001110010011110100111001000101 #:
b1001110010011110100111001000101 $:
b1001110010011110100111001000101 %:
b1001110010011110100111001000101 &:
b10000100101100101010000010000010101001101010011 (:
b10000100101100101010000010000010101001101010011 ):
b10011100100111101010010010011010100000101001100 *:
b10011100100111101010010010011010100000101001100 +:
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 ,:
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 -:
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 .:
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 /:
b100011001000001010011000101001101000101 0:
b100011001000001010011000101001101000101 2:
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 3:
b10001000100111101001110010101000101111101000011010000010101001001000101 5:
b1000001010101010101010001001111 6:
b10101010100111001010101010100110100010101000100 7:
b10101010100111001010101010100110100010101000100 8:
b10000110111100101100011011011000110111101101110011001010010000001010110 ::
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 ;:
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 <:
b10011110100011001000110 =:
b100011001000001010011000101001101000101 >:
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 V:
b1001110010011110100111001000101 W:
b1001110010011110100111001000101 X:
b1001110010011110100111001000101 Y:
b1001110010011110100111001000101 Z:
b1001110010011110100111001000101 [:
b10000110100110001001111010000110100101100110001 `:
b10000110100110001001111010000110100101100110001 a:
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 b:
b1001110010011110100111001000101 c:
b1001110010011110100111001000101 d:
b10000110100110001001111010000110100101100110001 e:
b10000110100110001001111010000110100101100110001 f:
b10000110100110001001111010000110100101100110001 g:
b1001110010011110100111001000101 h:
b1001110010011110100111001000101 i:
b1001110010011110100111001000101 j:
b1001110010011110100111001000101 k:
b10000100101100101010000010000010101001101010011 m:
b10000100101100101010000010000010101001101010011 n:
b10011100100111101010010010011010100000101001100 o:
b10011100100111101010010010011010100000101001100 p:
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 q:
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 r:
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 s:
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 t:
b100011001000001010011000101001101000101 u:
b100011001000001010011000101001101000101 w:
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 x:
b10001000100111101001110010101000101111101000011010000010101001001000101 z:
b1000001010101010101010001001111 {:
b10101010100111001010101010100110100010101000100 |:
b10101010100111001010101010100110100010101000100 }:
b10000110111100101100011011011000110111101101110011001010010000001010110 !;
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 ";
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 #;
b10011110100011001000110 $;
b100011001000001010011000101001101000101 %;
b10011110100011001000110 &;
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 SA
b1001110010011110100111001000101 TA
b1001110010011110100111001000101 UA
b1001110010011110100111001000101 VA
b1001110010011110100111001000101 WA
b1001110010011110100111001000101 XA
b10000110100110001001111010000110100101100110001 ]A
b10000110100110001001111010000110100101100110001 ^A
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 _A
b1001110010011110100111001000101 `A
b1001110010011110100111001000101 aA
b10000110100110001001111010000110100101100110001 bA
b10000110100110001001111010000110100101100110001 cA
b10000110100110001001111010000110100101100110001 dA
b1001110010011110100111001000101 eA
b1001110010011110100111001000101 fA
b1001110010011110100111001000101 gA
b1001110010011110100111001000101 hA
b10000100101100101010000010000010101001101010011 jA
b10000100101100101010000010000010101001101010011 kA
b10011100100111101010010010011010100000101001100 lA
b10011100100111101010010010011010100000101001100 mA
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 nA
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 oA
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 pA
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 qA
b100011001000001010011000101001101000101 rA
b100011001000001010011000101001101000101 tA
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 uA
b10001000100111101001110010101000101111101000011010000010101001001000101 wA
b1000001010101010101010001001111 xA
b10101010100111001010101010100110100010101000100 yA
b10101010100111001010101010100110100010101000100 zA
b10000110111100101100011011011000110111101101110011001010010000001010110 |A
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 }A
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 ~A
b10011110100011001000110 !B
b100011001000001010011000101001101000101 "B
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 :B
b1001110010011110100111001000101 ;B
b1001110010011110100111001000101 <B
b1001110010011110100111001000101 =B
b1001110010011110100111001000101 >B
b1001110010011110100111001000101 ?B
b10000110100110001001111010000110100101100110001 DB
b10000110100110001001111010000110100101100110001 EB
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 FB
b1001110010011110100111001000101 GB
b1001110010011110100111001000101 HB
b10000110100110001001111010000110100101100110001 IB
b10000110100110001001111010000110100101100110001 JB
b10000110100110001001111010000110100101100110001 KB
b1001110010011110100111001000101 LB
b1001110010011110100111001000101 MB
b1001110010011110100111001000101 NB
b1001110010011110100111001000101 OB
b10000100101100101010000010000010101001101010011 QB
b10000100101100101010000010000010101001101010011 RB
b10011100100111101010010010011010100000101001100 SB
b10011100100111101010010010011010100000101001100 TB
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 UB
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 VB
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 WB
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 XB
b100011001000001010011000101001101000101 YB
b100011001000001010011000101001101000101 [B
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 \B
b10001000100111101001110010101000101111101000011010000010101001001000101 ^B
b1000001010101010101010001001111 _B
b10101010100111001010101010100110100010101000100 `B
b10101010100111001010101010100110100010101000100 aB
b10000110111100101100011011011000110111101101110011001010010000001010110 cB
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 dB
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 eB
b10011110100011001000110 fB
b100011001000001010011000101001101000101 gB
b10011110100011001000110 hB
b1000 |4
b100000000000 A5
b10 B5
b0 C5
b0 D5
bx E5
bx F5
b100000000000 G5
bx H5
bx I5
bx J5
bx K5
bx L5
bx M5
bx N5
b100000 O5
bx P5
bx Q5
bx R5
bx S5
bx T5
bx U5
bx V5
bx W5
bx X5
bx Y5
bx Z5
bx [5
b0 \5
bx ]5
bx ^5
bx _5
bx `5
bx r7
bx s7
bx t7
bx u7
bx v7
bx w7
bx x7
bx y7
bx z7
bx {7
bx |7
bx }7
bx ~7
bx !8
bx #8
bx @8
bx A8
bx B8
bx C8
bx D8
bx E8
bx F8
bx G8
bx H8
bx I8
bx J8
bx K8
bx L8
bx M8
bx N8
bx O8
bx P8
bx Q8
bx R8
bx S8
bx T8
bx U8
bx V8
bx W8
bx X8
bx Y8
bx Z8
bx [8
bx ]8
bx h8
bx i8
bx j8
bx k8
bx l8
bx m8
bx n8
bx o8
bx p8
bx q8
bx r8
bx s8
bx t8
bx u8
bx v8
bx w8
bx x8
bx y8
bx z8
bx {8
bx |8
bx ~8
b1000 <<
b100000000 _<
b10 `<
b0 a<
b0 b<
bx c<
bx d<
b100000000 e<
bx f<
bx g<
bx h<
bx i<
bx j<
bx k<
bx l<
b100000 m<
bx n<
bx o<
bx p<
bx q<
bx r<
bx s<
bx t<
bx u<
bx v<
bx w<
bx x<
bx y<
b0 z<
bx {<
bx |<
bx }<
bx ~<
bx 2?
bx 3?
bx 4?
bx 5?
bx 6?
bx 7?
bx 8?
bx 9?
bx :?
bx ;?
bx <?
bx =?
bx >?
bx ??
bx A?
bx ^?
bx _?
bx `?
bx a?
bx b?
bx c?
bx d?
bx e?
bx f?
bx g?
bx h?
bx i?
bx j?
bx k?
bx l?
bx m?
bx n?
bx o?
bx p?
bx q?
bx r?
bx s?
bx t?
bx u?
bx v?
bx w?
bx x?
bx y?
bx {?
bx (@
bx )@
bx *@
bx +@
bx ,@
bx -@
bx .@
bx /@
bx 0@
bx 1@
bx 2@
bx 3@
bx 4@
bx 5@
bx 6@
bx 7@
bx 8@
bx 9@
bx :@
bx ;@
bx <@
bx >@
b1000 ~C
b100000000 CD
b10 DD
b0 ED
b0 FD
bx GD
bx HD
b100000000 ID
bx JD
bx KD
bx LD
b100000 MD
bx ND
bx OD
bx PD
b100000 QD
bx RD
bx SD
bx TD
bx UD
bx VD
bx WD
bx XD
bx YD
bx ZD
bx [D
bx \D
bx ]D
b0 ^D
b100000 _D
bx `D
b0 aD
b1 bD
bx tF
bx uF
bx vF
bx wF
bx xF
bx yF
bx zF
bx {F
bx |F
bx }F
bx ~F
bx !G
bx "G
bx #G
bx %G
bx BG
bx CG
bx DG
bx EG
bx FG
bx GG
bx HG
bx IG
bx JG
bx KG
bx LG
bx MG
bx NG
bx OG
bx PG
bx QG
bx RG
bx SG
bx TG
bx UG
bx VG
bx WG
bx XG
bx YG
bx ZG
bx [G
bx \G
bx ]G
bx _G
bx jG
bx kG
bx lG
bx mG
bx nG
bx oG
bx pG
bx qG
bx rG
bx sG
bx tG
bx uG
bx vG
bx wG
bx xG
bx yG
bx zG
bx {G
bx |G
bx }G
bx ~G
bx "H
b0 a5
b0 b5
b0 !=
b0 "=
b0 cD
b0 dD
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0c)
0F*
0E*
0D*
0C*
0B*
0A*
0@*
0?*
0>*
0=*
0<*
0;*
0:*
09*
08*
07*
06*
05*
04*
03*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
0**
0)*
0(*
0'*
0&*
0g*
0f*
0e*
0d*
0c*
0b*
0a*
0`*
0_*
0^*
0]*
0\*
0[*
0Z*
0Y*
0X*
0W*
0V*
0U*
0T*
0S*
0R*
0Q*
0P*
0O*
0N*
0M*
0L*
0K*
0J*
0I*
0H*
0G*
0)+
0(+
0'+
0&+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
0|*
0{*
0z*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
0j*
0i*
0h*
0*+
0++
00.
0/.
0..
0-.
0,.
0+.
0*.
0).
0(.
0'.
0&.
0%.
0$.
0#.
0".
0!.
0~-
0}-
0|-
0{-
0z-
0y-
0x-
0w-
0v-
0u-
0t-
0s-
0r-
0q-
0p-
0o-
0n-
0Q.
0P.
0O.
0N.
0M.
0L.
0K.
0J.
0I.
0H.
0G.
0F.
0E.
0D.
0C.
0B.
0A.
0@.
0?.
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
05.
04.
03.
12.
01.
0r.
0q.
0p.
0o.
0n.
0m.
0l.
0k.
0j.
0i.
0h.
0g.
0f.
0e.
0d.
0c.
0b.
0a.
0`.
0_.
0^.
0].
0\.
0[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0T.
1S.
1R.
04/
03/
02/
01/
00/
0//
0./
0-/
0,/
0+/
0*/
0)/
0(/
0'/
0&/
0%/
0$/
0#/
0"/
0!/
0~.
0}.
0|.
0{.
0z.
0y.
0x.
0w.
0v.
0u.
0t.
1s.
0T/
0S/
0R/
0Q/
0P/
0O/
0N/
0M/
0L/
0K/
0J/
0I/
0H/
0G/
0F/
0E/
0D/
0C/
0B/
0A/
0@/
0?/
0>/
0=/
0</
0;/
0:/
09/
08/
07/
06/
05/
0u/
0t/
0s/
0r/
0q/
0p/
0o/
0n/
0m/
0l/
0k/
0j/
0i/
0h/
0g/
0f/
0e/
0d/
0c/
0b/
0a/
0`/
0_/
0^/
0]/
0\/
0[/
0Z/
0Y/
0X/
0W/
0V/
0M2
0L2
0K2
0J2
0I2
0H2
0G2
0F2
0E2
0D2
0C2
0B2
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
092
082
072
062
052
042
032
022
012
002
0/2
0.2
1}4
1~4
0&5
0'5
0(5
0)5
0*5
0+5
0,5
0-5
0.5
0/5
005
115
125
135
145
155
165
175
185
195
1:5
1;5
0?5
0>5
0=5
0<5
1@5
0k9
0j9
0i9
0h9
0g9
0f9
0e9
0d9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
0\9
0[9
0Z9
0Y9
0X9
0W9
0V9
0U9
0T9
0S9
0R9
0Q9
0P9
0O9
0N9
0M9
0L9
1=<
1><
0D<
0E<
0F<
0G<
0H<
0I<
0J<
0K<
0L<
0M<
0N<
1O<
1P<
1Q<
1R<
1S<
1T<
1U<
1V<
1W<
1X<
1Y<
0]<
0\<
0[<
0Z<
1^<
0OA
0NA
0MA
0LA
0KA
0JA
0IA
0HA
0GA
0FA
0EA
0DA
0CA
0BA
0AA
0@A
0?A
0>A
0=A
0<A
0;A
0:A
09A
08A
07A
06A
05A
04A
03A
02A
01A
00A
1!D
1"D
0(D
0)D
0*D
0+D
0,D
0-D
0.D
0/D
00D
01D
02D
13D
14D
15D
16D
17D
18D
19D
1:D
1;D
1<D
1=D
1AD
1@D
1?D
1>D
1BD
1Q
1P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0\L
0[L
0ZL
0YL
0XL
0WL
0VL
0UL
0TL
0SL
0RL
0QL
0PL
0OL
0NL
0ML
0LL
0KL
0JL
0IL
0HL
0GL
0FL
0EL
0DL
0CL
0BL
0AL
0@L
0?L
0>L
0=L
0<L
0;L
0:L
09L
08L
07L
06L
05L
04L
03L
02L
01L
00L
0/L
0.L
0-L
0,L
0+L
0*L
0)L
0(L
0'L
0&L
0%L
0$L
0#L
0"L
0!L
0~K
0}K
0|K
0{K
0zK
1yK
0xK
0wK
1vK
0uK
0tK
0sK
0rK
0qK
0pK
0oK
0nK
0mK
0lK
0KK
0JK
0IK
0HK
0GK
0FK
0EK
0DK
0CK
0BK
0AK
0@K
0?K
0>K
0=K
0<K
0;K
0:K
09K
08K
07K
06K
05K
04K
03K
02K
01K
00K
0/K
0.K
0-K
0,K
0+K
0*K
0)K
0(K
0'K
0&K
0%K
0$K
0#K
0"K
0!K
0~J
0}J
0|J
0{J
0zJ
0yJ
0xJ
0wJ
0vJ
0uJ
0tJ
0sJ
0rJ
0qJ
0pJ
0oJ
0nJ
0mJ
0lJ
0kJ
0jJ
0iJ
0hJ
0gJ
0fJ
0eJ
0dJ
0cJ
0bJ
0aJ
0`J
0_J
0^J
0]J
0\J
0[J
0ZJ
0YJ
0XJ
0WJ
0H0
0G0
0F0
0E0
0D0
0C0
0B0
0A0
0@0
0?0
0>0
0=0
0<0
0;0
0:0
090
080
070
060
050
040
030
020
010
000
0/0
0.0
0-0
0,0
0+0
0*0
0)0
0(0
0'0
0&0
0%0
0$0
0#0
0"0
0!0
0~/
0}/
0|/
0{/
0z/
0y/
0x/
0w/
0v/
0l-
0k-
0j-
0i-
0h-
0g-
0f-
0e-
0d-
0c-
0b-
0a-
0`-
0_-
0^-
0]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
0U-
0T-
0S-
0R-
0Q-
0P-
0O-
0N-
0M-
0L-
0K-
0J-
1I-
0H-
0G-
0F-
0E-
0D-
0C-
0B-
0A-
0@-
0?-
0>-
0=-
0<-
0;-
0:-
09-
08-
07-
06-
05-
04-
03-
02-
01-
00-
0/-
0.-
0--
0,-
0+-
0*-
0)-
1\,
0[,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0S,
0R,
0Q,
0P,
0O,
0N,
0M,
0L,
0K,
0J,
0I,
0H,
0G,
0F,
0E,
0D,
0C,
0B,
0A,
0@,
0?,
0>,
0=,
0<,
0;,
0:,
09,
08,
07,
06,
05,
04,
03,
02,
01,
00,
0/,
0.,
0-,
0,,
0+,
0*,
0),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
0~+
0}+
0|+
0{+
1z+
0Y+
0X+
0W+
0V+
0U+
0T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0K+
0J+
0I+
0H+
0G+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
09+
08+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0`)
0_)
0^)
0])
0\)
0[)
0Z)
0Y)
0X)
0W)
0V)
0U)
0T)
0S)
0R)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0C)
0B)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
0:)
09)
08)
07)
06)
05)
04)
03)
02)
01)
00)
0/)
0.)
0-)
0,)
0+)
0*)
0))
0()
0')
0&)
0%)
0$)
0#)
0")
0!)
0~(
1=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
1{'
1z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0m'
0l'
1b'
1a'
1`'
0_'
1^'
1]'
0\'
1['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
1C'
13'
12'
11'
00'
1/'
1.'
0-'
1,'
0+'
0*'
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
0s&
1r&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0B&
0A&
1@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0l%
0k%
1j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
1D%
0C%
1B%
1A%
1@%
0?%
1>%
1=%
0<%
1;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
1#%
0y%
0x%
1w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
05&
04&
13&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
1p&
1o&
1n&
0m&
1l&
1k&
0j&
1i&
0h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
1Q&
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0}(
0|(
0{(
0z(
0y(
0x(
0w(
0v(
0u(
0t(
0s(
0r(
0q(
0p(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0a)
1b)
0y+
0x+
0w+
0v+
0u+
0t+
0s+
0r+
0q+
0p+
0o+
0n+
0m+
0l+
0k+
0j+
0i+
0h+
0g+
0f+
0e+
0d+
0c+
0b+
0a+
0`+
0_+
0^+
0]+
0\+
0[+
0Z+
0|,
0{,
0z,
0y,
0x,
0w,
0v,
0u,
0t,
0s,
0r,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
1],
0h0
0g0
0f0
0e0
0d0
0c0
0b0
0a0
0`0
0_0
0^0
0]0
0\0
0[0
0Z0
0Y0
0X0
0W0
0V0
0U0
0T0
0S0
0R0
0Q0
0P0
0O0
0N0
0M0
0L0
0K0
0J0
0I0
0VJ
0UJ
0TJ
0SJ
0RJ
0QJ
0PJ
0OJ
0NJ
0MJ
0LJ
0KJ
0JJ
0IJ
0HJ
0GJ
0FJ
0EJ
0DJ
0CJ
0BJ
0AJ
0@J
0?J
0>J
0=J
0<J
0;J
0:J
09J
08J
07J
06J
05J
04J
03J
02J
01J
00J
0/J
0.J
0-J
0,J
0+J
0*J
0)J
0(J
0'J
0&J
0%J
0$J
0#J
0"J
0!J
0~I
0}I
0|I
0{I
0zI
0yI
0xI
0wI
0vI
0uI
0tI
0sI
0rI
0qI
0pI
0oI
0nI
0mI
0lI
0kI
0jI
0iI
0hI
0gI
0fI
0eI
0dI
0cI
0bI
0aI
0`I
0_I
0^I
0]I
0\I
0[I
0ZI
0YI
0XI
0WI
0VI
0UI
0SI
0RI
0QI
0PI
0OI
1NI
0MI
1LI
0KI
0JI
0II
1HI
0FI
0EI
0DI
0CI
1BI
0AI
0@I
1?I
0>I
0=I
0<I
1;I
09I
08I
07I
06I
05I
04I
03I
12I
01I
00I
0/I
1.I
0,I
0+I
0*I
0)I
1(I
1'I
1&I
0%I
0$I
0#I
0"I
1!I
0}H
0|H
0{H
0zH
0yH
1xH
1wH
0vH
0uH
0tH
0sH
1rH
0pH
0oH
0nH
0mH
1lH
0kH
1jH
0iH
0hH
0gH
0fH
1eH
0cH
0bH
0aH
0`H
0_H
0^H
1]H
0\H
0[H
0ZH
0YH
1XH
0VH
0UH
0TH
0SH
1RH
1QH
0PH
0OH
0NH
0MH
0LH
1KH
0IH
0HH
0GH
0FH
0EH
1DH
0CH
0BH
0AH
0@H
0?H
1>H
0<H
0;H
0:H
09H
18H
07H
06H
05H
04H
03H
02H
11H
0/H
0.H
0-H
0,H
0+H
0*H
0)H
0(H
0'H
0&H
0%H
1$H
1m@
0l@
0k@
0j@
0i@
0h@
0g@
0f@
0e@
0d@
0c@
0b@
0a@
0`@
0_@
0^@
0]@
0\@
0[@
0Z@
0Y@
0X@
0W@
0V@
0U@
0T@
0S@
0R@
0Q@
0P@
0O@
0N@
0M@
1L@
1K@
1J@
1I@
1H@
0G@
0F@
0E@
0D@
0C@
0B@
0A@
0@@
0+9
1*9
0)9
0(9
0'9
0&9
0%9
0$9
0#9
0"9
0k1
1j1
0i1
0h1
0g1
0f1
0e1
0d1
0c1
0b1
0a1
0`1
0_1
0>1
0=1
0<1
0;1
0:1
091
081
071
161
051
041
131
0}0
0|0
0{0
0z0
0y0
0x0
0w0
0v0
0u0
0t0
0s0
0'1
0&1
0%1
0$1
0#1
0"1
0!1
0~0
0/1
0.1
0-1
0,1
0+1
0*1
0)1
0(1
001
011
021
0^1
0]1
0\1
0[1
0Z1
0Y1
0X1
0W1
0V1
0U1
0T1
0S1
0R1
0Q1
0P1
0O1
0N1
0M1
0L1
0K1
0J1
0I1
0H1
0G1
0F1
0E1
0D1
0C1
0B1
0A1
0@1
0?1
0-2
0,2
0+2
0*2
0)2
0(2
0'2
0&2
0%2
0$2
0#2
0"2
0!2
0~1
0}1
0|1
0{1
0z1
0y1
0x1
0w1
0v1
0u1
0t1
0s1
0r1
0q1
0p1
0o1
0n1
0m1
0l1
003
0/3
1.3
0-3
0,3
1+3
1*3
1)3
1(3
1'3
1&3
1%3
1$3
1#3
0"3
013
043
033
023
0K9
0J9
0I9
0H9
0G9
0F9
0E9
0D9
0C9
0B9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
089
079
069
059
049
039
029
019
009
0/9
0.9
0-9
0,9
0N:
0M:
1L:
0K:
0J:
1I:
1H:
1G:
1F:
1E:
1D:
1C:
1B:
1A:
0@:
0O:
0R:
0Q:
0P:
0/A
0.A
0-A
0,A
0+A
0*A
0)A
0(A
0'A
0&A
0%A
0$A
0#A
0"A
0!A
0~@
0}@
0|@
0{@
0z@
0y@
0x@
0w@
0v@
0u@
0t@
0s@
0r@
0q@
0p@
0o@
0n@
02B
01B
10B
0/B
0.B
1-B
1,B
1+B
1*B
1)B
1(B
1'B
1&B
1%B
0$B
03B
06B
05B
04B
0kK
0jK
0iK
0hK
0gK
0fK
0eK
0dK
0cK
0bK
0aK
0`K
0_K
0^K
0]K
0\K
0[K
0ZK
0YK
0XK
0WK
0VK
0UK
0TK
0SK
0RK
0QK
0PK
0OK
0NK
0MK
0LK
0|L
0{L
0zL
0yL
0xL
0wL
0vL
0uL
0tL
0sL
0rL
0qL
0pL
0oL
0nL
0mL
0lL
0kL
0jL
0iL
0hL
0gL
0fL
0eL
0dL
0cL
0bL
0aL
0`L
0_L
0^L
1]L
$end
#5
1!
1"
10
11
0j1
0*9
0L@
b100 C&
b100 S$
16+
1N&
1&&
1\
b100 $
03&
12&
0i&
1h&
1d&
0Q&
b1000100110111 H$
b1000 Q$
0vK
1uK
0j%
1i%
0['
1Z'
1V'
0C'
0,'
1+'
1''
0r&
0;%
1:%
16%
0#%
b0 P%
b1 Q%
b10 9'
b0 f'
b1 d'
b1000000000000 e'
b1 k'
b10 g'
b10 h'
0w%
1v%
b1000 R$
0@&
1?&
b1000000000000 c'
b10 6'
b10 V$
b1000000000000 I$
1/,
0z+
0z'
1y'
1p,
0],
b1000000000000 M$
1\-
0I-
1E.
02.
1f.
1e.
1d.
1c.
1b.
1a.
1`.
1_.
1^.
1].
1\.
1[.
1Z.
1Y.
1X.
1W.
1V.
1U.
1T.
1(/
1'/
1&/
1%/
1$/
1#/
1"/
1!/
1~.
1}.
1|.
1{.
1z.
1y.
1x.
1w.
1v.
1u.
1t.
b1000000000000 m-
b1000000000000 G$
1.L
0yK
1S%
1pL
0]L
b1000000000000 P$
10(
0{'
0lC
0*<
0j4
#7
b101 #
0P
1O
#10
0!
00
1j1
1*9
1L@
b0 QD
b1 QD
b10 QD
b11 QD
b100 QD
b101 QD
b110 QD
b111 QD
b1000 QD
b1001 QD
b1010 QD
b1011 QD
b1100 QD
b1101 QD
b1110 QD
b1111 QD
b10000 QD
b10001 QD
b10010 QD
b10011 QD
b10100 QD
b10101 QD
b10110 QD
b10111 QD
b11000 QD
b11001 QD
b11010 QD
b11011 QD
b11100 QD
b11101 QD
b11110 QD
b11111 QD
b100000 QD
b0 m<
b1 m<
b10 m<
b11 m<
b100 m<
b101 m<
b110 m<
b111 m<
b1000 m<
b1001 m<
b1010 m<
b1011 m<
b1100 m<
b1101 m<
b1110 m<
b1111 m<
b10000 m<
b10001 m<
b10010 m<
b10011 m<
b10100 m<
b10101 m<
b10110 m<
b10111 m<
b11000 m<
b11001 m<
b11010 m<
b11011 m<
b11100 m<
b11101 m<
b11110 m<
b11111 m<
b100000 m<
b0 O5
b1 O5
b10 O5
b11 O5
b100 O5
b101 O5
b110 O5
b111 O5
b1000 O5
b1001 O5
b1010 O5
b1011 O5
b1100 O5
b1101 O5
b1110 O5
b1111 O5
b10000 O5
b10001 O5
b10010 O5
b10011 O5
b10100 O5
b10101 O5
b10110 O5
b10111 O5
b11000 O5
b11001 O5
b11010 O5
b11011 O5
b11100 O5
b11101 O5
b11110 O5
b11111 O5
b100000 O5
1lC
0[C
0]C
1*<
0w;
b0 S;
1j4
0Y4
b0 54
b1010 cD
b0 _D
b0 MD
b1 _D
b1 MD
b10 _D
b10 MD
b11 _D
b11 MD
b100 _D
b100 MD
b101 _D
b101 MD
b110 _D
b110 MD
b111 _D
b111 MD
b1000 _D
b1000 MD
b1001 _D
b1001 MD
b1010 _D
b1010 MD
b1011 _D
b1011 MD
b1100 _D
b1100 MD
b1101 _D
b1101 MD
b1110 _D
b1110 MD
b1111 _D
b1111 MD
b10000 _D
b10000 MD
b10001 _D
b10001 MD
b10010 _D
b10010 MD
b10011 _D
b10011 MD
b10100 _D
b10100 MD
b10101 _D
b10101 MD
b10110 _D
b10110 MD
b10111 _D
b10111 MD
b11000 _D
b11000 MD
b11001 _D
b11001 MD
b11010 _D
b11010 MD
b11011 _D
b11011 MD
b11100 _D
b11100 MD
b11101 _D
b11101 MD
b11110 _D
b11110 MD
b11111 _D
b11111 MD
b100000 _D
b100000 MD
#15
1!
10
0j1
0*9
0L@
b1000 C&
b1000 S$
06+
15+
0N&
1M&
0&&
1%&
0\
1[
b1000 $
13&
0n&
0k&
0d&
1`&
1W&
1U&
1Q&
b10001010000000010000000100010011 H$
b1100 Q$
1vK
1j%
0`'
0]'
0V'
1R'
1I'
1G'
1C'
01'
0.'
0''
1#'
1x&
1v&
1r&
0@%
0=%
06%
12%
1)%
1'%
1#%
b1000101 P%
b0 Q%
b10011 O%
b10 7'
b10011 :'
b100010100000 f'
b100010100010 g'
b1000010100010 h'
b10001010000000010000 d'
b100010000000010100000 e'
b0 k'
b10011 j'
1w%
b1100 R$
1@&
b11111111111111111111100010100000 c'
b10 4'
b10 T$
b11111111111111111111100010100000 I$
16,
14,
10,
1.,
1-,
1,,
1+,
1*,
1),
1(,
1',
1&,
1%,
1$,
1#,
1",
1!,
1~+
1}+
1|+
1{+
1z+
1o'
1w,
1u,
1q,
1o,
1n,
1m,
1l,
1k,
1j,
1i,
1h,
1g,
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
b11111111111111111111100010100000 M$
1c-
1a-
1]-
1[-
1Z-
1Y-
1X-
1W-
1V-
1U-
1T-
1S-
1R-
1Q-
1P-
1O-
1N-
1M-
1L-
1K-
1J-
1I-
1L.
1J.
1F.
1D.
1C.
1B.
1A.
1@.
1?.
1>.
1=.
1<.
1;.
1:.
19.
18.
17.
16.
15.
14.
13.
12.
1m.
1l.
1j.
1i.
1h.
0f.
0e.
0d.
0c.
0b.
0a.
0`.
0_.
0^.
0].
0\.
0[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0T.
0S.
1//
1./
1,/
1+/
1*/
0(/
0'/
0&/
0%/
0$/
0#/
0"/
0!/
0~.
0}.
0|.
0{.
0z.
0y.
0x.
0w.
0v.
0u.
0t.
0s.
b11111111111111111111100010100000 m-
b11111111111111111111100010100000 G$
15L
13L
1/L
1-L
1,L
1+L
1*L
1)L
1(L
1'L
1&L
1%L
1$L
1#L
1"L
1!L
1~K
1}K
1|K
1{K
1zK
1yK
1Z%
1X%
1T%
1}/
1{/
1w/
1x0
1v0
1"1
1~0
1*1
1(1
1wL
1uL
1qL
1oL
1nL
1mL
1lL
1kL
1jL
1iL
1hL
1gL
1fL
1eL
1dL
1cL
1bL
1aL
1`L
1_L
1^L
1]L
b11111111111111111111100010100000 P$
b10100000 r0
b10100000 q0
b10100000 p0
1d1
1b1
1$9
1"9
1B@
1@@
17(
15(
11(
1/(
1.(
1-(
1,(
1+(
1*(
1)(
1((
1'(
1&(
1%(
1$(
1#(
1"(
1!(
1~'
1}'
1|'
1{'
0lC
0*<
0j4
1Q(
b1000000000000 J$
1L+
13)
1{*
1w)
1m+
b1000000000000 L$
0b)
1[*
0_$
1<-
0D%
1$.
1f.
1(/
1i/
b1000000000000 U/
b100010100000 m-
b100010100000 G$
0.L
0-L
0,L
0+L
0*L
0)L
0(L
0'L
0&L
0%L
0$L
0#L
0"L
0!L
0~K
0}K
0|K
0{K
0zK
0yK
0S%
0pL
0oL
0nL
0mL
0lL
0kL
0jL
0iL
0hL
0gL
0fL
0eL
0dL
0cL
0bL
0aL
0`L
0_L
0^L
0]L
b100010100000 P$
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
1H/
#17
b1010 #
0Q
1P
0O
1N
#20
0!
00
1j1
1*9
1L@
b0 QD
b1 QD
b10 QD
b11 QD
b100 QD
b101 QD
b110 QD
b111 QD
b1000 QD
b1001 QD
b1010 QD
b1011 QD
b1100 QD
b1101 QD
b1110 QD
b1111 QD
b10000 QD
b10001 QD
b10010 QD
b10011 QD
b10100 QD
b10101 QD
b10110 QD
b10111 QD
b11000 QD
b11001 QD
b11010 QD
b11011 QD
b11100 QD
b11101 QD
b11110 QD
b11111 QD
b100000 QD
b0 m<
b1 m<
b10 m<
b11 m<
b100 m<
b101 m<
b110 m<
b111 m<
b1000 m<
b1001 m<
b1010 m<
b1011 m<
b1100 m<
b1101 m<
b1110 m<
b1111 m<
b10000 m<
b10001 m<
b10010 m<
b10011 m<
b10100 m<
b10101 m<
b10110 m<
b10111 m<
b11000 m<
b11001 m<
b11010 m<
b11011 m<
b11100 m<
b11101 m<
b11110 m<
b11111 m<
b100000 m<
b0 O5
b1 O5
b10 O5
b11 O5
b100 O5
b101 O5
b110 O5
b111 O5
b1000 O5
b1001 O5
b1010 O5
b1011 O5
b1100 O5
b1101 O5
b1110 O5
b1111 O5
b10000 O5
b10001 O5
b10010 O5
b10011 O5
b10100 O5
b10101 O5
b10110 O5
b10111 O5
b11000 O5
b11001 O5
b11010 O5
b11011 O5
b11100 O5
b11101 O5
b11110 O5
b11111 O5
b100000 O5
1lC
1[C
1]C
b10100000 IC
1*<
1w;
b10100000 e;
1j4
1Y4
b10100000 G4
b10100000 MC
b10100 cD
b1010000000000 _D
b0 MD
b1010000000001 _D
b1 MD
b1010000000010 _D
b10 MD
b1010000000011 _D
b11 MD
b1010000000100 _D
b100 MD
b1010000000101 _D
b101 MD
b1010000000110 _D
b110 MD
b1010000000111 _D
b111 MD
b1010000001000 _D
b1000 MD
b1010000001001 _D
b1001 MD
b1010000001010 _D
b1010 MD
b1010000001011 _D
b1011 MD
b1010000001100 _D
b1100 MD
b1010000001101 _D
b1101 MD
b1010000001110 _D
b1110 MD
b1010000001111 _D
b1111 MD
b1010000010000 _D
b10000 MD
b1010000010001 _D
b10001 MD
b1010000010010 _D
b10010 MD
b1010000010011 _D
b10011 MD
b1010000010100 _D
b10100 MD
b1010000010101 _D
b10101 MD
b1010000010110 _D
b10110 MD
b1010000010111 _D
b10111 MD
b1010000011000 _D
b11000 MD
b1010000011001 _D
b11001 MD
b1010000011010 _D
b11010 MD
b1010000011011 _D
b11011 MD
b1010000011100 _D
b11100 MD
b1010000011101 _D
b11101 MD
b1010000011110 _D
b11110 MD
b1010000011111 _D
b11111 MD
b1010000100000 _D
b100000 MD
#25
1!
10
0j1
0*9
0L@
b1100 C&
b1100 S$
16+
1N&
1&&
1\
b1100 $
03&
02&
11&
0l&
1k&
0h&
1c&
1\&
0W&
0U&
0Q&
b100010010000000100011 H$
b10000 Q$
0vK
0uK
1tK
0j%
0i%
1h%
0^'
1]'
0Z'
1U'
1N'
0I'
0G'
0C'
0/'
1.'
0+'
1&'
1}&
0x&
0v&
0r&
0>%
1=%
0:%
15%
1.%
0)%
0'%
0#%
b0 P%
b10 Q%
b100011 O%
b1 8'
b0 9'
b100011 :'
b1 f'
b1 i'
b100010010 d'
b10010100000000000 e'
b10 k'
b0 g'
b0 h'
b100011 j'
0w%
0v%
1u%
b10000 R$
0@&
0?&
1>&
b0 c'
b1 5'
b0 6'
0F%
1J%
b1111 L%
b1111 X$
1b$
0\$
b0 V$
b1 U$
b0 I$
1v/
0=(
06,
04,
00,
0/,
0.,
0-,
0,,
0+,
0*,
0),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
0~+
0}+
0|+
0{+
0z+
1u'
0y'
1(0
1'0
1&0
1%0
111
1?5
1>5
1=5
1<5
1]<
1\<
1[<
1Z<
1^(
0w,
0u,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
b0 M$
b10000000000000000000000000000000 K$
1j0
1)0
1<,
1@)
1+9
1h*
1'*
1*+
1a)
1^$
1H*
1G*
1++
0c-
0a-
0]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
0U-
0T-
0S-
0R-
0Q-
0P-
0O-
0N-
0M-
0L-
0K-
0J-
0I-
1C%
0L.
0J.
0F.
0E.
0D.
0C.
0B.
0A.
0@.
0?.
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
05.
04.
03.
02.
0m.
0l.
0j.
0i.
0h.
0R.
0//
0./
0,/
0+/
0*/
b1000000000000 m-
b1000000000000 G$
05L
03L
0/L
1.L
0Z%
0X%
0T%
1S%
0}/
0{/
0w/
0x0
0v0
0"1
0~0
0*1
0(1
0wL
0uL
0qL
1pL
011
101
1i0
0j0
b1000000000000 P$
b0 r0
b0 q0
b0 p0
1k1
0+9
0d1
0b1
0$9
0"9
0B@
0@@
07(
05(
01(
10(
0lC
0*<
0j4
1X(
1V(
1R(
0Q(
b100010100000 J$
1S+
1Q+
1M+
0L+
1:)
18)
14)
03)
1$+
1"+
1|*
0{*
1~)
1|)
1x)
0w)
1t+
1r+
1n+
0m+
b100010100000 L$
1b*
1`*
1\*
0[*
1C-
1A-
1=-
0<-
1+.
1).
1%.
0$.
1m.
1k.
1g.
0f.
1//
1-/
1)/
0(/
1p/
1n/
1j/
0i/
b100010100000 U/
b100010100000 m-
b100010100000 G$
15L
13L
1/L
0.L
1Z%
1X%
1T%
0S%
1}/
1{/
1w/
1x0
1v0
1"1
1~0
1*1
1(1
1wL
1uL
1qL
0pL
111
001
0i0
1j0
b100010100000 P$
b10100000 r0
b10100000 q0
b10100000 p0
0k1
1+9
1d1
1b1
1$9
1"9
1B@
1@@
17(
15(
11(
00(
1O/
1M/
1I/
0H/
#27
b1111 #
1Q
1O
#30
0!
00
1j1
1*9
1L@
b0 QD
b1 QD
b10 QD
b11 QD
b100 QD
b101 QD
b110 QD
b111 QD
b1000 QD
b1001 QD
b1010 QD
b1011 QD
b1100 QD
b1101 QD
b1110 QD
b1111 QD
b10000 QD
b10001 QD
b10010 QD
b10011 QD
b10100 QD
b10101 QD
b10110 QD
b10111 QD
b11000 QD
b11001 QD
b11010 QD
b11011 QD
b11100 QD
b11101 QD
b11110 QD
b11111 QD
b100000 QD
b0 m<
b1 m<
b10 m<
b11 m<
b100 m<
b101 m<
b110 m<
b111 m<
b1000 m<
b1001 m<
b1010 m<
b1011 m<
b1100 m<
b1101 m<
b1110 m<
b1111 m<
b10000 m<
b10001 m<
b10010 m<
b10011 m<
b10100 m<
b10101 m<
b10110 m<
b10111 m<
b11000 m<
b11001 m<
b11010 m<
b11011 m<
b11100 m<
b11101 m<
b11110 m<
b11111 m<
b100000 m<
b0 O5
b1 O5
b10 O5
b11 O5
b100 O5
b101 O5
b110 O5
b111 O5
b1000 O5
b1001 O5
b1010 O5
b1011 O5
b1100 O5
b1101 O5
b1110 O5
b1111 O5
b10000 O5
b10001 O5
b10010 O5
b10011 O5
b10100 O5
b10101 O5
b10110 O5
b10111 O5
b11000 O5
b11001 O5
b11010 O5
b11011 O5
b11100 O5
b11101 O5
b11110 O5
b11111 O5
b100000 O5
1lC
0[C
0]C
1*<
0w;
1y;
1s;
b10000000000000000000000000000000 S;
b1 c;
b0x p;
bx0 l;
b11 c;
b0xx p;
bx00 l;
b111 c;
b0xxx p;
bx000 l;
b1111 c;
b0xxxx p;
bx0000 l;
b11111 c;
b0xxxxx p;
bx00000 l;
b111111 c;
b0xxxxxx p;
bx000000 l;
b1111111 c;
b0xxxxxxx p;
bx0000000 l;
b11111111 c;
b0xxxxxxxx p;
bx00000000 l;
b111111111 c;
b0xxxxxxxxx p;
bx000000000 l;
b1111111111 c;
b0xxxxxxxxxx p;
bx0000000000 l;
b11111111111 c;
b0xxxxxxxxxxx p;
bx00000000000 l;
b111111111111 c;
b0xxxxxxxxxxxx p;
bx000000000000 l;
b1111111111111 c;
b0xxxxxxxxxxxxx p;
bx0000000000000 l;
b11111111111111 c;
b0xxxxxxxxxxxxxx p;
bx00000000000000 l;
b111111111111111 c;
b0xxxxxxxxxxxxxxx p;
bx000000000000000 l;
b1111111111111111 c;
b0xxxxxxxxxxxxxxxx p;
bx0000000000000000 l;
b11111111111111111 c;
b0xxxxxxxxxxxxxxxxx p;
bx00000000000000000 l;
b111111111111111111 c;
b0xxxxxxxxxxxxxxxxxx p;
bx000000000000000000 l;
b1111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxx p;
bx0000000000000000000 l;
b11111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxx p;
bx00000000000000000000 l;
b111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxx p;
bx000000000000000000000 l;
b1111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxx p;
bx0000000000000000000000 l;
b11111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxx p;
bx00000000000000000000000 l;
b111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxx p;
bx000000000000000000000000 l;
b1111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxxx p;
bx0000000000000000000000000 l;
b11111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxxxx p;
bx00000000000000000000000000 l;
b111111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxxxxx p;
bx000000000000000000000000000 l;
b1111111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx p;
bx0000000000000000000000000000 l;
b11111111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx p;
bx00000000000000000000000000000 l;
b111111111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx p;
bx000000000000000000000000000000 l;
b1111111111111111111111111111111 c;
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx p;
bx0000000000000000000000000000000 l;
b11111111111111111111111111111111 c;
bx p;
b0 l;
1j4
0Y4
b10000000000000000000000000000000 54
b1 E4
b0x R4
bx0 N4
b11 E4
b0xx R4
bx00 N4
b111 E4
b0xxx R4
bx000 N4
b1111 E4
b0xxxx R4
bx0000 N4
b11111 E4
b0xxxxx R4
bx00000 N4
b111111 E4
b0xxxxxx R4
bx000000 N4
b1111111 E4
b0xxxxxxx R4
bx0000000 N4
b11111111 E4
b0xxxxxxxx R4
bx00000000 N4
b111111111 E4
b0xxxxxxxxx R4
bx000000000 N4
b1111111111 E4
b0xxxxxxxxxx R4
bx0000000000 N4
b11111111111 E4
b0xxxxxxxxxxx R4
bx00000000000 N4
b111111111111 E4
b0xxxxxxxxxxxx R4
bx000000000000 N4
b1111111111111 E4
b0xxxxxxxxxxxxx R4
bx0000000000000 N4
b11111111111111 E4
b0xxxxxxxxxxxxxx R4
bx00000000000000 N4
b111111111111111 E4
b0xxxxxxxxxxxxxxx R4
bx000000000000000 N4
b1111111111111111 E4
b0xxxxxxxxxxxxxxxx R4
bx0000000000000000 N4
b11111111111111111 E4
b0xxxxxxxxxxxxxxxxx R4
bx00000000000000000 N4
b111111111111111111 E4
b0xxxxxxxxxxxxxxxxxx R4
bx000000000000000000 N4
b1111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxx R4
bx0000000000000000000 N4
b11111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxx R4
bx00000000000000000000 N4
b111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxx R4
bx000000000000000000000 N4
b1111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxx R4
bx0000000000000000000000 N4
b11111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxx R4
bx00000000000000000000000 N4
b111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxx R4
bx000000000000000000000000 N4
b1111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxxx R4
bx0000000000000000000000000 N4
b11111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxxxx R4
bx00000000000000000000000000 N4
b111111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxxxxx R4
bx000000000000000000000000000 N4
b1111111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx R4
bx0000000000000000000000000000 N4
b11111111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx R4
bx00000000000000000000000000000 N4
b111111111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx R4
bx000000000000000000000000000000 N4
b1111111111111111111111111111111 E4
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx R4
bx0000000000000000000000000000000 N4
b11111111111111111111111111111111 E4
bx R4
b0 N4
b10000000000000000000000000000000 TI
1_
b10000000000000000000000000000000 %
b10100000 i;
b11110 !=
b0 T;
b1010000000000 {<
b0 }<
b1 ~<
b0 i<
b1010000000001 {<
b1 i<
b1010000000010 {<
b10 i<
b1010000000011 {<
b11 i<
b1010000000100 {<
b100 i<
b1010000000101 {<
b101 i<
b1010000000110 {<
b110 i<
b1010000000111 {<
b111 i<
b1010000001000 {<
b1000 i<
b1010000001001 {<
b1001 i<
b1010000001010 {<
b1010 i<
b1010000001011 {<
b1011 i<
b1010000001100 {<
b1100 i<
b1010000001101 {<
b1101 i<
b1010000001110 {<
b1110 i<
b1010000001111 {<
b1111 i<
b1010000010000 {<
b10000 i<
b1010000010001 {<
b10001 i<
b1010000010010 {<
b10010 i<
b1010000010011 {<
b10011 i<
b1010000010100 {<
b10100 i<
b1010000010101 {<
b10101 i<
b1010000010110 {<
b10110 i<
b1010000010111 {<
b10111 i<
b1010000011000 {<
b11000 i<
b1010000011001 {<
b11001 i<
b1010000011010 {<
b11010 i<
b1010000011011 {<
b11011 i<
b1010000011100 {<
b11100 i<
b1010000011101 {<
b11101 i<
b1010000011110 {<
b11110 i<
b1010000011111 {<
b11111 i<
b10000000000000000000000000000000 T;
b1010000100000 {<
b100000 i<
b10000000000000000000000000000000 ^;
b11110 cD
b1010000000000 _D
b0 MD
b1010000000001 _D
b1 MD
b1010000000010 _D
b10 MD
b1010000000011 _D
b11 MD
b1010000000100 _D
b100 MD
b1010000000101 _D
b101 MD
b1010000000110 _D
b110 MD
b1010000000111 _D
b111 MD
b1010000001000 _D
b1000 MD
b1010000001001 _D
b1001 MD
b1010000001010 _D
b1010 MD
b1010000001011 _D
b1011 MD
b1010000001100 _D
b1100 MD
b1010000001101 _D
b1101 MD
b1010000001110 _D
b1110 MD
b1010000001111 _D
b1111 MD
b1010000010000 _D
b10000 MD
b1010000010001 _D
b10001 MD
b1010000010010 _D
b10010 MD
b1010000010011 _D
b10011 MD
b1010000010100 _D
b10100 MD
b1010000010101 _D
b10101 MD
b1010000010110 _D
b10110 MD
b1010000010111 _D
b10111 MD
b1010000011000 _D
b11000 MD
b1010000011001 _D
b11001 MD
b1010000011010 _D
b11010 MD
b1010000011011 _D
b11011 MD
b1010000011100 _D
b11100 MD
b1010000011101 _D
b11101 MD
b1010000011110 _D
b11110 MD
b1010000011111 _D
b11111 MD
b1010000100000 _D
b100000 MD
b10000000000000000000000000000000 ];
1L9
1,9
b10000000000000000000000000000000 m0
1uI
1I0
b10000000000000000000000000000000 N$
1WJ
#35
1!
10
0j1
0*9
0L@
b10000 C&
b10000 S$
06+
05+
14+
0N&
0M&
1L&
0&&
0%&
1$&
0\
0[
1Z
b10000 $
13&
1n&
1m&
1j&
0c&
0`&
0\&
b1101111 H$
b10100 Q$
1vK
1j%
1`'
1_'
1\'
0U'
0R'
0N'
11'
10'
1-'
0&'
0#'
0}&
1@%
1?%
1<%
05%
02%
0.%
b0 Q%
b1101111 O%
b0 8'
b0 7'
b1101111 :'
b0 f'
b0 i'
b0 d'
b0 e'
b0 k'
b1101111 j'
1w%
b10100 R$
1@&
b0 4'
b0 5'
1E%
1F%
1H%
0J%
b10 M%
b0 L%
b0 X$
b10 Y$
0b$
1`$
1\$
1[$
b0 U$
b0 T$
0v/
1Y+
1=(
1R%
0o'
0u'
1[L
0(0
0'0
0&0
0%0
011
0?5
0>5
0=5
0<5
0]<
0\<
0[<
0Z<
1zL
1xL
0wL
0uL
0qL
0^(
0X(
0V(
0R(
0w%
0u%
1t%
1r%
1n%
1u+
0t+
0r+
0n+
b10000 L$
b100010100000 R$
b0 J$
b0 K$
b10100 P$
0j0
1:(
18(
07(
05(
01(
0)0
0<,
0@)
0S+
0Q+
0M+
0:)
08)
04)
0@&
0>&
1=&
1;&
17&
0+9
0'*
0$+
0"+
0|*
0h*
0~)
0|)
0x)
0*+
0a)
0^$
0b*
0`*
0\*
0H*
0G*
1b)
0++
1_$
1D-
0C-
0A-
0=-
0C%
1D%
1,.
0+.
0).
0%.
1n.
0m.
0k.
0g.
10/
0//
0-/
0)/
1q/
0p/
0n/
0j/
b10000 U/
b10000 m-
b10000 G$
16L
05L
03L
0/L
1[%
0Z%
0X%
0T%
1~/
0}/
0{/
0w/
1y0
0x0
0v0
1#1
0"1
0~0
1+1
0*1
0(1
0I0
1u%
0t%
0r%
0n%
b10000 R$
b0 N$
b10000 r0
b10000 q0
b10000 p0
1e1
0d1
0b1
1%9
0$9
0"9
1C@
0B@
0@@
0WJ
1>&
0=&
0;&
07&
1P/
0O/
0M/
0I/
0lC
0*<
0j4
